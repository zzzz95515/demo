package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Faults;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61968.Operations.Outage;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.Equipment;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.IdentifiedObject;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.PhaseCode;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.StateVariables.SvPowerFlow;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.StateVariables.SvVoltage;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * Abnormal condition causing current flow through conducting equipment, such 
 * as caused by equipment failure or short circuits from objects not typically 
 * modeled (for example, a tree falling on a line).
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:51 MSK 2020
 */

@Entity
@Table(name = "fault")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Fault extends IdentifiedObject {
	/**
	 * Fault impedance. Its usage is described by 'kind'.
	 */
	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "impedance_mrid")
	@JoinColumn(name = "impedance_projectid")
	@JoinColumn(name = "impedance_synthesizedschemenumber")
	@JoinColumn(name = "impedance_schemascenarionumber")
	private FaultImpedance impedance;
	/**
	 * The kind of phase fault.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "kind")
	private PhaseConnectedFaultKind kind;
	/**
	 * The phases participating in the fault. The fault connections into these 
	 * phases are further specified by the type of fault.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "phases")
	private PhaseCode phases;

	/**
	 * All faults involved in this outage.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "outage_mrid")
	@JoinColumn(name = "outage_projectid")
	@JoinColumn(name = "outage_synthesizedschemenumber")
	@JoinColumn(name = "outage_schemascenarionumber")
	private Outage Outage;
	/**
	 * All faults on this equipment.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "faultyequipment_mrid")
	@JoinColumn(name = "faultyequipment_projectid")
	@JoinColumn(name = "faultyequipment_synthesizedschemenumber")
	@JoinColumn(name = "faultyequipment_schemascenarionumber")
	private Equipment FaultyEquipment;
	/**
	 * All faults with this cause type.
	 */
	@ManyToMany(fetch = FetchType.LAZY)
	@JoinColumn(name = "faultcausetypes_mrid")
	@JoinColumn(name = "faultcausetypes_projectid")
	@JoinColumn(name = "faultcausetypes_synthesizedschemenumber")
	@JoinColumn(name = "faultcausetypes_schemascenarionumber")
	private List<FaultCauseType> FaultCauseTypes;
	/**
	 * Повреждение, для которого было рассчитано данное значения напряжения
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "Fault")
	private List<SvVoltage> CalculatedSvVoltages;
	/**
	 * Токи и мощности, полученные в результате расчета
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "Fault")
	private List<SvPowerFlow> CalculatedSvPowerFlows;

	public FaultImpedance getImpedance(){
		return this.impedance;
	}

	@CompoundFieldSetter(fieldName = "Fault.impedance", fieldType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Faults.FaultImpedance")
	public void setImpedance(FaultImpedance impedance){
		this.impedance = impedance;
	}

	public PhaseConnectedFaultKind getKind(){
		return this.kind;
	}

	@FieldSetter(fieldName = "Fault.kind", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setKind(PhaseConnectedFaultKind kind){
		this.kind = kind;
	}

	public PhaseCode getPhases(){
		return this.phases;
	}

	@FieldSetter(fieldName = "Fault.phases", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setPhases(PhaseCode phases){
		this.phases = phases;
	}

	public Outage getOutage(){
		return this.Outage;
	}

	@AssociationSetter(fieldName = "Fault.Outage", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61968.Operations.Outage", cardinality = "one")
	public void setOutage(Outage Outage){
		this.Outage = Outage;
	}

	public Equipment getFaultyEquipment(){
		return this.FaultyEquipment;
	}

	@AssociationSetter(fieldName = "Fault.FaultyEquipment", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.Equipment", cardinality = "one")
	public void setFaultyEquipment(Equipment FaultyEquipment){
		this.FaultyEquipment = FaultyEquipment;
	}

	public List<FaultCauseType> getFaultCauseTypes(){
		return this.FaultCauseTypes;
	}

	@AssociationSetter(fieldName = "Fault.FaultCauseTypes", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Faults.FaultCauseType", cardinality = "many")
	public void setFaultCauseTypes(List<FaultCauseType> FaultCauseTypes){
		this.FaultCauseTypes = FaultCauseTypes;
	}

	@JsonIgnore
	public List<SvVoltage> getCalculatedSvVoltages(){
		return this.CalculatedSvVoltages;
	}

	@AssociationSetter(fieldName = "Fault.CalculatedSvVoltages", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.StateVariables.SvVoltage", cardinality = "many")
	public void setCalculatedSvVoltages(List<SvVoltage> CalculatedSvVoltages){
		this.CalculatedSvVoltages = CalculatedSvVoltages;
	}

	@JsonIgnore
	public List<SvPowerFlow> getCalculatedSvPowerFlows(){
		return this.CalculatedSvPowerFlows;
	}

	@AssociationSetter(fieldName = "Fault.CalculatedSvPowerFlows", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.StateVariables.SvPowerFlow", cardinality = "many")
	public void setCalculatedSvPowerFlows(List<SvPowerFlow> CalculatedSvPowerFlows){
		this.CalculatedSvPowerFlows = CalculatedSvPowerFlows;
	}

	public Fault(){

	}

}
