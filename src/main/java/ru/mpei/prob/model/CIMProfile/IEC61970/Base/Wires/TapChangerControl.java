package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Reactance;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Resistance;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Voltage;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * Describes behavior specific to tap changers, e.g. how the voltage at the 
 * end of a line varies with the load level and compensation of the voltage 
 * drop by tap adjustment.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:56 MSK 2020
 */

@Entity
@Table(name = "tapchangercontrol")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class TapChangerControl extends RegulatingControl {
	/**
	 * Maximum allowed regulated voltage on the PT secondary, regardless of line 
	 * drop compensation. Sometimes referred to as first-house protection.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="limitVoltage_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="limitVoltage_unit")),
		@AttributeOverride(name="value", column=@Column(name="limitVoltage_value")),
	})
	private Voltage limitVoltage;
	/**
	 * If true, the line drop compensation is to be applied.
	 */
	@Column(name="lineDropCompensation", nullable = true)
	private Boolean lineDropCompensation;
	/**
	 * Line drop compensator resistance setting for normal (forward) power flow.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="lineDropR_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="lineDropR_unit")),
		@AttributeOverride(name="value", column=@Column(name="lineDropR_value")),
	})
	private Resistance lineDropR;
	/**
	 * Line drop compensator reactance setting for normal (forward) power flow.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="lineDropX_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="lineDropX_unit")),
		@AttributeOverride(name="value", column=@Column(name="lineDropX_value")),
	})
	private Reactance lineDropX;
	/**
	 * Line drop compensator resistance setting for reverse power flow.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="reverseLineDropR_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="reverseLineDropR_unit")),
		@AttributeOverride(name="value", column=@Column(name="reverseLineDropR_value")),
	})
	private Resistance reverseLineDropR;
	/**
	 * Line drop compensator reactance setting for reverse power flow.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="reverseLineDropX_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="reverseLineDropX_unit")),
		@AttributeOverride(name="value", column=@Column(name="reverseLineDropX_value")),
	})
	private Reactance reverseLineDropX;

	/**
	 * The regulating control scheme in which this tap changer participates.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "TapChangerControl")
	private List<TapChanger> TapChanger;

	public Voltage getLimitVoltage(){
		return this.limitVoltage;
	}

	@FieldSetter(fieldName = "TapChangerControl.limitVoltage", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setLimitVoltage(Voltage limitVoltage){
		this.limitVoltage = limitVoltage;
	}

	public Boolean getLineDropCompensation(){
		return this.lineDropCompensation;
	}

	@FieldSetter(fieldName = "TapChangerControl.lineDropCompensation", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setLineDropCompensation(Boolean lineDropCompensation){
		this.lineDropCompensation = lineDropCompensation;
	}

	public Resistance getLineDropR(){
		return this.lineDropR;
	}

	@FieldSetter(fieldName = "TapChangerControl.lineDropR", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setLineDropR(Resistance lineDropR){
		this.lineDropR = lineDropR;
	}

	public Reactance getLineDropX(){
		return this.lineDropX;
	}

	@FieldSetter(fieldName = "TapChangerControl.lineDropX", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setLineDropX(Reactance lineDropX){
		this.lineDropX = lineDropX;
	}

	public Resistance getReverseLineDropR(){
		return this.reverseLineDropR;
	}

	@FieldSetter(fieldName = "TapChangerControl.reverseLineDropR", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setReverseLineDropR(Resistance reverseLineDropR){
		this.reverseLineDropR = reverseLineDropR;
	}

	public Reactance getReverseLineDropX(){
		return this.reverseLineDropX;
	}

	@FieldSetter(fieldName = "TapChangerControl.reverseLineDropX", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setReverseLineDropX(Reactance reverseLineDropX){
		this.reverseLineDropX = reverseLineDropX;
	}

	@JsonIgnore
	public List<TapChanger> getTapChanger(){
		return this.TapChanger;
	}

	@AssociationSetter(fieldName = "TapChangerControl.TapChanger", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Wires.TapChanger", cardinality = "many")
	public void setTapChanger(List<TapChanger> TapChanger){
		this.TapChanger = TapChanger;
	}

	public TapChangerControl(){

	}

}
