package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.Curve;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Pressure;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Temperature;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Equivalents.EquivalentInjection;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * Reactive power rating envelope versus the synchronous machine's active 
 * power, in both the generating and motoring modes. For each active power 
 * value there is a corresponding high and low reactive power limit  value. 
 * Typically there will be a separate curve for each coolant condition, such 
 * as hydrogen pressure.  The Y1 axis values represent reactive minimum and 
 * the Y2 axis values represent reactive maximum.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:55 MSK 2020
 */

@Entity
@Table(name = "reactivecapabilitycurve")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ReactiveCapabilityCurve extends Curve {
	/**
	 * The machine's coolant temperature (e.g., ambient air or stator circulating 
	 * water).
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="coolantTemperature_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="coolantTemperature_unit")),
		@AttributeOverride(name="value", column=@Column(name="coolantTemperature_value")),
	})
	private Temperature coolantTemperature;
	/**
	 * The hydrogen coolant pressure
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="hydrogenPressure_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="hydrogenPressure_unit")),
		@AttributeOverride(name="value", column=@Column(name="hydrogenPressure_value")),
	})
	private Pressure hydrogenPressure;

	/**
	 * The reactive capability curve used by this equivalent injection.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "ReactiveCapabilityCurve")
	private List<EquivalentInjection> EquivalentInjection;

	public Temperature getCoolantTemperature(){
		return this.coolantTemperature;
	}

	@FieldSetter(fieldName = "ReactiveCapabilityCurve.coolantTemperature", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setCoolantTemperature(Temperature coolantTemperature){
		this.coolantTemperature = coolantTemperature;
	}

	public Pressure getHydrogenPressure(){
		return this.hydrogenPressure;
	}

	@FieldSetter(fieldName = "ReactiveCapabilityCurve.hydrogenPressure", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setHydrogenPressure(Pressure hydrogenPressure){
		this.hydrogenPressure = hydrogenPressure;
	}

	@JsonIgnore
	public List<EquivalentInjection> getEquivalentInjection(){
		return this.EquivalentInjection;
	}

	@AssociationSetter(fieldName = "ReactiveCapabilityCurve.EquivalentInjection", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Equivalents.EquivalentInjection", cardinality = "many")
	public void setEquivalentInjection(List<EquivalentInjection> EquivalentInjection){
		this.EquivalentInjection = EquivalentInjection;
	}

	public ReactiveCapabilityCurve(){

	}

}
