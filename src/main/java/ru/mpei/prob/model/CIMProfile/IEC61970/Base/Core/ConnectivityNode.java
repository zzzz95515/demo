package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.PerCent;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Voltage;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Protection.ProtectionEquipment;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.StateVariables.SvVoltage;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Topology.TopologicalNode;
import ru.mpei.prob.model.CIMProfile.NTI.NodeTypes;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * Connectivity nodes are points where terminals of AC conducting equipment 
 * are connected together with zero impedance.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:50 MSK 2020
 */

@Entity
@Table(name = "connectivitynode")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ConnectivityNode extends IdentifiedObject {
	/**
	 * Насколько напряжение в узле отличается от номинального
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="deltaNomVoltage_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="deltaNomVoltage_unit")),
		@AttributeOverride(name="value", column=@Column(name="deltaNomVoltage_value")),
	})
	private PerCent deltaNomVoltage;
	/**
	 * Начальное значение напряжения для расчета режима
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="initialVoltage_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="initialVoltage_unit")),
		@AttributeOverride(name="value", column=@Column(name="initialVoltage_value")),
	})
	private Voltage initialVoltage;
	/**
	 * Напряжение в узле ниже 5% от номинального?
	 */
	@Column(name="isLowVoltage", nullable = true)
	private Boolean isLowVoltage;
	/**
	 * Тип узла. Задается в ИД (если узел базисный), либо загружается из данных 
	 * Rastr (.csv).Переопределяется в процессе расчета (если узел не базисный)
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "nodeType")
	private NodeTypes nodeType;
	/**
	 * Расчитанное напряжение программой Rastr
	 */
	@Column(name="rastrV", nullable = true)
	private Float rastrV;

	/**
	 * The connectivity nodes combine together to form this topological node. 
	 *  May depend on the current state of switches in the network.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "topologicalnode_mrid")
	@JoinColumn(name = "topologicalnode_projectid")
	@JoinColumn(name = "topologicalnode_synthesizedschemenumber")
	@JoinColumn(name = "topologicalnode_schemascenarionumber")
	private TopologicalNode TopologicalNode;
	/**
	 * Connectivity nodes which belong to this connectivity node container.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "connectivitynodecontainer_mrid")
	@JoinColumn(name = "connectivitynodecontainer_projectid")
	@JoinColumn(name = "connectivitynodecontainer_synthesizedschemenumber")
	@JoinColumn(name = "connectivitynodecontainer_schemascenarionumber")
	private ConnectivityNodeContainer ConnectivityNodeContainer;
	/**
	 * Значения напряжений в разных сценариях
	 */
	@ManyToMany(fetch = FetchType.LAZY)
	@JoinColumn(name = "calculatedsvvoltages_mrid")
	@JoinColumn(name = "calculatedsvvoltages_projectid")
	@JoinColumn(name = "calculatedsvvoltages_synthesizedschemenumber")
	@JoinColumn(name = "calculatedsvvoltages_schemascenarionumber")
	private List<SvVoltage> CalculatedSvVoltages;
	/**
	 * ConnectivityNode в начале защищаемого участка для выбора значений напряжения
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "ConnectivityNodeForMaxVoltage")
	private List<ProtectionEquipment> ProtectionEquipmentsForMaxVoltage;
	/**
	 * The connectivity node to which this terminal connects with zero impedance.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "ConnectivityNode")
	private List<Terminal> Terminals;

	public PerCent getDeltaNomVoltage(){
		return this.deltaNomVoltage;
	}

	@FieldSetter(fieldName = "ConnectivityNode.deltaNomVoltage", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setDeltaNomVoltage(PerCent deltaNomVoltage){
		this.deltaNomVoltage = deltaNomVoltage;
	}

	public Voltage getInitialVoltage(){
		return this.initialVoltage;
	}

	@FieldSetter(fieldName = "ConnectivityNode.initialVoltage", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setInitialVoltage(Voltage initialVoltage){
		this.initialVoltage = initialVoltage;
	}

	public Boolean getIsLowVoltage(){
		return this.isLowVoltage;
	}

	@FieldSetter(fieldName = "ConnectivityNode.isLowVoltage", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setIsLowVoltage(Boolean isLowVoltage){
		this.isLowVoltage = isLowVoltage;
	}

	public NodeTypes getNodeType(){
		return this.nodeType;
	}

	@FieldSetter(fieldName = "ConnectivityNode.nodeType", fieldTypeStereotype = "Enumeration", fieldStereotype = "nti")
	public void setNodeType(NodeTypes nodeType){
		this.nodeType = nodeType;
	}

	public Float getRastrV(){
		return this.rastrV;
	}

	@FieldSetter(fieldName = "ConnectivityNode.rastrV", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setRastrV(Float rastrV){
		this.rastrV = rastrV;
	}

	public TopologicalNode getTopologicalNode(){
		return this.TopologicalNode;
	}

	@AssociationSetter(fieldName = "ConnectivityNode.TopologicalNode", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Topology.TopologicalNode", cardinality = "one")
	public void setTopologicalNode(TopologicalNode TopologicalNode){
		this.TopologicalNode = TopologicalNode;
	}

	public ConnectivityNodeContainer getConnectivityNodeContainer(){
		return this.ConnectivityNodeContainer;
	}

	@AssociationSetter(fieldName = "ConnectivityNode.ConnectivityNodeContainer", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.ConnectivityNodeContainer", cardinality = "one")
	public void setConnectivityNodeContainer(ConnectivityNodeContainer ConnectivityNodeContainer){
		this.ConnectivityNodeContainer = ConnectivityNodeContainer;
	}

	public List<SvVoltage> getCalculatedSvVoltages(){
		return this.CalculatedSvVoltages;
	}

	@AssociationSetter(fieldName = "ConnectivityNode.CalculatedSvVoltages", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.StateVariables.SvVoltage", cardinality = "many")
	public void setCalculatedSvVoltages(List<SvVoltage> CalculatedSvVoltages){
		this.CalculatedSvVoltages = CalculatedSvVoltages;
	}

	@JsonIgnore
	public List<ProtectionEquipment> getProtectionEquipmentsForMaxVoltage(){
		return this.ProtectionEquipmentsForMaxVoltage;
	}

	@AssociationSetter(fieldName = "ConnectivityNode.ProtectionEquipmentsForMaxVoltage", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Protection.ProtectionEquipment", cardinality = "many")
	public void setProtectionEquipmentsForMaxVoltage(List<ProtectionEquipment> ProtectionEquipmentsForMaxVoltage){
		this.ProtectionEquipmentsForMaxVoltage = ProtectionEquipmentsForMaxVoltage;
	}

	@JsonIgnore
	public List<Terminal> getTerminals(){
		return this.Terminals;
	}

	@AssociationSetter(fieldName = "ConnectivityNode.Terminals", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.Terminal", cardinality = "many")
	public void setTerminals(List<Terminal> Terminals){
		this.Terminals = Terminals;
	}

	public ConnectivityNode(){

	}

}
