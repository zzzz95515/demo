package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Equivalents;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.*;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires.ReactiveCapabilityCurve;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * This class represents equivalent injections (generation or load).  Voltage 
 * regulation is allowed only at the point of connection.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:51 MSK 2020
 */

@Entity
@Table(name = "equivalentinjection")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class EquivalentInjection extends EquivalentEquipment {
	/**
	 * Maximum active power of the injection.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="maxP_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="maxP_unit")),
		@AttributeOverride(name="value", column=@Column(name="maxP_value")),
	})
	private ActivePower maxP;
	/**
	 * Used for modeling of infeed for load flow exchange. Not used for short 
	 * circuit modeling.  If maxQ and minQ are not used ReactiveCapabilityCurve 
	 * can be used.   
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="maxQ_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="maxQ_unit")),
		@AttributeOverride(name="value", column=@Column(name="maxQ_value")),
	})
	private ReactivePower maxQ;
	/**
	 * Minimum active power of the injection.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="minP_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="minP_unit")),
		@AttributeOverride(name="value", column=@Column(name="minP_value")),
	})
	private ActivePower minP;
	/**
	 * Used for modeling of infeed for load flow exchange. Not used for short 
	 * circuit modeling.  If maxQ and minQ are not used ReactiveCapabilityCurve 
	 * can be used.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="minQ_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="minQ_unit")),
		@AttributeOverride(name="value", column=@Column(name="minQ_value")),
	})
	private ReactivePower minQ;
	/**
	 * Equivalent active power injection. Load sign convention is used, i.e. positive 
	 * sign means flow out from a node.Starting value for steady state solutions.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="p_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="p_unit")),
		@AttributeOverride(name="value", column=@Column(name="p_value")),
	})
	private ActivePower p;
	/**
	 * Equivalent reactive power injection. Load sign convention is used, i.e. 
	 * positive sign means flow out from a node.Starting value for steady state 
	 * solutions.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="q_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="q_unit")),
		@AttributeOverride(name="value", column=@Column(name="q_value")),
	})
	private ReactivePower q;
	/**
	 * Positive sequence resistance. Used to represent Extended-Ward (IEC 60909).Usage 
	 * : Extended-Ward is a result of network reduction prior to the data exchange. 
	 * 
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="r_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="r_unit")),
		@AttributeOverride(name="value", column=@Column(name="r_value")),
	})
	private Resistance r;
	/**
	 * Zero sequence resistance. Used to represent Extended-Ward (IEC 60909).Usage 
	 * : Extended-Ward is a result of network reduction prior to the data exchange. 
	 * 
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="r0_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="r0_unit")),
		@AttributeOverride(name="value", column=@Column(name="r0_value")),
	})
	private Resistance r0;
	/**
	 * Negative sequence resistance. Used to represent Extended-Ward (IEC 60909).Usage 
	 * : Extended-Ward is a result of network reduction prior to the data exchange. 
	 * 
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="r2_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="r2_unit")),
		@AttributeOverride(name="value", column=@Column(name="r2_value")),
	})
	private Resistance r2;
	/**
	 * Specifies whether or not the EquivalentInjection has the capability to 
	 * regulate the local voltage.
	 */
	@Column(name="regulationCapability", nullable = true)
	private Boolean regulationCapability;
	/**
	 * Specifies the default regulation status of the EquivalentInjection.  True 
	 * is regulating.  False is not regulating.
	 */
	@Column(name="regulationStatus", nullable = true)
	private Boolean regulationStatus;
	/**
	 * The target voltage for voltage regulation.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="regulationTarget_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="regulationTarget_unit")),
		@AttributeOverride(name="value", column=@Column(name="regulationTarget_value")),
	})
	private Voltage regulationTarget;
	/**
	 * Positive sequence reactance. Used to represent Extended-Ward (IEC 60909).Usage 
	 * : Extended-Ward is a result of network reduction prior to the data exchange. 
	 * 
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="x_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="x_unit")),
		@AttributeOverride(name="value", column=@Column(name="x_value")),
	})
	private Reactance x;
	/**
	 * Zero sequence reactance. Used to represent Extended-Ward (IEC 60909).Usage 
	 * : Extended-Ward is a result of network reduction prior to the data exchange. 
	 * 
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="x0_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="x0_unit")),
		@AttributeOverride(name="value", column=@Column(name="x0_value")),
	})
	private Reactance x0;
	/**
	 * Negative sequence reactance. Used to represent Extended-Ward (IEC 60909).Usage 
	 * : Extended-Ward is a result of network reduction prior to the data exchange. 
	 * 
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="x2_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="x2_unit")),
		@AttributeOverride(name="value", column=@Column(name="x2_value")),
	})
	private Reactance x2;

	/**
	 * The equivalent injection using this reactive capability curve.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "reactivecapabilitycurve_mrid")
	@JoinColumn(name = "reactivecapabilitycurve_projectid")
	@JoinColumn(name = "reactivecapabilitycurve_synthesizedschemenumber")
	@JoinColumn(name = "reactivecapabilitycurve_schemascenarionumber")
	private ReactiveCapabilityCurve ReactiveCapabilityCurve;

	public ActivePower getMaxP(){
		return this.maxP;
	}

	@FieldSetter(fieldName = "EquivalentInjection.maxP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMaxP(ActivePower maxP){
		this.maxP = maxP;
	}

	public ReactivePower getMaxQ(){
		return this.maxQ;
	}

	@FieldSetter(fieldName = "EquivalentInjection.maxQ", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMaxQ(ReactivePower maxQ){
		this.maxQ = maxQ;
	}

	public ActivePower getMinP(){
		return this.minP;
	}

	@FieldSetter(fieldName = "EquivalentInjection.minP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMinP(ActivePower minP){
		this.minP = minP;
	}

	public ReactivePower getMinQ(){
		return this.minQ;
	}

	@FieldSetter(fieldName = "EquivalentInjection.minQ", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMinQ(ReactivePower minQ){
		this.minQ = minQ;
	}

	public ActivePower getP(){
		return this.p;
	}

	@FieldSetter(fieldName = "EquivalentInjection.p", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setP(ActivePower p){
		this.p = p;
	}

	public ReactivePower getQ(){
		return this.q;
	}

	@FieldSetter(fieldName = "EquivalentInjection.q", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setQ(ReactivePower q){
		this.q = q;
	}

	public Resistance getR(){
		return this.r;
	}

	@FieldSetter(fieldName = "EquivalentInjection.r", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setR(Resistance r){
		this.r = r;
	}

	public Resistance getR0(){
		return this.r0;
	}

	@FieldSetter(fieldName = "EquivalentInjection.r0", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setR0(Resistance r0){
		this.r0 = r0;
	}

	public Resistance getR2(){
		return this.r2;
	}

	@FieldSetter(fieldName = "EquivalentInjection.r2", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setR2(Resistance r2){
		this.r2 = r2;
	}

	public Boolean getRegulationCapability(){
		return this.regulationCapability;
	}

	@FieldSetter(fieldName = "EquivalentInjection.regulationCapability", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setRegulationCapability(Boolean regulationCapability){
		this.regulationCapability = regulationCapability;
	}

	public Boolean getRegulationStatus(){
		return this.regulationStatus;
	}

	@FieldSetter(fieldName = "EquivalentInjection.regulationStatus", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setRegulationStatus(Boolean regulationStatus){
		this.regulationStatus = regulationStatus;
	}

	public Voltage getRegulationTarget(){
		return this.regulationTarget;
	}

	@FieldSetter(fieldName = "EquivalentInjection.regulationTarget", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setRegulationTarget(Voltage regulationTarget){
		this.regulationTarget = regulationTarget;
	}

	public Reactance getX(){
		return this.x;
	}

	@FieldSetter(fieldName = "EquivalentInjection.x", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setX(Reactance x){
		this.x = x;
	}

	public Reactance getX0(){
		return this.x0;
	}

	@FieldSetter(fieldName = "EquivalentInjection.x0", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setX0(Reactance x0){
		this.x0 = x0;
	}

	public Reactance getX2(){
		return this.x2;
	}

	@FieldSetter(fieldName = "EquivalentInjection.x2", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setX2(Reactance x2){
		this.x2 = x2;
	}

	public ReactiveCapabilityCurve getReactiveCapabilityCurve(){
		return this.ReactiveCapabilityCurve;
	}

	@AssociationSetter(fieldName = "EquivalentInjection.ReactiveCapabilityCurve", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Wires.ReactiveCapabilityCurve", cardinality = "one")
	public void setReactiveCapabilityCurve(ReactiveCapabilityCurve ReactiveCapabilityCurve){
		this.ReactiveCapabilityCurve = ReactiveCapabilityCurve;
	}

	public EquivalentInjection(){

	}

}
