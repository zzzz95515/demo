package ru.mpei.prob.model.CIMProfile.IEC61970.Base.DC;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.AngleDegrees;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.CurrentFlow;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * DC side of the current source converter (CSC).
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:50 MSK 2020
 */

@Entity
@Table(name = "csconverter")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class CsConverter extends ACDCConverter {
	/**
	 * Firing angle, typical value between 10 and 18 degrees for a rectifier. 
	 * CSC state variable, result from power flow.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="alpha_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="alpha_unit")),
		@AttributeOverride(name="value", column=@Column(name="alpha_value")),
	})
	private AngleDegrees alpha;
	/**
	 * Extinction angle. CSC state variable, result from power flow.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="gamma_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="gamma_unit")),
		@AttributeOverride(name="value", column=@Column(name="gamma_value")),
	})
	private AngleDegrees gamma;
	/**
	 * Maximum firing angle. CSC configuration data used in power flow.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="maxAlpha_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="maxAlpha_unit")),
		@AttributeOverride(name="value", column=@Column(name="maxAlpha_value")),
	})
	private AngleDegrees maxAlpha;
	/**
	 * Maximum extinction angle. CSC configuration data used in power flow.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="maxGamma_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="maxGamma_unit")),
		@AttributeOverride(name="value", column=@Column(name="maxGamma_value")),
	})
	private AngleDegrees maxGamma;
	/**
	 * The maximum direct current (Id) on the DC side at which the converter should 
	 * operate. Converter configuration data use in power flow.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="maxIdc_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="maxIdc_unit")),
		@AttributeOverride(name="value", column=@Column(name="maxIdc_value")),
	})
	private CurrentFlow maxIdc;
	/**
	 * Minimum firing angle. CSC configuration data used in power flow.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="minAlpha_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="minAlpha_unit")),
		@AttributeOverride(name="value", column=@Column(name="minAlpha_value")),
	})
	private AngleDegrees minAlpha;
	/**
	 * Minimum extinction angle. CSC configuration data used in power flow.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="minGamma_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="minGamma_unit")),
		@AttributeOverride(name="value", column=@Column(name="minGamma_value")),
	})
	private AngleDegrees minGamma;
	/**
	 * The minimum direct current (Id) on the DC side at which the converter should 
	 * operate. CSC configuration data used in power flow.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="minIdc_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="minIdc_unit")),
		@AttributeOverride(name="value", column=@Column(name="minIdc_value")),
	})
	private CurrentFlow minIdc;
	/**
	 * Indicates whether the DC pole is operating as an inverter or as a rectifier. 
	 * CSC control variable used in power flow.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "operatingMode")
	private CsOperatingModeKind operatingMode;
	@Enumerated(EnumType.STRING)
	@Column(name = "pPccControl")
	private CsPpccControlKind pPccControl;
	/**
	 * Rated converter DC current, also called IdN. Converter configuration data 
	 * used in power flow.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedIdc_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedIdc_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedIdc_value")),
	})
	private CurrentFlow ratedIdc;
	/**
	 * Target firing angle. CSC control variable used in power flow.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="targetAlpha_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="targetAlpha_unit")),
		@AttributeOverride(name="value", column=@Column(name="targetAlpha_value")),
	})
	private AngleDegrees targetAlpha;
	/**
	 * Target extinction angle. CSC  control variable used in power flow.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="targetGamma_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="targetGamma_unit")),
		@AttributeOverride(name="value", column=@Column(name="targetGamma_value")),
	})
	private AngleDegrees targetGamma;
	/**
	 * DC current target value. CSC control variable used in power flow.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="targetIdc_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="targetIdc_unit")),
		@AttributeOverride(name="value", column=@Column(name="targetIdc_value")),
	})
	private CurrentFlow targetIdc;


	public AngleDegrees getAlpha(){
		return this.alpha;
	}

	@FieldSetter(fieldName = "CsConverter.alpha", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setAlpha(AngleDegrees alpha){
		this.alpha = alpha;
	}

	public AngleDegrees getGamma(){
		return this.gamma;
	}

	@FieldSetter(fieldName = "CsConverter.gamma", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setGamma(AngleDegrees gamma){
		this.gamma = gamma;
	}

	public AngleDegrees getMaxAlpha(){
		return this.maxAlpha;
	}

	@FieldSetter(fieldName = "CsConverter.maxAlpha", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMaxAlpha(AngleDegrees maxAlpha){
		this.maxAlpha = maxAlpha;
	}

	public AngleDegrees getMaxGamma(){
		return this.maxGamma;
	}

	@FieldSetter(fieldName = "CsConverter.maxGamma", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMaxGamma(AngleDegrees maxGamma){
		this.maxGamma = maxGamma;
	}

	public CurrentFlow getMaxIdc(){
		return this.maxIdc;
	}

	@FieldSetter(fieldName = "CsConverter.maxIdc", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMaxIdc(CurrentFlow maxIdc){
		this.maxIdc = maxIdc;
	}

	public AngleDegrees getMinAlpha(){
		return this.minAlpha;
	}

	@FieldSetter(fieldName = "CsConverter.minAlpha", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMinAlpha(AngleDegrees minAlpha){
		this.minAlpha = minAlpha;
	}

	public AngleDegrees getMinGamma(){
		return this.minGamma;
	}

	@FieldSetter(fieldName = "CsConverter.minGamma", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMinGamma(AngleDegrees minGamma){
		this.minGamma = minGamma;
	}

	public CurrentFlow getMinIdc(){
		return this.minIdc;
	}

	@FieldSetter(fieldName = "CsConverter.minIdc", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMinIdc(CurrentFlow minIdc){
		this.minIdc = minIdc;
	}

	public CsOperatingModeKind getOperatingMode(){
		return this.operatingMode;
	}

	@FieldSetter(fieldName = "CsConverter.operatingMode", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setOperatingMode(CsOperatingModeKind operatingMode){
		this.operatingMode = operatingMode;
	}

	public CsPpccControlKind getPPccControl(){
		return this.pPccControl;
	}

	@FieldSetter(fieldName = "CsConverter.pPccControl", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setPPccControl(CsPpccControlKind pPccControl){
		this.pPccControl = pPccControl;
	}

	public CurrentFlow getRatedIdc(){
		return this.ratedIdc;
	}

	@FieldSetter(fieldName = "CsConverter.ratedIdc", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setRatedIdc(CurrentFlow ratedIdc){
		this.ratedIdc = ratedIdc;
	}

	public AngleDegrees getTargetAlpha(){
		return this.targetAlpha;
	}

	@FieldSetter(fieldName = "CsConverter.targetAlpha", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setTargetAlpha(AngleDegrees targetAlpha){
		this.targetAlpha = targetAlpha;
	}

	public AngleDegrees getTargetGamma(){
		return this.targetGamma;
	}

	@FieldSetter(fieldName = "CsConverter.targetGamma", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setTargetGamma(AngleDegrees targetGamma){
		this.targetGamma = targetGamma;
	}

	public CurrentFlow getTargetIdc(){
		return this.targetIdc;
	}

	@FieldSetter(fieldName = "CsConverter.targetIdc", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setTargetIdc(CurrentFlow targetIdc){
		this.targetIdc = targetIdc;
	}

	public CsConverter(){

	}

}
