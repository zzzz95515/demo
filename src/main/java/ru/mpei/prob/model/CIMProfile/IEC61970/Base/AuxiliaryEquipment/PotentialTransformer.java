package ru.mpei.prob.model.CIMProfile.IEC61970.Base.AuxiliaryEquipment;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Voltage;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Protection.ProtectionEquipment;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires.WindingConnection;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * Instrument transformer (also known as Voltage Transformer) used to measure 
 * electrical qualities of the circuit that is being protected and/or monitored. 
 * Typically used as voltage transducer for the purpose of metering, protection, 
 * or sometimes auxiliary substation supply. A typical secondary voltage rating 
 * would be 120V.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:50 MSK 2020
 */

@Entity
@Table(name = "potentialtransformer")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class PotentialTransformer extends Sensor {
	/**
	 * PT accuracy classification.
	 */
	@Column(name="accuracyClass", nullable = true)
	private String accuracyClass;
	/**
	 * Nominal ratio between the primary and secondary voltage.
	 */
	@Column(name="nominalRatio", nullable = true)
	private Float nominalRatio;
	/**
	 * Первичное напряжение
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="primaryRatedVoltage_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="primaryRatedVoltage_unit")),
		@AttributeOverride(name="value", column=@Column(name="primaryRatedVoltage_value")),
	})
	private Voltage primaryRatedVoltage;
	/**
	 * Potential transformer (PT) classification covering burden.
	 */
	@Column(name="ptClass", nullable = true)
	private String ptClass;
	/**
	 * Вторичное напряжение
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="secondaryRatedVoltage_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="secondaryRatedVoltage_unit")),
		@AttributeOverride(name="value", column=@Column(name="secondaryRatedVoltage_value")),
	})
	private Voltage secondaryRatedVoltage;
	/**
	 * Potential transformer construction type.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "type")
	private PotentialTransformerKind type;
	/**
	 * Схема соединения вторичной обмотки
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "windingConnectionType")
	private WindingConnection windingConnectionType;

	/**
	 * Терминал РЗА
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "protectionequipment_mrid")
	@JoinColumn(name = "protectionequipment_projectid")
	@JoinColumn(name = "protectionequipment_synthesizedschemenumber")
	@JoinColumn(name = "protectionequipment_schemascenarionumber")
	private ProtectionEquipment ProtectionEquipment;

	public String getAccuracyClass(){
		return this.accuracyClass;
	}

	@FieldSetter(fieldName = "PotentialTransformer.accuracyClass", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setAccuracyClass(String accuracyClass){
		this.accuracyClass = accuracyClass;
	}

	public Float getNominalRatio(){
		return this.nominalRatio;
	}

	@FieldSetter(fieldName = "PotentialTransformer.nominalRatio", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setNominalRatio(Float nominalRatio){
		this.nominalRatio = nominalRatio;
	}

	public Voltage getPrimaryRatedVoltage(){
		return this.primaryRatedVoltage;
	}

	@FieldSetter(fieldName = "PotentialTransformer.primaryRatedVoltage", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setPrimaryRatedVoltage(Voltage primaryRatedVoltage){
		this.primaryRatedVoltage = primaryRatedVoltage;
	}

	public String getPtClass(){
		return this.ptClass;
	}

	@FieldSetter(fieldName = "PotentialTransformer.ptClass", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setPtClass(String ptClass){
		this.ptClass = ptClass;
	}

	public Voltage getSecondaryRatedVoltage(){
		return this.secondaryRatedVoltage;
	}

	@FieldSetter(fieldName = "PotentialTransformer.secondaryRatedVoltage", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setSecondaryRatedVoltage(Voltage secondaryRatedVoltage){
		this.secondaryRatedVoltage = secondaryRatedVoltage;
	}

	public PotentialTransformerKind getType(){
		return this.type;
	}

	@FieldSetter(fieldName = "PotentialTransformer.type", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setType(PotentialTransformerKind type){
		this.type = type;
	}

	public WindingConnection getWindingConnectionType(){
		return this.windingConnectionType;
	}

	@FieldSetter(fieldName = "PotentialTransformer.windingConnectionType", fieldTypeStereotype = "Enumeration", fieldStereotype = "nti")
	public void setWindingConnectionType(WindingConnection windingConnectionType){
		this.windingConnectionType = windingConnectionType;
	}

	public ProtectionEquipment getProtectionEquipment(){
		return this.ProtectionEquipment;
	}

	@AssociationSetter(fieldName = "PotentialTransformer.ProtectionEquipment", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Protection.ProtectionEquipment", cardinality = "one")
	public void setProtectionEquipment(ProtectionEquipment ProtectionEquipment){
		this.ProtectionEquipment = ProtectionEquipment;
	}

	public PotentialTransformer(){

	}

}
