package ru.mpei.prob.model.CIMProfile.IEC61968.Assets;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.IdentifiedObject;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import java.util.Date;

/**
 * Dates for lifecycle events of an asset.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:50 MSK 2020
 */

@Entity
@Table(name = "lifecycledate")
@JsonInclude(JsonInclude.Include.NON_NULL)
// surrogate inheritance
public class LifecycleDate extends IdentifiedObject{
	/**
	 * (if applicable) Date current installation was completed, which may not 
	 * be the same as the in-service date. Asset may have been installed at other 
	 * locations previously. Ignored if asset is (1) not currently installed (e.g., 
	 * stored in a depot) or (2) not intended to be installed (e.g., vehicle, 
	 * tool).
	 */
	@Column(name="installationDate", nullable = true)
	private Date installationDate;
	/**
	 * Date the asset was manufactured.
	 */
	@Column(name="manufacturedDate", nullable = true)
	private Date manufacturedDate;
	/**
	 * Date the asset was purchased. Note that even though an asset may have been 
	 * purchased, it may not have been received into inventory at the time of 
	 * purchase.
	 */
	@Column(name="purchaseDate", nullable = true)
	private Date purchaseDate;
	/**
	 * Date the asset was received and first placed into inventory.
	 */
	@Column(name="receivedDate", nullable = true)
	private Date receivedDate;
	/**
	 * (if applicable) Date when the asset was last removed from service. Ignored 
	 * if (1) not intended to be in service, or (2) currently in service.
	 */
	@Column(name="removalDate", nullable = true)
	private Date removalDate;
	/**
	 * (if applicable) Date the asset is permanently retired from service and 
	 * may be scheduled for disposal. Ignored if asset is (1) currently in service, 
	 * or (2) permanently removed from service.
	 */
	@Column(name="retiredDate", nullable = true)
	private Date retiredDate;


	public Date getInstallationDate(){
		return this.installationDate;
	}

	@FieldSetter(fieldName = "LifecycleDate.installationDate", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setInstallationDate(Date installationDate){
		this.installationDate = installationDate;
	}

	public Date getManufacturedDate(){
		return this.manufacturedDate;
	}

	@FieldSetter(fieldName = "LifecycleDate.manufacturedDate", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setManufacturedDate(Date manufacturedDate){
		this.manufacturedDate = manufacturedDate;
	}

	public Date getPurchaseDate(){
		return this.purchaseDate;
	}

	@FieldSetter(fieldName = "LifecycleDate.purchaseDate", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setPurchaseDate(Date purchaseDate){
		this.purchaseDate = purchaseDate;
	}

	public Date getReceivedDate(){
		return this.receivedDate;
	}

	@FieldSetter(fieldName = "LifecycleDate.receivedDate", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setReceivedDate(Date receivedDate){
		this.receivedDate = receivedDate;
	}

	public Date getRemovalDate(){
		return this.removalDate;
	}

	@FieldSetter(fieldName = "LifecycleDate.removalDate", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setRemovalDate(Date removalDate){
		this.removalDate = removalDate;
	}

	public Date getRetiredDate(){
		return this.retiredDate;
	}

	@FieldSetter(fieldName = "LifecycleDate.retiredDate", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setRetiredDate(Date retiredDate){
		this.retiredDate = retiredDate;
	}

	public LifecycleDate(){

	}

}
