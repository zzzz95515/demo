package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Seconds;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Voltage;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.VoltagePerReactivePower;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.StateVariables.SvShuntCompensatorSections;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.Date;
import java.util.List;

/**
 * A shunt capacitor or reactor or switchable bank of shunt capacitors or 
 * reactors. A section of a shunt compensator is an individual capacitor or 
 * reactor.  A negative value for reactivePerSection indicates that the compensator 
 * is a reactor. ShuntCompensator is a single terminal device.  Ground is 
 * implied.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:56 MSK 2020
 */

@Entity
@Table(name = "shuntcompensator")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ShuntCompensator extends RegulatingCondEq {
	/**
	 * Time delay required for the device to be connected or disconnected by automatic 
	 * voltage regulation (AVR).
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="aVRDelay_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="aVRDelay_unit")),
		@AttributeOverride(name="value", column=@Column(name="aVRDelay_value")),
	})
	private Seconds aVRDelay;
	/**
	 * Used for Yn and Zn connections. True if the neutral is solidly grounded.
	 */
	@Column(name="grounded", nullable = true)
	private Boolean grounded;
	/**
	 * The maximum number of sections that may be switched in. 
	 */
	@Column(name="maximumSections", nullable = true)
	private Integer maximumSections;
	/**
	 * The voltage at which the nominal reactive power may be calculated. This 
	 * should normally be within 10% of the voltage at which the capacitor is 
	 * connected to the network.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="nomU_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="nomU_unit")),
		@AttributeOverride(name="value", column=@Column(name="nomU_value")),
	})
	private Voltage nomU;
	/**
	 * The normal number of sections switched in.
	 */
	@Column(name="normalSections", nullable = true)
	private Integer normalSections;
	/**
	 * The type of phase connection, such as wye or delta.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "phaseConnection")
	private PhaseShuntConnectionKind phaseConnection;
	/**
	 * Shunt compensator sections in use.Starting value for steady state solution. 
	 * Non integer values are allowed to support continuous variables. The reasons 
	 * for continuous value are to support study cases where no discrete shunt 
	 * compensators has yet been designed, a solutions where a narrow voltage 
	 * band force the sections to oscillate or accommodate for a continuous solution 
	 * as input.
	 */
	@Column(name="sections", nullable = true)
	private Float sections;
	/**
	 * The switch on count since the capacitor count was last reset or initialized.
	 */
	@Column(name="switchOnCount", nullable = true)
	private Integer switchOnCount;
	/**
	 * The date and time when the capacitor bank was last switched on.
	 */
	@Column(name="switchOnDate", nullable = true)
	private Date switchOnDate;
	/**
	 * Voltage sensitivity required for the device to regulate the bus voltage, 
	 * in voltage/reactive power.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="denominatorMultiplier", column=@Column(name="voltageSensitivity_denominatorMultiplier")),
		@AttributeOverride(name="denominatorUnit", column=@Column(name="voltageSensitivity_denominatorUnit")),
		@AttributeOverride(name="multiplier", column=@Column(name="voltageSensitivity_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="voltageSensitivity_unit")),
		@AttributeOverride(name="value", column=@Column(name="voltageSensitivity_value")),
	})
	private VoltagePerReactivePower voltageSensitivity;

	/**
	 * The shunt compensator for which the state applies.
	 */
	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "svshuntcompensatorsections_mrid")
	@JoinColumn(name = "svshuntcompensatorsections_projectid")
	@JoinColumn(name = "svshuntcompensatorsections_synthesizedschemenumber")
	@JoinColumn(name = "svshuntcompensatorsections_schemascenarionumber")
	private SvShuntCompensatorSections SvShuntCompensatorSections;
	/**
	 * Shunt compensator of this shunt compensator phase.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "ShuntCompensator")
	private List<ShuntCompensatorPhase> ShuntCompensatorPhase;

	public Seconds getAVRDelay(){
		return this.aVRDelay;
	}

	@FieldSetter(fieldName = "ShuntCompensator.aVRDelay", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setAVRDelay(Seconds aVRDelay){
		this.aVRDelay = aVRDelay;
	}

	public Boolean getGrounded(){
		return this.grounded;
	}

	@FieldSetter(fieldName = "ShuntCompensator.grounded", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setGrounded(Boolean grounded){
		this.grounded = grounded;
	}

	public Integer getMaximumSections(){
		return this.maximumSections;
	}

	@FieldSetter(fieldName = "ShuntCompensator.maximumSections", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setMaximumSections(Integer maximumSections){
		this.maximumSections = maximumSections;
	}

	public Voltage getNomU(){
		return this.nomU;
	}

	@FieldSetter(fieldName = "ShuntCompensator.nomU", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setNomU(Voltage nomU){
		this.nomU = nomU;
	}

	public Integer getNormalSections(){
		return this.normalSections;
	}

	@FieldSetter(fieldName = "ShuntCompensator.normalSections", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setNormalSections(Integer normalSections){
		this.normalSections = normalSections;
	}

	public PhaseShuntConnectionKind getPhaseConnection(){
		return this.phaseConnection;
	}

	@FieldSetter(fieldName = "ShuntCompensator.phaseConnection", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setPhaseConnection(PhaseShuntConnectionKind phaseConnection){
		this.phaseConnection = phaseConnection;
	}

	public Float getSections(){
		return this.sections;
	}

	@FieldSetter(fieldName = "ShuntCompensator.sections", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setSections(Float sections){
		this.sections = sections;
	}

	public Integer getSwitchOnCount(){
		return this.switchOnCount;
	}

	@FieldSetter(fieldName = "ShuntCompensator.switchOnCount", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setSwitchOnCount(Integer switchOnCount){
		this.switchOnCount = switchOnCount;
	}

	public Date getSwitchOnDate(){
		return this.switchOnDate;
	}

	@FieldSetter(fieldName = "ShuntCompensator.switchOnDate", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setSwitchOnDate(Date switchOnDate){
		this.switchOnDate = switchOnDate;
	}

	public VoltagePerReactivePower getVoltageSensitivity(){
		return this.voltageSensitivity;
	}

	@FieldSetter(fieldName = "ShuntCompensator.voltageSensitivity", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setVoltageSensitivity(VoltagePerReactivePower voltageSensitivity){
		this.voltageSensitivity = voltageSensitivity;
	}

	public SvShuntCompensatorSections getSvShuntCompensatorSections(){
		return this.SvShuntCompensatorSections;
	}

	@AssociationSetter(fieldName = "ShuntCompensator.SvShuntCompensatorSections", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.StateVariables.SvShuntCompensatorSections", cardinality = "one")
	public void setSvShuntCompensatorSections(SvShuntCompensatorSections SvShuntCompensatorSections){
		this.SvShuntCompensatorSections = SvShuntCompensatorSections;
	}

	@JsonIgnore
	public List<ShuntCompensatorPhase> getShuntCompensatorPhase(){
		return this.ShuntCompensatorPhase;
	}

	@AssociationSetter(fieldName = "ShuntCompensator.ShuntCompensatorPhase", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Wires.ShuntCompensatorPhase", cardinality = "many")
	public void setShuntCompensatorPhase(List<ShuntCompensatorPhase> ShuntCompensatorPhase){
		this.ShuntCompensatorPhase = ShuntCompensatorPhase;
	}

	public ShuntCompensator(){

	}

}
