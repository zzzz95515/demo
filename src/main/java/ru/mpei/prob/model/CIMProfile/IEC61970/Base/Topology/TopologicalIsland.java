package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Topology;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.ConductingEquipment;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.IdentifiedObject;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * An electrically connected subset of the network. Topological islands can 
 * change as the current network state changes: e.g. due to - disconnect switches 
 * or breakers change state in a SCADA/EMS- manual creation, change or deletion 
 * of topological nodes in a planning tool.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:54 MSK 2020
 */

@Entity
@Table(name = "topologicalisland")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class TopologicalIsland extends IdentifiedObject {
	/**
	 * Количесвто ветвей для схемы замещения НП.Учитывается при составлении электрических 
	 * матриц для расчета КЗ с участием земли.
	 */
	@Column(name="groundSchemeBranchesNumber", nullable = true)
	private Integer groundSchemeBranchesNumber;
	/**
	 * Количество внутренних узлов оборудования в топологическом острове (например, 
	 * нейтральная точка обмоток ТР). Атрибут необходим при создании расчетных 
	 * электрических схем
	 */
	@Column(name="internalNodesNumber", nullable = true)
	private Integer internalNodesNumber;
	/**
	 * Количество ветвей для расчета нормального режима. Ветви нагрузки и генерации 
	 * не учитываются.
	 */
	@Column(name="normalSchemeBranchesNumber", nullable = true)
	private Integer normalSchemeBranchesNumber;
	/**
	 * Количесвто ветвей для схемы замещения ПП.Учитывается при составлении электрических 
	 * матриц для расчета КЗ.
	 */
	@Column(name="posSeqSchemeBranchesNumber", nullable = true)
	private Integer posSeqSchemeBranchesNumber;

	/**
	 * Все оборудование, которое участвует в расчете режимов
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "TopologicalIsland")
	private List<ConductingEquipment> TopologicalEquipments;
	/**
	 * Оборудование, имеющее внутренний узел
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "TopologicalIslandHavingInrernalNodes")
	private List<ConductingEquipment> InternalNodesEquipments;
	/**
	 * The island for which the node is an angle reference.   Normally there is 
	 * one angle reference node for each island.
	 */
	@OneToOne(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "AngleRefTopologicalIsland")
	private TopologicalNode AngleRefTopologicalNode;
	/**
	 * A topological node belongs to a topological island.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "TopologicalIsland")
	private List<TopologicalNode> TopologicalNodes;

	public Integer getGroundSchemeBranchesNumber(){
		return this.groundSchemeBranchesNumber;
	}

	@FieldSetter(fieldName = "TopologicalIsland.groundSchemeBranchesNumber", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setGroundSchemeBranchesNumber(Integer groundSchemeBranchesNumber){
		this.groundSchemeBranchesNumber = groundSchemeBranchesNumber;
	}

	public Integer getInternalNodesNumber(){
		return this.internalNodesNumber;
	}

	@FieldSetter(fieldName = "TopologicalIsland.internalNodesNumber", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setInternalNodesNumber(Integer internalNodesNumber){
		this.internalNodesNumber = internalNodesNumber;
	}

	public Integer getNormalSchemeBranchesNumber(){
		return this.normalSchemeBranchesNumber;
	}

	@FieldSetter(fieldName = "TopologicalIsland.normalSchemeBranchesNumber", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setNormalSchemeBranchesNumber(Integer normalSchemeBranchesNumber){
		this.normalSchemeBranchesNumber = normalSchemeBranchesNumber;
	}

	public Integer getPosSeqSchemeBranchesNumber(){
		return this.posSeqSchemeBranchesNumber;
	}

	@FieldSetter(fieldName = "TopologicalIsland.posSeqSchemeBranchesNumber", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setPosSeqSchemeBranchesNumber(Integer posSeqSchemeBranchesNumber){
		this.posSeqSchemeBranchesNumber = posSeqSchemeBranchesNumber;
	}

	@JsonIgnore
	public List<ConductingEquipment> getTopologicalEquipments(){
		return this.TopologicalEquipments;
	}

	@AssociationSetter(fieldName = "TopologicalIsland.TopologicalEquipments", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.ConductingEquipment", cardinality = "many")
	public void setTopologicalEquipments(List<ConductingEquipment> TopologicalEquipments){
		this.TopologicalEquipments = TopologicalEquipments;
	}

	@JsonIgnore
	public List<ConductingEquipment> getInternalNodesEquipments(){
		return this.InternalNodesEquipments;
	}

	@AssociationSetter(fieldName = "TopologicalIsland.InternalNodesEquipments", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.ConductingEquipment", cardinality = "many")
	public void setInternalNodesEquipments(List<ConductingEquipment> InternalNodesEquipments){
		this.InternalNodesEquipments = InternalNodesEquipments;
	}

	@JsonIgnore
	public TopologicalNode getAngleRefTopologicalNode(){
		return this.AngleRefTopologicalNode;
	}

	@AssociationSetter(fieldName = "TopologicalIsland.AngleRefTopologicalNode", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Topology.TopologicalNode", cardinality = "one")
	public void setAngleRefTopologicalNode(TopologicalNode AngleRefTopologicalNode){
		this.AngleRefTopologicalNode = AngleRefTopologicalNode;
	}

	@JsonIgnore
	public List<TopologicalNode> getTopologicalNodes(){
		return this.TopologicalNodes;
	}

	@AssociationSetter(fieldName = "TopologicalIsland.TopologicalNodes", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Topology.TopologicalNode", cardinality = "many")
	public void setTopologicalNodes(List<TopologicalNode> TopologicalNodes){
		this.TopologicalNodes = TopologicalNodes;
	}

	public TopologicalIsland(){

	}

}
