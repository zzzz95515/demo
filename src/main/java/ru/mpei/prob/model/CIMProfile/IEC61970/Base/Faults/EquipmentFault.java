package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Faults;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.Terminal;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.AngleDegrees;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.CurrentFlow;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.StateVariables.SvPowerFlow;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.StateVariables.SvVoltage;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * A fault applied at the terminal, external to the equipment. This class 
 * is not used to specify faults internal to the equipment.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:51 MSK 2020
 */

@Entity
@Table(name = "equipmentfault")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class EquipmentFault extends Fault {
	/**
	 * Значение угла тока, являющееся результатом расчета SCM
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="currentAngle_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="currentAngle_unit")),
		@AttributeOverride(name="value", column=@Column(name="currentAngle_value")),
	})
	private AngleDegrees currentAngle;
	/**
	 * Значение тока, являющееся результатом расчета SCM
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="currentValue_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="currentValue_unit")),
		@AttributeOverride(name="value", column=@Column(name="currentValue_value")),
	})
	private CurrentFlow currentValue;
	/**
	 * Значение угла тока, являющееся результатом расчета Rastr
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="rastrCurrentAngle_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="rastrCurrentAngle_unit")),
		@AttributeOverride(name="value", column=@Column(name="rastrCurrentAngle_value")),
	})
	private AngleDegrees rastrCurrentAngle;
	/**
	 * Значение тока, являющееся результатом расчета Rastr
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="rastrCurrentValue_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="rastrCurrentValue_unit")),
		@AttributeOverride(name="value", column=@Column(name="rastrCurrentValue_value")),
	})
	private CurrentFlow rastrCurrentValue;

	/**
	 * The equipment faults at this terminal.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "terminal_mrid")
	@JoinColumn(name = "terminal_projectid")
	@JoinColumn(name = "terminal_synthesizedschemenumber")
	@JoinColumn(name = "terminal_schemascenarionumber")
	private Terminal Terminal;
	/**
	 * Значения мощностей и токов, рассчитанные для данного повреждения
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "EquipmentFault")
	private List<SvPowerFlow> SvPowerFlows;
	/**
	 * Напряжения, которые были рассчитаны для данного повреждения
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "EquipmentFault")
	private List<SvVoltage> SvVoltages;

	public AngleDegrees getCurrentAngle(){
		return this.currentAngle;
	}

	@FieldSetter(fieldName = "EquipmentFault.currentAngle", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrentAngle(AngleDegrees currentAngle){
		this.currentAngle = currentAngle;
	}

	public CurrentFlow getCurrentValue(){
		return this.currentValue;
	}

	@FieldSetter(fieldName = "EquipmentFault.currentValue", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrentValue(CurrentFlow currentValue){
		this.currentValue = currentValue;
	}

	public AngleDegrees getRastrCurrentAngle(){
		return this.rastrCurrentAngle;
	}

	@FieldSetter(fieldName = "EquipmentFault.rastrCurrentAngle", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setRastrCurrentAngle(AngleDegrees rastrCurrentAngle){
		this.rastrCurrentAngle = rastrCurrentAngle;
	}

	public CurrentFlow getRastrCurrentValue(){
		return this.rastrCurrentValue;
	}

	@FieldSetter(fieldName = "EquipmentFault.rastrCurrentValue", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setRastrCurrentValue(CurrentFlow rastrCurrentValue){
		this.rastrCurrentValue = rastrCurrentValue;
	}

	public Terminal getTerminal(){
		return this.Terminal;
	}

	@AssociationSetter(fieldName = "EquipmentFault.Terminal", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.Terminal", cardinality = "one")
	public void setTerminal(Terminal Terminal){
		this.Terminal = Terminal;
	}

	@JsonIgnore
	public List<SvPowerFlow> getSvPowerFlows(){
		return this.SvPowerFlows;
	}

	@AssociationSetter(fieldName = "EquipmentFault.SvPowerFlows", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.StateVariables.SvPowerFlow", cardinality = "many")
	public void setSvPowerFlows(List<SvPowerFlow> SvPowerFlows){
		this.SvPowerFlows = SvPowerFlows;
	}

	@JsonIgnore
	public List<SvVoltage> getSvVoltages(){
		return this.SvVoltages;
	}

	@AssociationSetter(fieldName = "EquipmentFault.SvVoltages", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.StateVariables.SvVoltage", cardinality = "many")
	public void setSvVoltages(List<SvVoltage> SvVoltages){
		this.SvVoltages = SvVoltages;
	}

	public EquipmentFault(){

	}

}
