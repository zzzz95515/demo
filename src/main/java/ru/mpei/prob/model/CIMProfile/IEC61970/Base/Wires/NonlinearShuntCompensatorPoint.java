package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.IdentifiedObject;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Conductance;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Susceptance;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * A non linear shunt compensator bank or section admittance value.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:55 MSK 2020
 */

@Entity
@Table(name = "nonlinearshuntcompensatorpoint")
@JsonInclude(JsonInclude.Include.NON_NULL)
// surrogate inheritance
public class NonlinearShuntCompensatorPoint extends IdentifiedObject{
	/**
	 * Positive sequence shunt (charging) susceptance per section
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="b_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="b_unit")),
		@AttributeOverride(name="value", column=@Column(name="b_value")),
	})
	private Susceptance b;
	/**
	 * Zero sequence shunt (charging) susceptance per section
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="b0_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="b0_unit")),
		@AttributeOverride(name="value", column=@Column(name="b0_value")),
	})
	private Susceptance b0;
	/**
	 * Positive sequence shunt (charging) conductance per section
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="g_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="g_unit")),
		@AttributeOverride(name="value", column=@Column(name="g_value")),
	})
	private Conductance g;
	/**
	 * Zero sequence shunt (charging) conductance per section
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="g0_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="g0_unit")),
		@AttributeOverride(name="value", column=@Column(name="g0_value")),
	})
	private Conductance g0;
	/**
	 * The number of the section.
	 */
	@Column(name="sectionNumber", nullable = true)
	private Integer sectionNumber;

	/**
	 * All points of the non-linear shunt compensator.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "nonlinearshuntcompensator_mrid")
	@JoinColumn(name = "nonlinearshuntcompensator_projectid")
	@JoinColumn(name = "nonlinearshuntcompensator_synthesizedschemenumber")
	@JoinColumn(name = "nonlinearshuntcompensator_schemascenarionumber")
	private NonlinearShuntCompensator NonlinearShuntCompensator;

	public Susceptance getB(){
		return this.b;
	}

	@FieldSetter(fieldName = "NonlinearShuntCompensatorPoint.b", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setB(Susceptance b){
		this.b = b;
	}

	public Susceptance getB0(){
		return this.b0;
	}

	@FieldSetter(fieldName = "NonlinearShuntCompensatorPoint.b0", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setB0(Susceptance b0){
		this.b0 = b0;
	}

	public Conductance getG(){
		return this.g;
	}

	@FieldSetter(fieldName = "NonlinearShuntCompensatorPoint.g", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setG(Conductance g){
		this.g = g;
	}

	public Conductance getG0(){
		return this.g0;
	}

	@FieldSetter(fieldName = "NonlinearShuntCompensatorPoint.g0", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setG0(Conductance g0){
		this.g0 = g0;
	}

	public Integer getSectionNumber(){
		return this.sectionNumber;
	}

	@FieldSetter(fieldName = "NonlinearShuntCompensatorPoint.sectionNumber", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setSectionNumber(Integer sectionNumber){
		this.sectionNumber = sectionNumber;
	}

	public NonlinearShuntCompensator getNonlinearShuntCompensator(){
		return this.NonlinearShuntCompensator;
	}

	@AssociationSetter(fieldName = "NonlinearShuntCompensatorPoint.NonlinearShuntCompensator", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Wires.NonlinearShuntCompensator", cardinality = "one")
	public void setNonlinearShuntCompensator(NonlinearShuntCompensator NonlinearShuntCompensator){
		this.NonlinearShuntCompensator = NonlinearShuntCompensator;
	}

	public NonlinearShuntCompensatorPoint(){

	}

}
