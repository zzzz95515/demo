package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.ConductingEquipment;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.CurrentFlow;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Voltage;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.Date;

/**
 * A generic device designed to close, or open, or both, one or more electric 
 * circuits.  All switches are two terminal devices including grounding switches.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:56 MSK 2020
 */

@Entity
@Table(name = "switch")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Switch extends ConductingEquipment {
	/**
	 * The attribute is used in cases when no Measurement for the status value 
	 * is present. If the Switch has a status measurement the Discrete.normalValue 
	 * is expected to match with the Switch.normalOpen.
	 */
	@Column(name="normalOpen", nullable = true)
	private Boolean normalOpen;
	/**
	 * The attribute tells if the switch is considered open when used as input 
	 * to topology processing.
	 */
	@Column(name="open", nullable = true)
	private Boolean open;
	/**
	 * The maximum continuous current carrying capacity in amps governed by the 
	 * device material and construction.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedCurrent_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedCurrent_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedCurrent_value")),
	})
	private CurrentFlow ratedCurrent;
	/**
	 * Номинальное напряжение выключателя
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedVoltage_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedVoltage_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedVoltage_value")),
	})
	private Voltage ratedVoltage;
	/**
	 * Branch is retained in a bus branch model.  The flow through retained switches 
	 * will normally be calculated in power flow.
	 */
	@Column(name="retained", nullable = true)
	private Boolean retained;
	/**
	 * The switch on count since the switch was last reset or initialized.
	 */
	@Column(name="switchOnCount", nullable = true)
	private Integer switchOnCount;
	/**
	 * The date and time when the switch was last switched on.
	 */
	@Column(name="switchOnDate", nullable = true)
	private Date switchOnDate;


	public Boolean getNormalOpen(){
		return this.normalOpen;
	}

	@FieldSetter(fieldName = "Switch.normalOpen", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setNormalOpen(Boolean normalOpen){
		this.normalOpen = normalOpen;
	}

	public Boolean getOpen(){
		return this.open;
	}

	@FieldSetter(fieldName = "Switch.open", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setOpen(Boolean open){
		this.open = open;
	}

	public CurrentFlow getRatedCurrent(){
		return this.ratedCurrent;
	}

	@FieldSetter(fieldName = "Switch.ratedCurrent", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setRatedCurrent(CurrentFlow ratedCurrent){
		this.ratedCurrent = ratedCurrent;
	}

	public Voltage getRatedVoltage(){
		return this.ratedVoltage;
	}

	@FieldSetter(fieldName = "Switch.ratedVoltage", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setRatedVoltage(Voltage ratedVoltage){
		this.ratedVoltage = ratedVoltage;
	}

	public Boolean getRetained(){
		return this.retained;
	}

	@FieldSetter(fieldName = "Switch.retained", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setRetained(Boolean retained){
		this.retained = retained;
	}

	public Integer getSwitchOnCount(){
		return this.switchOnCount;
	}

	@FieldSetter(fieldName = "Switch.switchOnCount", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setSwitchOnCount(Integer switchOnCount){
		this.switchOnCount = switchOnCount;
	}

	public Date getSwitchOnDate(){
		return this.switchOnDate;
	}

	@FieldSetter(fieldName = "Switch.switchOnDate", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setSwitchOnDate(Date switchOnDate){
		this.switchOnDate = switchOnDate;
	}

	public Switch(){

	}

}
