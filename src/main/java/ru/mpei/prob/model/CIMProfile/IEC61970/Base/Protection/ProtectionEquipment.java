package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Protection;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.AuxiliaryEquipment.CurrentTransformer;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.AuxiliaryEquipment.PotentialTransformer;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.ConductingEquipment;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.ConnectivityNode;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.Equipment;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.Terminal;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.CurrentFlow;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Seconds;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.UnitMultiplier;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.UnitSymbol;
import ru.mpei.prob.model.CIMProfile.NTI.Phases.CurrentPhases;
import ru.mpei.prob.model.CIMProfile.NTI.Phases.ShortCircuitPhasesOfCurrents;
import ru.mpei.prob.model.CIMProfile.NTI.Phases.VoltagePhases;
import ru.mpei.prob.model.CIMProfile.NTI.ProtectionEquipmentsVendor;
import ru.mpei.prob.model.CIMProfile.NTI.ProtectionLibrary;
import ru.mpei.prob.model.CIMProfile.NTI.ProtectionType;
import ru.mpei.prob.model.CIMProfile.NTI.Sequences.ShortCircuitSequencesOfCurrents;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * An electrical device designed to respond to input conditions in a prescribed 
 * manner and after specified conditions are met to cause contact operation 
 * or similar abrupt change in associated electric control circuits, or simply 
 * to display the detected condition. Protection equipment are associated 
 * with conducting equipment and usually operate circuit breakers.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:54 MSK 2020
 */

@Entity
@Table(name = "protectionequipment")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ProtectionEquipment extends Equipment {
	/**
	 * Номер группы уставок
	 */
	@Column(name="groupNumber", nullable = true)
	private Integer groupNumber;

	@FieldSetter(fieldName = "ProtectionEquipment.groupNumber", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setGroupNumber(Integer groupNumber){
		this.groupNumber = groupNumber;
	}

	/**
	 * Номер сценария нормального режима для отстройки
	 */
	@Column(name="normalScenario", nullable = true)
	private Integer normalScenario;

	public Integer getNormalScenario(){
		return this.normalScenario;
	}
	@FieldSetter(fieldName = "ProtectionEquipment.normalScenario", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setNormalScenario(Integer sendingSequence){
		this.normalScenario = normalScenario;
	}

	@ElementCollection
	private List<String> objectsListForSensitivityKoef3;

	public List<String> getObjectsListForSensitivityKoef3() {
		return objectsListForSensitivityKoef3;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.objectsListForSensitivityKoef3", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setObjectsListForSensitivityKoef3(List<String> objectsListForSensitivityKoef3) {
		this.objectsListForSensitivityKoef3 = objectsListForSensitivityKoef3;
	}

	@Column(name="isOuterProtection", nullable = true)
	private Boolean isOuterProtection;

	public Boolean getIsOuterProtection(){
		return this.isOuterProtection;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.isOuterProtection", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setIsOuterProtection(Boolean isOuterProtection){
		this.isOuterProtection = isOuterProtection;
	}

	/**
	 * Номер последовательности отправки уставок защиты
	 */
	@Column(name="sendingSequence", nullable = true)
	private Integer sendingSequence;

	public Integer getSendingSequence(){
		return this.sendingSequence;
	}
	@FieldSetter(fieldName = "ProtectionEquipment.sendingSequence", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setSendingSequence(Integer sendingSequence){
		this.sendingSequence = sendingSequence;
	}
	/**
	 * Номер последовательности расчета защиты
	 */
	@Column(name="сalculationSequence", nullable = true)
	private Integer сalculationSequence;

	public Integer getСalculationSequence(){
		return this.сalculationSequence;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.сalculationSequence", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setСalculationSequence(Integer сalculationSequence){
		this.сalculationSequence = сalculationSequence;
	}

	@Column(name="isForArcSC", nullable = true)
	private Boolean isForArcSC;

	public Boolean getIsForArcSC(){
		return this.isForArcSC;
	}

	@FieldSetter(fieldName = "IdentifiedObject.isForArcSC", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setIsForArcSC(Boolean isForArcSC){
		this.isForArcSC = isForArcSC;
	}
	/**
	 * Список минимальных токов однофазного КЗ в конце каждой смежной линии 
	 */
	@ElementCollection
	private List<CurrentFlow> aCLineSegmentForkOneScCurrentMin;
	/**
	 * Список минимальных токов двухфазного КЗ в конце каждой смежной линии 
	 */
	@ElementCollection
	private List<CurrentFlow> aCLineSegmentForkTwoScCurrentMin;
	/**
	 * The maximum allowable value.
	 */
	@Column(name="highLimit", nullable = true)
	private Float highLimit;
	/**
	 * Максимальное значение коэффициента токораспределения для защит от однофазных 
	 * КЗ, при котором произведение Icз смежной защиты ЛИНИИ и этого коэффициента 
	 * будет максимальным
	 */
	@Column(name="koefOfcurrentDistributionForOnePhaseSCLine", nullable = true)
	private Float koefOfcurrentDistributionForOnePhaseSCLine;
	/**
	 * Значение коэффициента токораспределения для защит от двухфазных КЗ, при 
	 * котором произведение Icз  смежной защиты ЛИНИИ и этого коэффициента будет 
	 * максимальным
	 */
	@Column(name="koefOfcurrentDistributionForTwoPhaseSCLine", nullable = true)
	private Float koefOfcurrentDistributionForTwoPhaseSCLine;
	/**
	 * Значение коэффициента токораспределения для защит от двухфазных КЗ, при 
	 * котором произведение Icз  смежной защиты ТРАНСФОРМАТОРА и этого коэффициента 
	 * будет максимальным
	 */
	@Column(name="KoefOfcurrentDistributionForTwoPhaseSCTransformer", nullable = true)
	private Float KoefOfcurrentDistributionForTwoPhaseSCTransformer;
	/**
	 * The minimum allowable value.
	 */
	@Column(name="lowLimit", nullable = true)
	private Float lowLimit;
	/**
	 * Значение максимального нагрузочного тока
	 */
	@Embedded
	@AttributeOverrides({
		@AttributeOverride(name="a.multiplier", column=@Column(name="maxLoadFlowCurrentamultiplier")),
		@AttributeOverride(name="a.unit", column=@Column(name="maxLoadFlowCurrentaunit")),
		@AttributeOverride(name="a.value", column=@Column(name="maxLoadFlowCurrentavalue")),
		@AttributeOverride(name="angleA.multiplier", column=@Column(name="maxLoadFlowCurrentangleAmultiplier")),
		@AttributeOverride(name="angleA.unit", column=@Column(name="maxLoadFlowCurrentangleAunit")),
		@AttributeOverride(name="angleA.value", column=@Column(name="maxLoadFlowCurrentangleAvalue")),
		@AttributeOverride(name="angleB.multiplier", column=@Column(name="maxLoadFlowCurrentangleBmultiplier")),
		@AttributeOverride(name="angleB.unit", column=@Column(name="maxLoadFlowCurrentangleBunit")),
		@AttributeOverride(name="angleB.value", column=@Column(name="maxLoadFlowCurrentangleBvalue")),
		@AttributeOverride(name="angleC.multiplier", column=@Column(name="maxLoadFlowCurrentangleCmultiplier")),
		@AttributeOverride(name="angleC.unit", column=@Column(name="maxLoadFlowCurrentangleCunit")),
		@AttributeOverride(name="angleC.value", column=@Column(name="maxLoadFlowCurrentangleCvalue")),
		@AttributeOverride(name="b.multiplier", column=@Column(name="maxLoadFlowCurrentbmultiplier")),
		@AttributeOverride(name="b.unit", column=@Column(name="maxLoadFlowCurrentbunit")),
		@AttributeOverride(name="b.value", column=@Column(name="maxLoadFlowCurrentbvalue")),
		@AttributeOverride(name="c.multiplier", column=@Column(name="maxLoadFlowCurrentcmultiplier")),
		@AttributeOverride(name="c.unit", column=@Column(name="maxLoadFlowCurrentcunit")),
		@AttributeOverride(name="c.value", column=@Column(name="maxLoadFlowCurrentcvalue"))
	})
	private CurrentPhases maxLoadFlowCurrent;
	/**
	 * Максимальный ток трехфазного КЗ в начале защищаемой линии для проверки 
	 * чувствительности
	 */
	@Embedded
	@AttributeOverrides({
		@AttributeOverride(name="p1.a.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1amultiplier")),
		@AttributeOverride(name="p1.a.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1aunit")),
		@AttributeOverride(name="p1.a.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1avalue")),
		@AttributeOverride(name="p1.angleA.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1angleAmultiplier")),
		@AttributeOverride(name="p1.angleA.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1angleAunit")),
		@AttributeOverride(name="p1.angleA.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1angleAvalue")),
		@AttributeOverride(name="p1.angleB.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1angleBmultiplier")),
		@AttributeOverride(name="p1.angleB.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1angleBunit")),
		@AttributeOverride(name="p1.angleB.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1angleBvalue")),
		@AttributeOverride(name="p1.angleC.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1angleCmultiplier")),
		@AttributeOverride(name="p1.angleC.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1angleCunit")),
		@AttributeOverride(name="p1.angleC.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1angleCvalue")),
		@AttributeOverride(name="p1.b.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1bmultiplier")),
		@AttributeOverride(name="p1.b.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1bunit")),
		@AttributeOverride(name="p1.b.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1bvalue")),
		@AttributeOverride(name="p1.c.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1cmultiplier")),
		@AttributeOverride(name="p1.c.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1cunit")),
		@AttributeOverride(name="p1.c.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1cvalue")),
		@AttributeOverride(name="p1_1.a.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1_1amultiplier")),
		@AttributeOverride(name="p1_1.a.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1_1aunit")),
		@AttributeOverride(name="p1_1.a.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1_1avalue")),
		@AttributeOverride(name="p1_1.angleA.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1_1angleAmultiplier")),
		@AttributeOverride(name="p1_1.angleA.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1_1angleAunit")),
		@AttributeOverride(name="p1_1.angleA.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1_1angleAvalue")),
		@AttributeOverride(name="p1_1.angleB.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1_1angleBmultiplier")),
		@AttributeOverride(name="p1_1.angleB.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1_1angleBunit")),
		@AttributeOverride(name="p1_1.angleB.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1_1angleBvalue")),
		@AttributeOverride(name="p1_1.angleC.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1_1angleCmultiplier")),
		@AttributeOverride(name="p1_1.angleC.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1_1angleCunit")),
		@AttributeOverride(name="p1_1.angleC.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1_1angleCvalue")),
		@AttributeOverride(name="p1_1.b.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1_1bmultiplier")),
		@AttributeOverride(name="p1_1.b.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1_1bunit")),
		@AttributeOverride(name="p1_1.b.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1_1bvalue")),
		@AttributeOverride(name="p1_1.c.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1_1cmultiplier")),
		@AttributeOverride(name="p1_1.c.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1_1cunit")),
		@AttributeOverride(name="p1_1.c.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp1_1cvalue")),
		@AttributeOverride(name="p2.a.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp2amultiplier")),
		@AttributeOverride(name="p2.a.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp2aunit")),
		@AttributeOverride(name="p2.a.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp2avalue")),
		@AttributeOverride(name="p2.angleA.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp2angleAmultiplier")),
		@AttributeOverride(name="p2.angleA.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp2angleAunit")),
		@AttributeOverride(name="p2.angleA.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp2angleAvalue")),
		@AttributeOverride(name="p2.angleB.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp2angleBmultiplier")),
		@AttributeOverride(name="p2.angleB.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp2angleBunit")),
		@AttributeOverride(name="p2.angleB.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp2angleBvalue")),
		@AttributeOverride(name="p2.angleC.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp2angleCmultiplier")),
		@AttributeOverride(name="p2.angleC.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp2angleCunit")),
		@AttributeOverride(name="p2.angleC.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp2angleCvalue")),
		@AttributeOverride(name="p2.b.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp2bmultiplier")),
		@AttributeOverride(name="p2.b.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp2bunit")),
		@AttributeOverride(name="p2.b.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp2bvalue")),
		@AttributeOverride(name="p2.c.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp2cmultiplier")),
		@AttributeOverride(name="p2.c.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp2cunit")),
		@AttributeOverride(name="p2.c.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp2cvalue")),
		@AttributeOverride(name="p3.a.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp3amultiplier")),
		@AttributeOverride(name="p3.a.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp3aunit")),
		@AttributeOverride(name="p3.a.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp3avalue")),
		@AttributeOverride(name="p3.angleA.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp3angleAmultiplier")),
		@AttributeOverride(name="p3.angleA.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp3angleAunit")),
		@AttributeOverride(name="p3.angleA.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp3angleAvalue")),
		@AttributeOverride(name="p3.angleB.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp3angleBmultiplier")),
		@AttributeOverride(name="p3.angleB.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp3angleBunit")),
		@AttributeOverride(name="p3.angleB.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp3angleBvalue")),
		@AttributeOverride(name="p3.angleC.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp3angleCmultiplier")),
		@AttributeOverride(name="p3.angleC.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp3angleCunit")),
		@AttributeOverride(name="p3.angleC.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp3angleCvalue")),
		@AttributeOverride(name="p3.b.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp3bmultiplier")),
		@AttributeOverride(name="p3.b.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp3bunit")),
		@AttributeOverride(name="p3.b.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp3bvalue")),
		@AttributeOverride(name="p3.c.multiplier", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp3cmultiplier")),
		@AttributeOverride(name="p3.c.unit", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp3cunit")),
		@AttributeOverride(name="p3.c.value", column=@Column(name="maxSCCurrentPhaseInMainAreaForSensitivityp3cvalue"))
	})
	private ShortCircuitPhasesOfCurrents maxSCCurrentPhaseInMainAreaForSensitivity;
	/**
	 * Максимальные значения фаз токов при разных типах КЗ в конце защищаемого 
	 * участка
	 */
	@Embedded
	@AttributeOverrides({
		@AttributeOverride(name="p1.a.multiplier", column=@Column(name="maxScPhInMainAreap1amultiplier")),
		@AttributeOverride(name="p1.a.unit", column=@Column(name="maxScPhInMainAreap1aunit")),
		@AttributeOverride(name="p1.a.value", column=@Column(name="maxScPhInMainAreap1avalue")),
		@AttributeOverride(name="p1.angleA.multiplier", column=@Column(name="maxScPhInMainAreap1angleAmultiplier")),
		@AttributeOverride(name="p1.angleA.unit", column=@Column(name="maxScPhInMainAreap1angleAunit")),
		@AttributeOverride(name="p1.angleA.value", column=@Column(name="maxScPhInMainAreap1angleAvalue")),
		@AttributeOverride(name="p1.angleB.multiplier", column=@Column(name="maxScPhInMainAreap1angleBmultiplier")),
		@AttributeOverride(name="p1.angleB.unit", column=@Column(name="maxScPhInMainAreap1angleBunit")),
		@AttributeOverride(name="p1.angleB.value", column=@Column(name="maxScPhInMainAreap1angleBvalue")),
		@AttributeOverride(name="p1.angleC.multiplier", column=@Column(name="maxScPhInMainAreap1angleCmultiplier")),
		@AttributeOverride(name="p1.angleC.unit", column=@Column(name="maxScPhInMainAreap1angleCunit")),
		@AttributeOverride(name="p1.angleC.value", column=@Column(name="maxScPhInMainAreap1angleCvalue")),
		@AttributeOverride(name="p1.b.multiplier", column=@Column(name="maxScPhInMainAreap1bmultiplier")),
		@AttributeOverride(name="p1.b.unit", column=@Column(name="maxScPhInMainAreap1bunit")),
		@AttributeOverride(name="p1.b.value", column=@Column(name="maxScPhInMainAreap1bvalue")),
		@AttributeOverride(name="p1.c.multiplier", column=@Column(name="maxScPhInMainAreap1cmultiplier")),
		@AttributeOverride(name="p1.c.unit", column=@Column(name="maxScPhInMainAreap1cunit")),
		@AttributeOverride(name="p1.c.value", column=@Column(name="maxScPhInMainAreap1cvalue")),
		@AttributeOverride(name="p1_1.a.multiplier", column=@Column(name="maxScPhInMainAreap1_1amultiplier")),
		@AttributeOverride(name="p1_1.a.unit", column=@Column(name="maxScPhInMainAreap1_1aunit")),
		@AttributeOverride(name="p1_1.a.value", column=@Column(name="maxScPhInMainAreap1_1avalue")),
		@AttributeOverride(name="p1_1.angleA.multiplier", column=@Column(name="maxScPhInMainAreap1_1angleAmultiplier")),
		@AttributeOverride(name="p1_1.angleA.unit", column=@Column(name="maxScPhInMainAreap1_1angleAunit")),
		@AttributeOverride(name="p1_1.angleA.value", column=@Column(name="maxScPhInMainAreap1_1angleAvalue")),
		@AttributeOverride(name="p1_1.angleB.multiplier", column=@Column(name="maxScPhInMainAreap1_1angleBmultiplier")),
		@AttributeOverride(name="p1_1.angleB.unit", column=@Column(name="maxScPhInMainAreap1_1angleBunit")),
		@AttributeOverride(name="p1_1.angleB.value", column=@Column(name="maxScPhInMainAreap1_1angleBvalue")),
		@AttributeOverride(name="p1_1.angleC.multiplier", column=@Column(name="maxScPhInMainAreap1_1angleCmultiplier")),
		@AttributeOverride(name="p1_1.angleC.unit", column=@Column(name="maxScPhInMainAreap1_1angleCunit")),
		@AttributeOverride(name="p1_1.angleC.value", column=@Column(name="maxScPhInMainAreap1_1angleCvalue")),
		@AttributeOverride(name="p1_1.b.multiplier", column=@Column(name="maxScPhInMainAreap1_1bmultiplier")),
		@AttributeOverride(name="p1_1.b.unit", column=@Column(name="maxScPhInMainAreap1_1bunit")),
		@AttributeOverride(name="p1_1.b.value", column=@Column(name="maxScPhInMainAreap1_1bvalue")),
		@AttributeOverride(name="p1_1.c.multiplier", column=@Column(name="maxScPhInMainAreap1_1cmultiplier")),
		@AttributeOverride(name="p1_1.c.unit", column=@Column(name="maxScPhInMainAreap1_1cunit")),
		@AttributeOverride(name="p1_1.c.value", column=@Column(name="maxScPhInMainAreap1_1cvalue")),
		@AttributeOverride(name="p2.a.multiplier", column=@Column(name="maxScPhInMainAreap2amultiplier")),
		@AttributeOverride(name="p2.a.unit", column=@Column(name="maxScPhInMainAreap2aunit")),
		@AttributeOverride(name="p2.a.value", column=@Column(name="maxScPhInMainAreap2avalue")),
		@AttributeOverride(name="p2.angleA.multiplier", column=@Column(name="maxScPhInMainAreap2angleAmultiplier")),
		@AttributeOverride(name="p2.angleA.unit", column=@Column(name="maxScPhInMainAreap2angleAunit")),
		@AttributeOverride(name="p2.angleA.value", column=@Column(name="maxScPhInMainAreap2angleAvalue")),
		@AttributeOverride(name="p2.angleB.multiplier", column=@Column(name="maxScPhInMainAreap2angleBmultiplier")),
		@AttributeOverride(name="p2.angleB.unit", column=@Column(name="maxScPhInMainAreap2angleBunit")),
		@AttributeOverride(name="p2.angleB.value", column=@Column(name="maxScPhInMainAreap2angleBvalue")),
		@AttributeOverride(name="p2.angleC.multiplier", column=@Column(name="maxScPhInMainAreap2angleCmultiplier")),
		@AttributeOverride(name="p2.angleC.unit", column=@Column(name="maxScPhInMainAreap2angleCunit")),
		@AttributeOverride(name="p2.angleC.value", column=@Column(name="maxScPhInMainAreap2angleCvalue")),
		@AttributeOverride(name="p2.b.multiplier", column=@Column(name="maxScPhInMainAreap2bmultiplier")),
		@AttributeOverride(name="p2.b.unit", column=@Column(name="maxScPhInMainAreap2bunit")),
		@AttributeOverride(name="p2.b.value", column=@Column(name="maxScPhInMainAreap2bvalue")),
		@AttributeOverride(name="p2.c.multiplier", column=@Column(name="maxScPhInMainAreap2cmultiplier")),
		@AttributeOverride(name="p2.c.unit", column=@Column(name="maxScPhInMainAreap2cunit")),
		@AttributeOverride(name="p2.c.value", column=@Column(name="maxScPhInMainAreap2cvalue")),
		@AttributeOverride(name="p3.a.multiplier", column=@Column(name="maxScPhInMainAreap3amultiplier")),
		@AttributeOverride(name="p3.a.unit", column=@Column(name="maxScPhInMainAreap3aunit")),
		@AttributeOverride(name="p3.a.value", column=@Column(name="maxScPhInMainAreap3avalue")),
		@AttributeOverride(name="p3.angleA.multiplier", column=@Column(name="maxScPhInMainAreap3angleAmultiplier")),
		@AttributeOverride(name="p3.angleA.unit", column=@Column(name="maxScPhInMainAreap3angleAunit")),
		@AttributeOverride(name="p3.angleA.value", column=@Column(name="maxScPhInMainAreap3angleAvalue")),
		@AttributeOverride(name="p3.angleB.multiplier", column=@Column(name="maxScPhInMainAreap3angleBmultiplier")),
		@AttributeOverride(name="p3.angleB.unit", column=@Column(name="maxScPhInMainAreap3angleBunit")),
		@AttributeOverride(name="p3.angleB.value", column=@Column(name="maxScPhInMainAreap3angleBvalue")),
		@AttributeOverride(name="p3.angleC.multiplier", column=@Column(name="maxScPhInMainAreap3angleCmultiplier")),
		@AttributeOverride(name="p3.angleC.unit", column=@Column(name="maxScPhInMainAreap3angleCunit")),
		@AttributeOverride(name="p3.angleC.value", column=@Column(name="maxScPhInMainAreap3angleCvalue")),
		@AttributeOverride(name="p3.b.multiplier", column=@Column(name="maxScPhInMainAreap3bmultiplier")),
		@AttributeOverride(name="p3.b.unit", column=@Column(name="maxScPhInMainAreap3bunit")),
		@AttributeOverride(name="p3.b.value", column=@Column(name="maxScPhInMainAreap3bvalue")),
		@AttributeOverride(name="p3.c.multiplier", column=@Column(name="maxScPhInMainAreap3cmultiplier")),
		@AttributeOverride(name="p3.c.unit", column=@Column(name="maxScPhInMainAreap3cunit")),
		@AttributeOverride(name="p3.c.value", column=@Column(name="maxScPhInMainAreap3cvalue"))
	})
	private ShortCircuitPhasesOfCurrents maxScPhInMainArea;
	/**
	 * Максимальные значения последовательностей токов при разных типах КЗ в конце 
	 * защищаемого участка
	 */
	@Embedded
	@AttributeOverrides({
		@AttributeOverride(name="p1.angNeg.multiplier", column=@Column(name="maxScSeqInMainAreap1angNegmultiplier")),
		@AttributeOverride(name="p1.angNeg.unit", column=@Column(name="maxScSeqInMainAreap1angNegunit")),
		@AttributeOverride(name="p1.angNeg.value", column=@Column(name="maxScSeqInMainAreap1angNegvalue")),
		@AttributeOverride(name="p1.angPo.multiplier", column=@Column(name="maxScSeqInMainAreap1angPomultiplier")),
		@AttributeOverride(name="p1.angPo.unit", column=@Column(name="maxScSeqInMainAreap1angPounit")),
		@AttributeOverride(name="p1.angPo.value", column=@Column(name="maxScSeqInMainAreap1angPovalue")),
		@AttributeOverride(name="p1.angZero.multiplier", column=@Column(name="maxScSeqInMainAreap1angZeromultiplier")),
		@AttributeOverride(name="p1.angZero.unit", column=@Column(name="maxScSeqInMainAreap1angZerounit")),
		@AttributeOverride(name="p1.angZero.value", column=@Column(name="maxScSeqInMainAreap1angZerovalue")),
		@AttributeOverride(name="p1.neg.multiplier", column=@Column(name="maxScSeqInMainAreap1negmultiplier")),
		@AttributeOverride(name="p1.neg.unit", column=@Column(name="maxScSeqInMainAreap1negunit")),
		@AttributeOverride(name="p1.neg.value", column=@Column(name="maxScSeqInMainAreap1negvalue")),
		@AttributeOverride(name="p1.pos.multiplier", column=@Column(name="maxScSeqInMainAreap1posmultiplier")),
		@AttributeOverride(name="p1.pos.unit", column=@Column(name="maxScSeqInMainAreap1posunit")),
		@AttributeOverride(name="p1.pos.value", column=@Column(name="maxScSeqInMainAreap1posvalue")),
		@AttributeOverride(name="p1.zero.multiplier", column=@Column(name="maxScSeqInMainAreap1zeromultiplier")),
		@AttributeOverride(name="p1.zero.unit", column=@Column(name="maxScSeqInMainAreap1zerounit")),
		@AttributeOverride(name="p1.zero.value", column=@Column(name="maxScSeqInMainAreap1zerovalue")),
		@AttributeOverride(name="p1_1.angNeg.multiplier", column=@Column(name="maxScSeqInMainAreap1_1angNegmultiplier")),
		@AttributeOverride(name="p1_1.angNeg.unit", column=@Column(name="maxScSeqInMainAreap1_1angNegunit")),
		@AttributeOverride(name="p1_1.angNeg.value", column=@Column(name="maxScSeqInMainAreap1_1angNegvalue")),
		@AttributeOverride(name="p1_1.angPo.multiplier", column=@Column(name="maxScSeqInMainAreap1_1angPomultiplier")),
		@AttributeOverride(name="p1_1.angPo.unit", column=@Column(name="maxScSeqInMainAreap1_1angPounit")),
		@AttributeOverride(name="p1_1.angPo.value", column=@Column(name="maxScSeqInMainAreap1_1angPovalue")),
		@AttributeOverride(name="p1_1.angZero.multiplier", column=@Column(name="maxScSeqInMainAreap1_1angZeromultiplier")),
		@AttributeOverride(name="p1_1.angZero.unit", column=@Column(name="maxScSeqInMainAreap1_1angZerounit")),
		@AttributeOverride(name="p1_1.angZero.value", column=@Column(name="maxScSeqInMainAreap1_1angZerovalue")),
		@AttributeOverride(name="p1_1.neg.multiplier", column=@Column(name="maxScSeqInMainAreap1_1negmultiplier")),
		@AttributeOverride(name="p1_1.neg.unit", column=@Column(name="maxScSeqInMainAreap1_1negunit")),
		@AttributeOverride(name="p1_1.neg.value", column=@Column(name="maxScSeqInMainAreap1_1negvalue")),
		@AttributeOverride(name="p1_1.pos.multiplier", column=@Column(name="maxScSeqInMainAreap1_1posmultiplier")),
		@AttributeOverride(name="p1_1.pos.unit", column=@Column(name="maxScSeqInMainAreap1_1posunit")),
		@AttributeOverride(name="p1_1.pos.value", column=@Column(name="maxScSeqInMainAreap1_1posvalue")),
		@AttributeOverride(name="p1_1.zero.multiplier", column=@Column(name="maxScSeqInMainAreap1_1zeromultiplier")),
		@AttributeOverride(name="p1_1.zero.unit", column=@Column(name="maxScSeqInMainAreap1_1zerounit")),
		@AttributeOverride(name="p1_1.zero.value", column=@Column(name="maxScSeqInMainAreap1_1zerovalue")),
		@AttributeOverride(name="p2.angNeg.multiplier", column=@Column(name="maxScSeqInMainAreap2angNegmultiplier")),
		@AttributeOverride(name="p2.angNeg.unit", column=@Column(name="maxScSeqInMainAreap2angNegunit")),
		@AttributeOverride(name="p2.angNeg.value", column=@Column(name="maxScSeqInMainAreap2angNegvalue")),
		@AttributeOverride(name="p2.angPo.multiplier", column=@Column(name="maxScSeqInMainAreap2angPomultiplier")),
		@AttributeOverride(name="p2.angPo.unit", column=@Column(name="maxScSeqInMainAreap2angPounit")),
		@AttributeOverride(name="p2.angPo.value", column=@Column(name="maxScSeqInMainAreap2angPovalue")),
		@AttributeOverride(name="p2.angZero.multiplier", column=@Column(name="maxScSeqInMainAreap2angZeromultiplier")),
		@AttributeOverride(name="p2.angZero.unit", column=@Column(name="maxScSeqInMainAreap2angZerounit")),
		@AttributeOverride(name="p2.angZero.value", column=@Column(name="maxScSeqInMainAreap2angZerovalue")),
		@AttributeOverride(name="p2.neg.multiplier", column=@Column(name="maxScSeqInMainAreap2negmultiplier")),
		@AttributeOverride(name="p2.neg.unit", column=@Column(name="maxScSeqInMainAreap2negunit")),
		@AttributeOverride(name="p2.neg.value", column=@Column(name="maxScSeqInMainAreap2negvalue")),
		@AttributeOverride(name="p2.pos.multiplier", column=@Column(name="maxScSeqInMainAreap2posmultiplier")),
		@AttributeOverride(name="p2.pos.unit", column=@Column(name="maxScSeqInMainAreap2posunit")),
		@AttributeOverride(name="p2.pos.value", column=@Column(name="maxScSeqInMainAreap2posvalue")),
		@AttributeOverride(name="p2.zero.multiplier", column=@Column(name="maxScSeqInMainAreap2zeromultiplier")),
		@AttributeOverride(name="p2.zero.unit", column=@Column(name="maxScSeqInMainAreap2zerounit")),
		@AttributeOverride(name="p2.zero.value", column=@Column(name="maxScSeqInMainAreap2zerovalue")),
		@AttributeOverride(name="p3.angNeg.multiplier", column=@Column(name="maxScSeqInMainAreap3angNegmultiplier")),
		@AttributeOverride(name="p3.angNeg.unit", column=@Column(name="maxScSeqInMainAreap3angNegunit")),
		@AttributeOverride(name="p3.angNeg.value", column=@Column(name="maxScSeqInMainAreap3angNegvalue")),
		@AttributeOverride(name="p3.angPo.multiplier", column=@Column(name="maxScSeqInMainAreap3angPomultiplier")),
		@AttributeOverride(name="p3.angPo.unit", column=@Column(name="maxScSeqInMainAreap3angPounit")),
		@AttributeOverride(name="p3.angPo.value", column=@Column(name="maxScSeqInMainAreap3angPovalue")),
		@AttributeOverride(name="p3.angZero.multiplier", column=@Column(name="maxScSeqInMainAreap3angZeromultiplier")),
		@AttributeOverride(name="p3.angZero.unit", column=@Column(name="maxScSeqInMainAreap3angZerounit")),
		@AttributeOverride(name="p3.angZero.value", column=@Column(name="maxScSeqInMainAreap3angZerovalue")),
		@AttributeOverride(name="p3.neg.multiplier", column=@Column(name="maxScSeqInMainAreap3negmultiplier")),
		@AttributeOverride(name="p3.neg.unit", column=@Column(name="maxScSeqInMainAreap3negunit")),
		@AttributeOverride(name="p3.neg.value", column=@Column(name="maxScSeqInMainAreap3negvalue")),
		@AttributeOverride(name="p3.pos.multiplier", column=@Column(name="maxScSeqInMainAreap3posmultiplier")),
		@AttributeOverride(name="p3.pos.unit", column=@Column(name="maxScSeqInMainAreap3posunit")),
		@AttributeOverride(name="p3.pos.value", column=@Column(name="maxScSeqInMainAreap3posvalue")),
		@AttributeOverride(name="p3.zero.multiplier", column=@Column(name="maxScSeqInMainAreap3zeromultiplier")),
		@AttributeOverride(name="p3.zero.unit", column=@Column(name="maxScSeqInMainAreap3zerounit")),
		@AttributeOverride(name="p3.zero.value", column=@Column(name="maxScSeqInMainAreap3zerovalue"))
	})
	private ShortCircuitSequencesOfCurrents maxScSeqInMainArea;
	/**
	 * Максимальное напряжение в начале защищаемого участка
	 */
	@Embedded
	@AttributeOverrides({
		@AttributeOverride(name="a.multiplier", column=@Column(name="maxVoltageFromBeginingOfMainAreaamultiplier")),
		@AttributeOverride(name="a.unit", column=@Column(name="maxVoltageFromBeginingOfMainAreaaunit")),
		@AttributeOverride(name="a.value", column=@Column(name="maxVoltageFromBeginingOfMainAreaavalue")),
		@AttributeOverride(name="angleA.multiplier", column=@Column(name="maxVoltageFromBeginingOfMainAreaangleAmultiplier")),
		@AttributeOverride(name="angleA.unit", column=@Column(name="maxVoltageFromBeginingOfMainAreaangleAunit")),
		@AttributeOverride(name="angleA.value", column=@Column(name="maxVoltageFromBeginingOfMainAreaangleAvalue")),
		@AttributeOverride(name="angleB.multiplier", column=@Column(name="maxVoltageFromBeginingOfMainAreaangleBmultiplier")),
		@AttributeOverride(name="angleB.unit", column=@Column(name="maxVoltageFromBeginingOfMainAreaangleBunit")),
		@AttributeOverride(name="angleB.value", column=@Column(name="maxVoltageFromBeginingOfMainAreaangleBvalue")),
		@AttributeOverride(name="angleC.multiplier", column=@Column(name="maxVoltageFromBeginingOfMainAreaangleCmultiplier")),
		@AttributeOverride(name="angleC.unit", column=@Column(name="maxVoltageFromBeginingOfMainAreaangleCunit")),
		@AttributeOverride(name="angleC.value", column=@Column(name="maxVoltageFromBeginingOfMainAreaangleCvalue")),
		@AttributeOverride(name="b.multiplier", column=@Column(name="maxVoltageFromBeginingOfMainAreabmultiplier")),
		@AttributeOverride(name="b.unit", column=@Column(name="maxVoltageFromBeginingOfMainAreabunit")),
		@AttributeOverride(name="b.value", column=@Column(name="maxVoltageFromBeginingOfMainAreabvalue")),
		@AttributeOverride(name="c.multiplier", column=@Column(name="maxVoltageFromBeginingOfMainAreacmultiplier")),
		@AttributeOverride(name="c.unit", column=@Column(name="maxVoltageFromBeginingOfMainAreacunit")),
		@AttributeOverride(name="c.value", column=@Column(name="maxVoltageFromBeginingOfMainAreacvalue"))
	})
	private VoltagePhases maxVoltageFromBeginingOfMainArea;
	/**
	 * Минимальные значения фаз токов при разных типах КЗ в конце защищаемого 
	 * участка
	 */
	@Embedded
	@AttributeOverrides({
		@AttributeOverride(name="p1.a.multiplier", column=@Column(name="minScPhInMainAreap1amultiplier")),
		@AttributeOverride(name="p1.a.unit", column=@Column(name="minScPhInMainAreap1aunit")),
		@AttributeOverride(name="p1.a.value", column=@Column(name="minScPhInMainAreap1avalue")),
		@AttributeOverride(name="p1.angleA.multiplier", column=@Column(name="minScPhInMainAreap1angleAmultiplier")),
		@AttributeOverride(name="p1.angleA.unit", column=@Column(name="minScPhInMainAreap1angleAunit")),
		@AttributeOverride(name="p1.angleA.value", column=@Column(name="minScPhInMainAreap1angleAvalue")),
		@AttributeOverride(name="p1.angleB.multiplier", column=@Column(name="minScPhInMainAreap1angleBmultiplier")),
		@AttributeOverride(name="p1.angleB.unit", column=@Column(name="minScPhInMainAreap1angleBunit")),
		@AttributeOverride(name="p1.angleB.value", column=@Column(name="minScPhInMainAreap1angleBvalue")),
		@AttributeOverride(name="p1.angleC.multiplier", column=@Column(name="minScPhInMainAreap1angleCmultiplier")),
		@AttributeOverride(name="p1.angleC.unit", column=@Column(name="minScPhInMainAreap1angleCunit")),
		@AttributeOverride(name="p1.angleC.value", column=@Column(name="minScPhInMainAreap1angleCvalue")),
		@AttributeOverride(name="p1.b.multiplier", column=@Column(name="minScPhInMainAreap1bmultiplier")),
		@AttributeOverride(name="p1.b.unit", column=@Column(name="minScPhInMainAreap1bunit")),
		@AttributeOverride(name="p1.b.value", column=@Column(name="minScPhInMainAreap1bvalue")),
		@AttributeOverride(name="p1.c.multiplier", column=@Column(name="minScPhInMainAreap1cmultiplier")),
		@AttributeOverride(name="p1.c.unit", column=@Column(name="minScPhInMainAreap1cunit")),
		@AttributeOverride(name="p1.c.value", column=@Column(name="minScPhInMainAreap1cvalue")),
		@AttributeOverride(name="p1_1.a.multiplier", column=@Column(name="minScPhInMainAreap1_1amultiplier")),
		@AttributeOverride(name="p1_1.a.unit", column=@Column(name="minScPhInMainAreap1_1aunit")),
		@AttributeOverride(name="p1_1.a.value", column=@Column(name="minScPhInMainAreap1_1avalue")),
		@AttributeOverride(name="p1_1.angleA.multiplier", column=@Column(name="minScPhInMainAreap1_1angleAmultiplier")),
		@AttributeOverride(name="p1_1.angleA.unit", column=@Column(name="minScPhInMainAreap1_1angleAunit")),
		@AttributeOverride(name="p1_1.angleA.value", column=@Column(name="minScPhInMainAreap1_1angleAvalue")),
		@AttributeOverride(name="p1_1.angleB.multiplier", column=@Column(name="minScPhInMainAreap1_1angleBmultiplier")),
		@AttributeOverride(name="p1_1.angleB.unit", column=@Column(name="minScPhInMainAreap1_1angleBunit")),
		@AttributeOverride(name="p1_1.angleB.value", column=@Column(name="minScPhInMainAreap1_1angleBvalue")),
		@AttributeOverride(name="p1_1.angleC.multiplier", column=@Column(name="minScPhInMainAreap1_1angleCmultiplier")),
		@AttributeOverride(name="p1_1.angleC.unit", column=@Column(name="minScPhInMainAreap1_1angleCunit")),
		@AttributeOverride(name="p1_1.angleC.value", column=@Column(name="minScPhInMainAreap1_1angleCvalue")),
		@AttributeOverride(name="p1_1.b.multiplier", column=@Column(name="minScPhInMainAreap1_1bmultiplier")),
		@AttributeOverride(name="p1_1.b.unit", column=@Column(name="minScPhInMainAreap1_1bunit")),
		@AttributeOverride(name="p1_1.b.value", column=@Column(name="minScPhInMainAreap1_1bvalue")),
		@AttributeOverride(name="p1_1.c.multiplier", column=@Column(name="minScPhInMainAreap1_1cmultiplier")),
		@AttributeOverride(name="p1_1.c.unit", column=@Column(name="minScPhInMainAreap1_1cunit")),
		@AttributeOverride(name="p1_1.c.value", column=@Column(name="minScPhInMainAreap1_1cvalue")),
		@AttributeOverride(name="p2.a.multiplier", column=@Column(name="minScPhInMainAreap2amultiplier")),
		@AttributeOverride(name="p2.a.unit", column=@Column(name="minScPhInMainAreap2aunit")),
		@AttributeOverride(name="p2.a.value", column=@Column(name="minScPhInMainAreap2avalue")),
		@AttributeOverride(name="p2.angleA.multiplier", column=@Column(name="minScPhInMainAreap2angleAmultiplier")),
		@AttributeOverride(name="p2.angleA.unit", column=@Column(name="minScPhInMainAreap2angleAunit")),
		@AttributeOverride(name="p2.angleA.value", column=@Column(name="minScPhInMainAreap2angleAvalue")),
		@AttributeOverride(name="p2.angleB.multiplier", column=@Column(name="minScPhInMainAreap2angleBmultiplier")),
		@AttributeOverride(name="p2.angleB.unit", column=@Column(name="minScPhInMainAreap2angleBunit")),
		@AttributeOverride(name="p2.angleB.value", column=@Column(name="minScPhInMainAreap2angleBvalue")),
		@AttributeOverride(name="p2.angleC.multiplier", column=@Column(name="minScPhInMainAreap2angleCmultiplier")),
		@AttributeOverride(name="p2.angleC.unit", column=@Column(name="minScPhInMainAreap2angleCunit")),
		@AttributeOverride(name="p2.angleC.value", column=@Column(name="minScPhInMainAreap2angleCvalue")),
		@AttributeOverride(name="p2.b.multiplier", column=@Column(name="minScPhInMainAreap2bmultiplier")),
		@AttributeOverride(name="p2.b.unit", column=@Column(name="minScPhInMainAreap2bunit")),
		@AttributeOverride(name="p2.b.value", column=@Column(name="minScPhInMainAreap2bvalue")),
		@AttributeOverride(name="p2.c.multiplier", column=@Column(name="minScPhInMainAreap2cmultiplier")),
		@AttributeOverride(name="p2.c.unit", column=@Column(name="minScPhInMainAreap2cunit")),
		@AttributeOverride(name="p2.c.value", column=@Column(name="minScPhInMainAreap2cvalue")),
		@AttributeOverride(name="p3.a.multiplier", column=@Column(name="minScPhInMainAreap3amultiplier")),
		@AttributeOverride(name="p3.a.unit", column=@Column(name="minScPhInMainAreap3aunit")),
		@AttributeOverride(name="p3.a.value", column=@Column(name="minScPhInMainAreap3avalue")),
		@AttributeOverride(name="p3.angleA.multiplier", column=@Column(name="minScPhInMainAreap3angleAmultiplier")),
		@AttributeOverride(name="p3.angleA.unit", column=@Column(name="minScPhInMainAreap3angleAunit")),
		@AttributeOverride(name="p3.angleA.value", column=@Column(name="minScPhInMainAreap3angleAvalue")),
		@AttributeOverride(name="p3.angleB.multiplier", column=@Column(name="minScPhInMainAreap3angleBmultiplier")),
		@AttributeOverride(name="p3.angleB.unit", column=@Column(name="minScPhInMainAreap3angleBunit")),
		@AttributeOverride(name="p3.angleB.value", column=@Column(name="minScPhInMainAreap3angleBvalue")),
		@AttributeOverride(name="p3.angleC.multiplier", column=@Column(name="minScPhInMainAreap3angleCmultiplier")),
		@AttributeOverride(name="p3.angleC.unit", column=@Column(name="minScPhInMainAreap3angleCunit")),
		@AttributeOverride(name="p3.angleC.value", column=@Column(name="minScPhInMainAreap3angleCvalue")),
		@AttributeOverride(name="p3.b.multiplier", column=@Column(name="minScPhInMainAreap3bmultiplier")),
		@AttributeOverride(name="p3.b.unit", column=@Column(name="minScPhInMainAreap3bunit")),
		@AttributeOverride(name="p3.b.value", column=@Column(name="minScPhInMainAreap3bvalue")),
		@AttributeOverride(name="p3.c.multiplier", column=@Column(name="minScPhInMainAreap3cmultiplier")),
		@AttributeOverride(name="p3.c.unit", column=@Column(name="minScPhInMainAreap3cunit")),
		@AttributeOverride(name="p3.c.value", column=@Column(name="minScPhInMainAreap3cvalue"))
	})
	private ShortCircuitPhasesOfCurrents minScPhInMainArea;
	/**
	 * Минимальные значения последовательностей токов при разных типах КЗ в конце 
	 * защищаемого участка
	 */
	@Embedded
	@AttributeOverrides({
		@AttributeOverride(name="p1.angNeg.multiplier", column=@Column(name="minScSeqInMainAreap1angNegmultiplier")),
		@AttributeOverride(name="p1.angNeg.unit", column=@Column(name="minScSeqInMainAreap1angNegunit")),
		@AttributeOverride(name="p1.angNeg.value", column=@Column(name="minScSeqInMainAreap1angNegvalue")),
		@AttributeOverride(name="p1.angPo.multiplier", column=@Column(name="minScSeqInMainAreap1angPomultiplier")),
		@AttributeOverride(name="p1.angPo.unit", column=@Column(name="minScSeqInMainAreap1angPounit")),
		@AttributeOverride(name="p1.angPo.value", column=@Column(name="minScSeqInMainAreap1angPovalue")),
		@AttributeOverride(name="p1.angZero.multiplier", column=@Column(name="minScSeqInMainAreap1angZeromultiplier")),
		@AttributeOverride(name="p1.angZero.unit", column=@Column(name="minScSeqInMainAreap1angZerounit")),
		@AttributeOverride(name="p1.angZero.value", column=@Column(name="minScSeqInMainAreap1angZerovalue")),
		@AttributeOverride(name="p1.neg.multiplier", column=@Column(name="minScSeqInMainAreap1negmultiplier")),
		@AttributeOverride(name="p1.neg.unit", column=@Column(name="minScSeqInMainAreap1negunit")),
		@AttributeOverride(name="p1.neg.value", column=@Column(name="minScSeqInMainAreap1negvalue")),
		@AttributeOverride(name="p1.pos.multiplier", column=@Column(name="minScSeqInMainAreap1posmultiplier")),
		@AttributeOverride(name="p1.pos.unit", column=@Column(name="minScSeqInMainAreap1posunit")),
		@AttributeOverride(name="p1.pos.value", column=@Column(name="minScSeqInMainAreap1posvalue")),
		@AttributeOverride(name="p1.zero.multiplier", column=@Column(name="minScSeqInMainAreap1zeromultiplier")),
		@AttributeOverride(name="p1.zero.unit", column=@Column(name="minScSeqInMainAreap1zerounit")),
		@AttributeOverride(name="p1.zero.value", column=@Column(name="minScSeqInMainAreap1zerovalue")),
		@AttributeOverride(name="p1_1.angNeg.multiplier", column=@Column(name="minScSeqInMainAreap1_1angNegmultiplier")),
		@AttributeOverride(name="p1_1.angNeg.unit", column=@Column(name="minScSeqInMainAreap1_1angNegunit")),
		@AttributeOverride(name="p1_1.angNeg.value", column=@Column(name="minScSeqInMainAreap1_1angNegvalue")),
		@AttributeOverride(name="p1_1.angPo.multiplier", column=@Column(name="minScSeqInMainAreap1_1angPomultiplier")),
		@AttributeOverride(name="p1_1.angPo.unit", column=@Column(name="minScSeqInMainAreap1_1angPounit")),
		@AttributeOverride(name="p1_1.angPo.value", column=@Column(name="minScSeqInMainAreap1_1angPovalue")),
		@AttributeOverride(name="p1_1.angZero.multiplier", column=@Column(name="minScSeqInMainAreap1_1angZeromultiplier")),
		@AttributeOverride(name="p1_1.angZero.unit", column=@Column(name="minScSeqInMainAreap1_1angZerounit")),
		@AttributeOverride(name="p1_1.angZero.value", column=@Column(name="minScSeqInMainAreap1_1angZerovalue")),
		@AttributeOverride(name="p1_1.neg.multiplier", column=@Column(name="minScSeqInMainAreap1_1negmultiplier")),
		@AttributeOverride(name="p1_1.neg.unit", column=@Column(name="minScSeqInMainAreap1_1negunit")),
		@AttributeOverride(name="p1_1.neg.value", column=@Column(name="minScSeqInMainAreap1_1negvalue")),
		@AttributeOverride(name="p1_1.pos.multiplier", column=@Column(name="minScSeqInMainAreap1_1posmultiplier")),
		@AttributeOverride(name="p1_1.pos.unit", column=@Column(name="minScSeqInMainAreap1_1posunit")),
		@AttributeOverride(name="p1_1.pos.value", column=@Column(name="minScSeqInMainAreap1_1posvalue")),
		@AttributeOverride(name="p1_1.zero.multiplier", column=@Column(name="minScSeqInMainAreap1_1zeromultiplier")),
		@AttributeOverride(name="p1_1.zero.unit", column=@Column(name="minScSeqInMainAreap1_1zerounit")),
		@AttributeOverride(name="p1_1.zero.value", column=@Column(name="minScSeqInMainAreap1_1zerovalue")),
		@AttributeOverride(name="p2.angNeg.multiplier", column=@Column(name="minScSeqInMainAreap2angNegmultiplier")),
		@AttributeOverride(name="p2.angNeg.unit", column=@Column(name="minScSeqInMainAreap2angNegunit")),
		@AttributeOverride(name="p2.angNeg.value", column=@Column(name="minScSeqInMainAreap2angNegvalue")),
		@AttributeOverride(name="p2.angPo.multiplier", column=@Column(name="minScSeqInMainAreap2angPomultiplier")),
		@AttributeOverride(name="p2.angPo.unit", column=@Column(name="minScSeqInMainAreap2angPounit")),
		@AttributeOverride(name="p2.angPo.value", column=@Column(name="minScSeqInMainAreap2angPovalue")),
		@AttributeOverride(name="p2.angZero.multiplier", column=@Column(name="minScSeqInMainAreap2angZeromultiplier")),
		@AttributeOverride(name="p2.angZero.unit", column=@Column(name="minScSeqInMainAreap2angZerounit")),
		@AttributeOverride(name="p2.angZero.value", column=@Column(name="minScSeqInMainAreap2angZerovalue")),
		@AttributeOverride(name="p2.neg.multiplier", column=@Column(name="minScSeqInMainAreap2negmultiplier")),
		@AttributeOverride(name="p2.neg.unit", column=@Column(name="minScSeqInMainAreap2negunit")),
		@AttributeOverride(name="p2.neg.value", column=@Column(name="minScSeqInMainAreap2negvalue")),
		@AttributeOverride(name="p2.pos.multiplier", column=@Column(name="minScSeqInMainAreap2posmultiplier")),
		@AttributeOverride(name="p2.pos.unit", column=@Column(name="minScSeqInMainAreap2posunit")),
		@AttributeOverride(name="p2.pos.value", column=@Column(name="minScSeqInMainAreap2posvalue")),
		@AttributeOverride(name="p2.zero.multiplier", column=@Column(name="minScSeqInMainAreap2zeromultiplier")),
		@AttributeOverride(name="p2.zero.unit", column=@Column(name="minScSeqInMainAreap2zerounit")),
		@AttributeOverride(name="p2.zero.value", column=@Column(name="minScSeqInMainAreap2zerovalue")),
		@AttributeOverride(name="p3.angNeg.multiplier", column=@Column(name="minScSeqInMainAreap3angNegmultiplier")),
		@AttributeOverride(name="p3.angNeg.unit", column=@Column(name="minScSeqInMainAreap3angNegunit")),
		@AttributeOverride(name="p3.angNeg.value", column=@Column(name="minScSeqInMainAreap3angNegvalue")),
		@AttributeOverride(name="p3.angPo.multiplier", column=@Column(name="minScSeqInMainAreap3angPomultiplier")),
		@AttributeOverride(name="p3.angPo.unit", column=@Column(name="minScSeqInMainAreap3angPounit")),
		@AttributeOverride(name="p3.angPo.value", column=@Column(name="minScSeqInMainAreap3angPovalue")),
		@AttributeOverride(name="p3.angZero.multiplier", column=@Column(name="minScSeqInMainAreap3angZeromultiplier")),
		@AttributeOverride(name="p3.angZero.unit", column=@Column(name="minScSeqInMainAreap3angZerounit")),
		@AttributeOverride(name="p3.angZero.value", column=@Column(name="minScSeqInMainAreap3angZerovalue")),
		@AttributeOverride(name="p3.neg.multiplier", column=@Column(name="minScSeqInMainAreap3negmultiplier")),
		@AttributeOverride(name="p3.neg.unit", column=@Column(name="minScSeqInMainAreap3negunit")),
		@AttributeOverride(name="p3.neg.value", column=@Column(name="minScSeqInMainAreap3negvalue")),
		@AttributeOverride(name="p3.pos.multiplier", column=@Column(name="minScSeqInMainAreap3posmultiplier")),
		@AttributeOverride(name="p3.pos.unit", column=@Column(name="minScSeqInMainAreap3posunit")),
		@AttributeOverride(name="p3.pos.value", column=@Column(name="minScSeqInMainAreap3posvalue")),
		@AttributeOverride(name="p3.zero.multiplier", column=@Column(name="minScSeqInMainAreap3zeromultiplier")),
		@AttributeOverride(name="p3.zero.unit", column=@Column(name="minScSeqInMainAreap3zerounit")),
		@AttributeOverride(name="p3.zero.value", column=@Column(name="minScSeqInMainAreap3zerovalue"))
	})
	private ShortCircuitSequencesOfCurrents minScSeqInMainArea;
	/**
	 * Минимальное напряжение в начале защищаемого участка
	 */
	@Embedded
	@AttributeOverrides({
		@AttributeOverride(name="a.multiplier", column=@Column(name="minVoltageFromBeginingOfMainAreaamultiplier")),
		@AttributeOverride(name="a.unit", column=@Column(name="minVoltageFromBeginingOfMainAreaaunit")),
		@AttributeOverride(name="a.value", column=@Column(name="minVoltageFromBeginingOfMainAreaavalue")),
		@AttributeOverride(name="angleA.multiplier", column=@Column(name="minVoltageFromBeginingOfMainAreaangleAmultiplier")),
		@AttributeOverride(name="angleA.unit", column=@Column(name="minVoltageFromBeginingOfMainAreaangleAunit")),
		@AttributeOverride(name="angleA.value", column=@Column(name="minVoltageFromBeginingOfMainAreaangleAvalue")),
		@AttributeOverride(name="angleB.multiplier", column=@Column(name="minVoltageFromBeginingOfMainAreaangleBmultiplier")),
		@AttributeOverride(name="angleB.unit", column=@Column(name="minVoltageFromBeginingOfMainAreaangleBunit")),
		@AttributeOverride(name="angleB.value", column=@Column(name="minVoltageFromBeginingOfMainAreaangleBvalue")),
		@AttributeOverride(name="angleC.multiplier", column=@Column(name="minVoltageFromBeginingOfMainAreaangleCmultiplier")),
		@AttributeOverride(name="angleC.unit", column=@Column(name="minVoltageFromBeginingOfMainAreaangleCunit")),
		@AttributeOverride(name="angleC.value", column=@Column(name="minVoltageFromBeginingOfMainAreaangleCvalue")),
		@AttributeOverride(name="b.multiplier", column=@Column(name="minVoltageFromBeginingOfMainAreabmultiplier")),
		@AttributeOverride(name="b.unit", column=@Column(name="minVoltageFromBeginingOfMainAreabunit")),
		@AttributeOverride(name="b.value", column=@Column(name="minVoltageFromBeginingOfMainAreabvalue")),
		@AttributeOverride(name="c.multiplier", column=@Column(name="minVoltageFromBeginingOfMainAreacmultiplier")),
		@AttributeOverride(name="c.unit", column=@Column(name="minVoltageFromBeginingOfMainAreacunit")),
		@AttributeOverride(name="c.value", column=@Column(name="minVoltageFromBeginingOfMainAreacvalue"))
	})
	private VoltagePhases minVoltageFromBeginingOfMainArea;
	/**
	 * Direction same as positive active power flow value.
	 */
	@Column(name="powerDirectionFlag", nullable = true)
	private Boolean powerDirectionFlag;
	/**
	 * Список максимальных  токов  трехфазного КЗ за каждым смежным трансформатором
	 */
	@ElementCollection
	private List<CurrentFlow> powerTransformerForkHVThreeSCCurrentMax;
	/**
	 * Список минимальных  токов  двухфазного КЗ за каждым смежным трансформатором
	 */
	@ElementCollection
	private List<CurrentFlow> powerTransformerForkHVTwoSCCurrentMin;
	/**
	 * Список максимальных  токов  трехфазного КЗ за каждым смежным трансформатором
	 */
	@ElementCollection
	private List<CurrentFlow> powerTransformerForkLVThreeSCCurrentMax;
	/**
	 * Список минимальных  токов  двухфазного КЗ за каждым смежным трансформатором
	 */
	@ElementCollection
	private List<CurrentFlow> powerTransformerForkLVTwoSCCurrentMin;
	/**
	 * Тип защиты
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "protectionType")
	private ProtectionType protectionType;
	/**
	 * The time delay from detection of abnormal conditions to relay operation.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="relayDelayTime_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="relayDelayTime_unit")),
		@AttributeOverride(name="value", column=@Column(name="relayDelayTime_value")),
	})
	private Seconds relayDelayTime;
	/**
	 * Коэффициент чувствительности первой ступени
	 */
	@Column(name="sensitivityKoef1", nullable = true)
	private Float sensitivityKoef1;
	/**
	 * Коэффициент чувствительности второй ступени
	 */
	@Column(name="sensitivityKoef2", nullable = true)
	private Float sensitivityKoef2;
	/**
	 * Коэффициент чувствительности третьей ступени
	 */
	@ElementCollection
	private List<Float> sensitivityKoef3;
	/**
	 * Коэффициент чувствительности четвертой ступени
	 */
	@ElementCollection
	private List<Float> sensitivityKoef4;
//	@Column(name="sensitivityKoef4", nullable = true)
//	private Float sensitivityKoef4;
	/**
	 * Коэффициент чувствительности пятой ступени
	 */
	@ElementCollection
	private List<Float> sensitivityKoef5;
//	@Column(name="sensitivityKoef5", nullable = true)
//	private Float sensitivityKoef5;
	/**
	 * Время срабатывания смежной защиты (выбирается максимальным из списка смежных 
	 * защит)
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="tripTimeOfAdjacentProtection_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="tripTimeOfAdjacentProtection_unit")),
		@AttributeOverride(name="value", column=@Column(name="tripTimeOfAdjacentProtection_value")),
	})
	private Seconds tripTimeOfAdjacentProtection;
	/**
	 * The unit multiplier of the value.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "unitMultiplier")
	private UnitMultiplier unitMultiplier;
	/**
	 * The unit of measure of the value.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "unitSymbol")
	private UnitSymbol unitSymbol;
	/**
	 * Производитель
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "vendor")
	private ProtectionEquipmentsVendor vendor;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id")
	private ProtectionLibrary ProtectionLibrary;
	/**
	 * Трансформаторы тока
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "ProtectionEquipment")
	private List<CurrentTransformer> CurrentTransformers;
	/**
	 * Трансформаторы напряжений
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "ProtectionEquipment")
	private List<PotentialTransformer> PotentialTransformer;
	/**
	 * Protection equipment  used to protect specific conducting equipment. 
	 */
	@ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "ProtectionEquipments")
	private List<ConductingEquipment> ConductingEquipments;
	/**
	 * ConnectivityNode в начале защищаемого участка для выбора значений напряжения
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "connectivitynodeformaxvoltage_mrid")
	@JoinColumn(name = "connectivitynodeformaxvoltage_projectid")
	@JoinColumn(name = "connectivitynodeformaxvoltage_synthesizedschemenumber")
	@JoinColumn(name = "connectivitynodeformaxvoltage_schemascenarionumber")
	private ConnectivityNode ConnectivityNodeForMaxVoltage;
	/**
	 * Терминал в конце защищаемого объекта (для определения вида КЗ)
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "terminalintheendofprotectedobject_mrid")
	@JoinColumn(name = "terminalintheendofprotectedobject_projectid")
	@JoinColumn(name = "terminalintheendofprotectedobject_synthesizedschemenumber")
	@JoinColumn(name = "terminalintheendofprotectedobject_schemascenarionumber")
	private Terminal TerminalInTheEndOfProtectedObject;
	/**
	 * Список терминалов смежных трансформаторов со стороны НН
	 */
	@ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "PeForPowerTransformerForkLV")
	private List<Terminal> terminalsForPowerTransformerForkLV;
	/**
	 * Терминал для выбора максимального нагрузочного тока
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "terminalformaxloadflowcurrent_mrid")
	@JoinColumn(name = "terminalformaxloadflowcurrent_projectid")
	@JoinColumn(name = "terminalformaxloadflowcurrent_synthesizedschemenumber")
	@JoinColumn(name = "terminalformaxloadflowcurrent_schemascenarionumber")
	private Terminal terminalForMaxLoadFlowCurrent;
	/**
	 * Список терминалов смежных трансформаторов со стороны ВН
	 */
	@ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "PeForPowerTransformerForkHV")
	private List<Terminal> terminalsForPowerTransformerForkHV;
	/**
	 * Терминал в месте установки защиты для выбора токов через защиту при разных 
	 * видах КЗ в конце защищаемого объекта
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "terminalforsccurrentinmainarea_mrid")
	@JoinColumn(name = "terminalforsccurrentinmainarea_projectid")
	@JoinColumn(name = "terminalforsccurrentinmainarea_synthesizedschemenumber")
	@JoinColumn(name = "terminalforsccurrentinmainarea_schemascenarionumber")
	private Terminal TerminalForScCurrentInMainArea;
	/**
	 * Список терминалов смежных линий
	 */
	@ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "PeForACLineSegmentFork")
	private List<Terminal> TerminalsForACLineSegmentFork;
	/**
	 * Смежная защита для определения уставки второй ступени
	 */
	@OneToOne(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "AdjacentProtectionEquipmentForSecondLevel")
	private ProtectionEquipment ProtectionEquipmentForWichThisProtectionIsProtectionEquipmentSecondLevel;
	/**
	 * Смежная защита, которая участвует в определении уставки второй ступени
	 */
	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "adjacentprotectionequipmentforsecondlevel_mrid")
	@JoinColumn(name = "adjacentprotectionequipmentforsecondlevel_projectid")
	@JoinColumn(name = "adjacentprotectionequipmentforsecondlevel_synthesizedschemenumber")
	@JoinColumn(name = "adjacentprotectionequipmentforsecondlevel_schemascenarionumber")
	private ProtectionEquipment AdjacentProtectionEquipmentForSecondLevel;
	/**
	 * Защиты, для которых данная защита является смежной
	 */
	@ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "AdjacentProtections")
	private List<ProtectionEquipment> ProtectionsForWichThisProtectionIsAdjacent;
	/**
	 * Смежные защиты
	 */
	@ManyToMany(fetch = FetchType.LAZY)
	@JoinColumn(name = "adjacentprotections_mrid")
	@JoinColumn(name = "adjacentprotections_projectid")
	@JoinColumn(name = "adjacentprotections_synthesizedschemenumber")
	@JoinColumn(name = "adjacentprotections_schemascenarionumber")
	private List<ProtectionEquipment> AdjacentProtections;
	/**
	 * Protection equipments that operate this ProtectedSwitch.
	 */
//	@ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "OperatedByProtectionEquipment")
//	@ElementCollection
	@Column(name="ProtectedSwitches", nullable = true)
	private String ProtectedSwitches;

	public List<CurrentFlow> getACLineSegmentForkOneScCurrentMin(){
		return this.aCLineSegmentForkOneScCurrentMin;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.aCLineSegmentForkOneScCurrentMin", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setACLineSegmentForkOneScCurrentMin(List<CurrentFlow> aCLineSegmentForkOneScCurrentMin){
		this.aCLineSegmentForkOneScCurrentMin = aCLineSegmentForkOneScCurrentMin;
	}

	public List<CurrentFlow> getACLineSegmentForkTwoScCurrentMin(){
		return this.aCLineSegmentForkTwoScCurrentMin;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.aCLineSegmentForkTwoScCurrentMin", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setACLineSegmentForkTwoScCurrentMin(List<CurrentFlow> aCLineSegmentForkTwoScCurrentMin){
		this.aCLineSegmentForkTwoScCurrentMin = aCLineSegmentForkTwoScCurrentMin;
	}

	public Float getHighLimit(){
		return this.highLimit;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.highLimit", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setHighLimit(Float highLimit){
		this.highLimit = highLimit;
	}

	public Float getKoefOfcurrentDistributionForOnePhaseSCLine(){
		return this.koefOfcurrentDistributionForOnePhaseSCLine;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.koefOfcurrentDistributionForOnePhaseSCLine", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setKoefOfcurrentDistributionForOnePhaseSCLine(Float koefOfcurrentDistributionForOnePhaseSCLine){
		this.koefOfcurrentDistributionForOnePhaseSCLine = koefOfcurrentDistributionForOnePhaseSCLine;
	}

	public Float getKoefOfcurrentDistributionForTwoPhaseSCLine(){
		return this.koefOfcurrentDistributionForTwoPhaseSCLine;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.koefOfcurrentDistributionForTwoPhaseSCLine", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setKoefOfcurrentDistributionForTwoPhaseSCLine(Float koefOfcurrentDistributionForTwoPhaseSCLine){
		this.koefOfcurrentDistributionForTwoPhaseSCLine = koefOfcurrentDistributionForTwoPhaseSCLine;
	}

	public Float getKoefOfcurrentDistributionForTwoPhaseSCTransformer(){
		return this.KoefOfcurrentDistributionForTwoPhaseSCTransformer;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.KoefOfcurrentDistributionForTwoPhaseSCTransformer", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setKoefOfcurrentDistributionForTwoPhaseSCTransformer(Float KoefOfcurrentDistributionForTwoPhaseSCTransformer){
		this.KoefOfcurrentDistributionForTwoPhaseSCTransformer = KoefOfcurrentDistributionForTwoPhaseSCTransformer;
	}

	public Float getLowLimit(){
		return this.lowLimit;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.lowLimit", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setLowLimit(Float lowLimit){
		this.lowLimit = lowLimit;
	}

	public CurrentPhases getMaxLoadFlowCurrent(){
		return this.maxLoadFlowCurrent;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.maxLoadFlowCurrent", fieldTypeStereotype = "Embeddable", fieldStereotype = "nti")
	public void setMaxLoadFlowCurrent(CurrentPhases maxLoadFlowCurrent){
		this.maxLoadFlowCurrent = maxLoadFlowCurrent;
	}

	public ShortCircuitPhasesOfCurrents getMaxSCCurrentPhaseInMainAreaForSensitivity(){
		return this.maxSCCurrentPhaseInMainAreaForSensitivity;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.maxSCCurrentPhaseInMainAreaForSensitivity", fieldTypeStereotype = "Embeddable", fieldStereotype = "nti")
	public void setMaxSCCurrentPhaseInMainAreaForSensitivity(ShortCircuitPhasesOfCurrents maxSCCurrentPhaseInMainAreaForSensitivity){
		this.maxSCCurrentPhaseInMainAreaForSensitivity = maxSCCurrentPhaseInMainAreaForSensitivity;
	}

	public ShortCircuitPhasesOfCurrents getMaxScPhInMainArea(){
		return this.maxScPhInMainArea;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.maxScPhInMainArea", fieldTypeStereotype = "Embeddable", fieldStereotype = "nti")
	public void setMaxScPhInMainArea(ShortCircuitPhasesOfCurrents maxScPhInMainArea){
		this.maxScPhInMainArea = maxScPhInMainArea;
	}

	public ShortCircuitSequencesOfCurrents getMaxScSeqInMainArea(){
		return this.maxScSeqInMainArea;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.maxScSeqInMainArea", fieldTypeStereotype = "Embeddable", fieldStereotype = "nti")
	public void setMaxScSeqInMainArea(ShortCircuitSequencesOfCurrents maxScSeqInMainArea){
		this.maxScSeqInMainArea = maxScSeqInMainArea;
	}

	public VoltagePhases getMaxVoltageFromBeginingOfMainArea(){
		return this.maxVoltageFromBeginingOfMainArea;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.maxVoltageFromBeginingOfMainArea", fieldTypeStereotype = "Embeddable", fieldStereotype = "nti")
	public void setMaxVoltageFromBeginingOfMainArea(VoltagePhases maxVoltageFromBeginingOfMainArea){
		this.maxVoltageFromBeginingOfMainArea = maxVoltageFromBeginingOfMainArea;
	}

	public ShortCircuitPhasesOfCurrents getMinScPhInMainArea(){
		return this.minScPhInMainArea;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.minScPhInMainArea", fieldTypeStereotype = "Embeddable", fieldStereotype = "nti")
	public void setMinScPhInMainArea(ShortCircuitPhasesOfCurrents minScPhInMainArea){
		this.minScPhInMainArea = minScPhInMainArea;
	}

	public ShortCircuitSequencesOfCurrents getMinScSeqInMainArea(){
		return this.minScSeqInMainArea;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.minScSeqInMainArea", fieldTypeStereotype = "Embeddable", fieldStereotype = "nti")
	public void setMinScSeqInMainArea(ShortCircuitSequencesOfCurrents minScSeqInMainArea){
		this.minScSeqInMainArea = minScSeqInMainArea;
	}

	public VoltagePhases getMinVoltageFromBeginingOfMainArea(){
		return this.minVoltageFromBeginingOfMainArea;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.minVoltageFromBeginingOfMainArea", fieldTypeStereotype = "Embeddable", fieldStereotype = "nti")
	public void setMinVoltageFromBeginingOfMainArea(VoltagePhases minVoltageFromBeginingOfMainArea){
		this.minVoltageFromBeginingOfMainArea = minVoltageFromBeginingOfMainArea;
	}

	public Boolean getPowerDirectionFlag(){
		return this.powerDirectionFlag;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.powerDirectionFlag", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setPowerDirectionFlag(Boolean powerDirectionFlag){
		this.powerDirectionFlag = powerDirectionFlag;
	}

	public List<CurrentFlow> getPowerTransformerForkHVThreeSCCurrentMax(){
		return this.powerTransformerForkHVThreeSCCurrentMax;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.powerTransformerForkHVThreeSCCurrentMax", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setPowerTransformerForkHVThreeSCCurrentMax(List<CurrentFlow> powerTransformerForkHVThreeSCCurrentMax){
		this.powerTransformerForkHVThreeSCCurrentMax = powerTransformerForkHVThreeSCCurrentMax;
	}

	public List<CurrentFlow> getPowerTransformerForkHVTwoSCCurrentMin(){
		return this.powerTransformerForkHVTwoSCCurrentMin;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.powerTransformerForkHVTwoSCCurrentMin", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setPowerTransformerForkHVTwoSCCurrentMin(List<CurrentFlow> powerTransformerForkHVTwoSCCurrentMin){
		this.powerTransformerForkHVTwoSCCurrentMin = powerTransformerForkHVTwoSCCurrentMin;
	}

	public List<CurrentFlow> getPowerTransformerForkLVThreeSCCurrentMax(){
		return this.powerTransformerForkLVThreeSCCurrentMax;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.powerTransformerForkLVThreeSCCurrentMax", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setPowerTransformerForkLVThreeSCCurrentMax(List<CurrentFlow> powerTransformerForkLVThreeSCCurrentMax){
		this.powerTransformerForkLVThreeSCCurrentMax = powerTransformerForkLVThreeSCCurrentMax;
	}

	public List<CurrentFlow> getPowerTransformerForkLVTwoSCCurrentMin(){
		return this.powerTransformerForkLVTwoSCCurrentMin;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.powerTransformerForkLVTwoSCCurrentMin", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setPowerTransformerForkLVTwoSCCurrentMin(List<CurrentFlow> powerTransformerForkLVTwoSCCurrentMin){
		this.powerTransformerForkLVTwoSCCurrentMin = powerTransformerForkLVTwoSCCurrentMin;
	}

	public ProtectionType getProtectionType(){
		return this.protectionType;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.protectionType", fieldTypeStereotype = "Enumeration", fieldStereotype = "nti")
	public void setProtectionType(ProtectionType protectionType){
		this.protectionType = protectionType;
	}

	public Seconds getRelayDelayTime(){
		return this.relayDelayTime;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.relayDelayTime", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setRelayDelayTime(Seconds relayDelayTime){
		this.relayDelayTime = relayDelayTime;
	}

	public Float getSensitivityKoef1(){
		return this.sensitivityKoef1;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.sensitivityKoef1", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setSensitivityKoef1(Float sensitivityKoef1){
		this.sensitivityKoef1 = sensitivityKoef1;
	}

	public Float getSensitivityKoef2(){
		return this.sensitivityKoef2;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.sensitivityKoef2", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setSensitivityKoef2(Float sensitivityKoef2){
		this.sensitivityKoef2 = sensitivityKoef2;
	}

	public List<Float> getSensitivityKoef3(){
		return this.sensitivityKoef3;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.sensitivityKoef3", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setSensitivityKoef3(List<Float> sensitivityKoef3){
		this.sensitivityKoef3 = sensitivityKoef3;
	}

	public List<Float> getSensitivityKoef4(){
		return this.sensitivityKoef4;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.sensitivityKoef4", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setSensitivityKoef4(List<Float> sensitivityKoef4){
		this.sensitivityKoef4 = sensitivityKoef4;
	}

	public List<Float> getSensitivityKoef5(){
		return this.sensitivityKoef5;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.sensitivityKoef5", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setSensitivityKoef5(List<Float> sensitivityKoef5){
		this.sensitivityKoef5 = sensitivityKoef5;
	}

	public Seconds getTripTimeOfAdjacentProtection(){
		return this.tripTimeOfAdjacentProtection;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.tripTimeOfAdjacentProtection", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setTripTimeOfAdjacentProtection(Seconds tripTimeOfAdjacentProtection){
		this.tripTimeOfAdjacentProtection = tripTimeOfAdjacentProtection;
	}

	public UnitMultiplier getUnitMultiplier(){
		return this.unitMultiplier;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.unitMultiplier", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setUnitMultiplier(UnitMultiplier unitMultiplier){
		this.unitMultiplier = unitMultiplier;
	}

	public UnitSymbol getUnitSymbol(){
		return this.unitSymbol;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.unitSymbol", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setUnitSymbol(UnitSymbol unitSymbol){
		this.unitSymbol = unitSymbol;
	}

	public ProtectionEquipmentsVendor getVendor(){
		return this.vendor;
	}

	@FieldSetter(fieldName = "ProtectionEquipment.vendor", fieldTypeStereotype = "Enumeration", fieldStereotype = "nti")
	public void setVendor(ProtectionEquipmentsVendor vendor){
		this.vendor = vendor;
	}

	public ProtectionLibrary getProtectionLibrary(){
		return this.ProtectionLibrary;
	}

	@AssociationSetter(fieldName = "ProtectionEquipment.ProtectionLibrary", assocType = "ru.mpei.ltdb.model.CIMProfile.NTI.ProtectionLibrary", cardinality = "one")
	public void setProtectionLibrary(ProtectionLibrary ProtectionLibrary){
		this.ProtectionLibrary = ProtectionLibrary;
	}

	@JsonIgnore
	public List<CurrentTransformer> getCurrentTransformers(){
		return this.CurrentTransformers;
	}

	@AssociationSetter(fieldName = "ProtectionEquipment.CurrentTransformers", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.AuxiliaryEquipment.CurrentTransformer", cardinality = "many")
	public void setCurrentTransformers(List<CurrentTransformer> CurrentTransformers){
		this.CurrentTransformers = CurrentTransformers;
	}

	@JsonIgnore
	public List<PotentialTransformer> getPotentialTransformer(){
		return this.PotentialTransformer;
	}

	@AssociationSetter(fieldName = "ProtectionEquipment.PotentialTransformer", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.AuxiliaryEquipment.PotentialTransformer", cardinality = "many")
	public void setPotentialTransformer(List<PotentialTransformer> PotentialTransformer){
		this.PotentialTransformer = PotentialTransformer;
	}

	@JsonIgnore
	public List<ConductingEquipment> getConductingEquipments(){
		return this.ConductingEquipments;
	}

	@AssociationSetter(fieldName = "ProtectionEquipment.ConductingEquipments", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.ConductingEquipment", cardinality = "many")
	public void setConductingEquipments(List<ConductingEquipment> ConductingEquipments){
		this.ConductingEquipments = ConductingEquipments;
	}

	public ConnectivityNode getConnectivityNodeForMaxVoltage(){
		return this.ConnectivityNodeForMaxVoltage;
	}

	@AssociationSetter(fieldName = "ProtectionEquipment.ConnectivityNodeForMaxVoltage", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.ConnectivityNode", cardinality = "one")
	public void setConnectivityNodeForMaxVoltage(ConnectivityNode ConnectivityNodeForMaxVoltage){
		this.ConnectivityNodeForMaxVoltage = ConnectivityNodeForMaxVoltage;
	}

	public Terminal getTerminalInTheEndOfProtectedObject(){
		return this.TerminalInTheEndOfProtectedObject;
	}

	@AssociationSetter(fieldName = "ProtectionEquipment.TerminalInTheEndOfProtectedObject", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.Terminal", cardinality = "one")
	public void setTerminalInTheEndOfProtectedObject(Terminal TerminalInTheEndOfProtectedObject){
		this.TerminalInTheEndOfProtectedObject = TerminalInTheEndOfProtectedObject;
	}

	@JsonIgnore
	public List<Terminal> getterminalsForPowerTransformerForkLV(){
		return this.terminalsForPowerTransformerForkLV;
	}

	@AssociationSetter(fieldName = "ProtectionEquipment.terminalsForPowerTransformerForkLV", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.Terminal", cardinality = "many")
	public void setterminalsForPowerTransformerForkLV(List<Terminal> terminalsForPowerTransformerForkLV){
		this.terminalsForPowerTransformerForkLV = terminalsForPowerTransformerForkLV;
	}

	public Terminal getterminalForMaxLoadFlowCurrent(){
		return this.terminalForMaxLoadFlowCurrent;
	}

	@AssociationSetter(fieldName = "ProtectionEquipment.terminalForMaxLoadFlowCurrent", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.Terminal", cardinality = "one")
	public void setterminalForMaxLoadFlowCurrent(Terminal terminalForMaxLoadFlowCurrent){
		this.terminalForMaxLoadFlowCurrent = terminalForMaxLoadFlowCurrent;
	}

	@JsonIgnore
	public List<Terminal> getterminalsForPowerTransformerForkHV(){
		return this.terminalsForPowerTransformerForkHV;
	}

	@AssociationSetter(fieldName = "ProtectionEquipment.terminalsForPowerTransformerForkHV", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.Terminal", cardinality = "many")
	public void setterminalsForPowerTransformerForkHV(List<Terminal> terminalsForPowerTransformerForkHV){
		this.terminalsForPowerTransformerForkHV = terminalsForPowerTransformerForkHV;
	}

	public Terminal getTerminalForScCurrentInMainArea(){
		return this.TerminalForScCurrentInMainArea;
	}

	@AssociationSetter(fieldName = "ProtectionEquipment.TerminalForScCurrentInMainArea", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.Terminal", cardinality = "one")
	public void setTerminalForScCurrentInMainArea(Terminal TerminalForScCurrentInMainArea){
		this.TerminalForScCurrentInMainArea = TerminalForScCurrentInMainArea;
	}

	@JsonIgnore
	public List<Terminal> getTerminalsForACLineSegmentFork(){
		return this.TerminalsForACLineSegmentFork;
	}

	@AssociationSetter(fieldName = "ProtectionEquipment.TerminalsForACLineSegmentFork", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.Terminal", cardinality = "many")
	public void setTerminalsForACLineSegmentFork(List<Terminal> TerminalsForACLineSegmentFork){
		this.TerminalsForACLineSegmentFork = TerminalsForACLineSegmentFork;
	}

	@JsonIgnore
	public ProtectionEquipment getProtectionEquipmentForWichThisProtectionIsProtectionEquipmentSecondLevel(){
		return this.ProtectionEquipmentForWichThisProtectionIsProtectionEquipmentSecondLevel;
	}

	@AssociationSetter(fieldName = "ProtectionEquipment.ProtectionEquipmentForWichThisProtectionIsProtectionEquipmentSecondLevel", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Protection.ProtectionEquipment", cardinality = "one")
	public void setProtectionEquipmentForWichThisProtectionIsProtectionEquipmentSecondLevel(ProtectionEquipment ProtectionEquipmentForWichThisProtectionIsProtectionEquipmentSecondLevel){
		this.ProtectionEquipmentForWichThisProtectionIsProtectionEquipmentSecondLevel = ProtectionEquipmentForWichThisProtectionIsProtectionEquipmentSecondLevel;
	}

	public ProtectionEquipment getAdjacentProtectionEquipmentForSecondLevel(){
		return this.AdjacentProtectionEquipmentForSecondLevel;
	}

	@AssociationSetter(fieldName = "ProtectionEquipment.AdjacentProtectionEquipmentForSecondLevel", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Protection.ProtectionEquipment", cardinality = "one")
	public void setAdjacentProtectionEquipmentForSecondLevel(ProtectionEquipment AdjacentProtectionEquipmentForSecondLevel){
		this.AdjacentProtectionEquipmentForSecondLevel = AdjacentProtectionEquipmentForSecondLevel;
	}

	@JsonIgnore
	public List<ProtectionEquipment> getProtectionsForWichThisProtectionIsAdjacent(){
		return this.ProtectionsForWichThisProtectionIsAdjacent;
	}

	@AssociationSetter(fieldName = "ProtectionEquipment.ProtectionsForWichThisProtectionIsAdjacent", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Protection.ProtectionEquipment", cardinality = "many")
	public void setProtectionsForWichThisProtectionIsAdjacent(List<ProtectionEquipment> ProtectionsForWichThisProtectionIsAdjacent){
		this.ProtectionsForWichThisProtectionIsAdjacent = ProtectionsForWichThisProtectionIsAdjacent;
	}

	public List<ProtectionEquipment> getAdjacentProtections(){
		return this.AdjacentProtections;
	}

	@AssociationSetter(fieldName = "ProtectionEquipment.AdjacentProtections", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Protection.ProtectionEquipment", cardinality = "many")
	public void setAdjacentProtections(List<ProtectionEquipment> AdjacentProtections){
		this.AdjacentProtections = AdjacentProtections;
	}

//	@JsonIgnore
	public String getProtectedSwitches(){
		return this.ProtectedSwitches;
	}

//	@AssociationSetter(fieldName = "ProtectionEquipment.ProtectedSwitches", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Wires.ProtectedSwitch", cardinality = "many")
	@FieldSetter(fieldName = "ProtectionEquipment.ProtectedSwitches", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setProtectedSwitches(String ProtectedSwitches){
		this.ProtectedSwitches = ProtectedSwitches;
	}

	public ProtectionEquipment(){

	}

}
