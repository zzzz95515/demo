package ru.mpei.prob.model.CIMProfile.IEC61970.Base.AuxiliaryEquipment;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.ActivePower;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.CurrentFlow;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.PerCent;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Protection.ProtectionEquipment;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires.WindingConnection;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * Instrument transformer used to measure electrical qualities of the circuit 
 * that is being protected and/or monitored. Typically used as current transducer 
 * for the purpose of metering or protection. A typical secondary current 
 * rating would be 5A.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:50 MSK 2020
 */

@Entity
@Table(name = "currenttransformer")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class CurrentTransformer extends Sensor {
	/**
	 * CT accuracy classification.
	 */
	@Column(name="accuracyClass", nullable = true)
	private String accuracyClass;
	/**
	 * Percent of rated current for which the CT remains accurate within specified 
	 * limits.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="accuracyLimit_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="accuracyLimit_unit")),
		@AttributeOverride(name="value", column=@Column(name="accuracyLimit_value")),
	})
	private PerCent accuracyLimit;
	/**
	 * Power burden of the CT core.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="coreBurden_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="coreBurden_unit")),
		@AttributeOverride(name="value", column=@Column(name="coreBurden_value")),
	})
	private ActivePower coreBurden;
	/**
	 * CT classification; i.e. class 10P.
	 */
	@Column(name="ctClass", nullable = true)
	private String ctClass;
	/**
	 * Коэффициент трансформации
	 */
	@Column(name="nominalRatio", nullable = true)
	private Float nominalRatio;
	/**
	 * Первичный номинальный ток
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="primaryRatedCurrent_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="primaryRatedCurrent_unit")),
		@AttributeOverride(name="value", column=@Column(name="primaryRatedCurrent_value")),
	})
	private CurrentFlow primaryRatedCurrent;
	/**
	 * Вторичный номинальный ток
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="secondaryRatedCurrent_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="secondaryRatedCurrent_unit")),
		@AttributeOverride(name="value", column=@Column(name="secondaryRatedCurrent_value")),
	})
	private CurrentFlow secondaryRatedCurrent;
	/**
	 * Intended usage of the CT; i.e. metering, protection.
	 */
	@Column(name="usage", nullable = true)
	private String usage;
	/**
	 * Схема соединения вторичной обмотки
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "windingConnectionType")
	private WindingConnection windingConnectionType;

	/**
	 * Терминал РЗА
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "protectionequipment_mrid")
	@JoinColumn(name = "protectionequipment_projectid")
	@JoinColumn(name = "protectionequipment_synthesizedschemenumber")
	@JoinColumn(name = "protectionequipment_schemascenarionumber")
	private ProtectionEquipment ProtectionEquipment;

	public String getAccuracyClass(){
		return this.accuracyClass;
	}

	@FieldSetter(fieldName = "CurrentTransformer.accuracyClass", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setAccuracyClass(String accuracyClass){
		this.accuracyClass = accuracyClass;
	}

	public PerCent getAccuracyLimit(){
		return this.accuracyLimit;
	}

	@FieldSetter(fieldName = "CurrentTransformer.accuracyLimit", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setAccuracyLimit(PerCent accuracyLimit){
		this.accuracyLimit = accuracyLimit;
	}

	public ActivePower getCoreBurden(){
		return this.coreBurden;
	}

	@FieldSetter(fieldName = "CurrentTransformer.coreBurden", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setCoreBurden(ActivePower coreBurden){
		this.coreBurden = coreBurden;
	}

	public String getCtClass(){
		return this.ctClass;
	}

	@FieldSetter(fieldName = "CurrentTransformer.ctClass", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setCtClass(String ctClass){
		this.ctClass = ctClass;
	}

	public Float getNominalRatio(){
		return this.nominalRatio;
	}

	@FieldSetter(fieldName = "CurrentTransformer.nominalRatio", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setNominalRatio(Float nominalRatio){
		this.nominalRatio = nominalRatio;
	}

	public CurrentFlow getPrimaryRatedCurrent(){
		return this.primaryRatedCurrent;
	}

	@FieldSetter(fieldName = "CurrentTransformer.primaryRatedCurrent", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setPrimaryRatedCurrent(CurrentFlow primaryRatedCurrent){
		this.primaryRatedCurrent = primaryRatedCurrent;
	}

	public CurrentFlow getSecondaryRatedCurrent(){
		return this.secondaryRatedCurrent;
	}

	@FieldSetter(fieldName = "CurrentTransformer.secondaryRatedCurrent", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setSecondaryRatedCurrent(CurrentFlow secondaryRatedCurrent){
		this.secondaryRatedCurrent = secondaryRatedCurrent;
	}

	public String getUsage(){
		return this.usage;
	}

	@FieldSetter(fieldName = "CurrentTransformer.usage", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setUsage(String usage){
		this.usage = usage;
	}

	public WindingConnection getWindingConnectionType(){
		return this.windingConnectionType;
	}

	@FieldSetter(fieldName = "CurrentTransformer.windingConnectionType", fieldTypeStereotype = "Enumeration", fieldStereotype = "nti")
	public void setWindingConnectionType(WindingConnection windingConnectionType){
		this.windingConnectionType = windingConnectionType;
	}

	public ProtectionEquipment getProtectionEquipment(){
		return this.ProtectionEquipment;
	}

	@AssociationSetter(fieldName = "CurrentTransformer.ProtectionEquipment", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Protection.ProtectionEquipment", cardinality = "one")
	public void setProtectionEquipment(ProtectionEquipment ProtectionEquipment){
		this.ProtectionEquipment = ProtectionEquipment;
	}

	public CurrentTransformer(){

	}

}
