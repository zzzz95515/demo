package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.ConductingEquipment;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.*;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * An electrical device consisting of  two or more coupled windings, with 
 * or without a magnetic core, for introducing mutual coupling between electric 
 * circuits. Transformers can be used to control voltage and phase shift (active 
 * power flow).A power transformer may be composed of separate transformer 
 * tanks that need not be identical.A power transformer can be modeled with 
 * or without tanks and is intended for use in both balanced and unbalanced 
 * representations.   A power transformer typically has two terminals, but 
 * may have one (grounding), three or more terminals.The inherited association 
 * ConductingEquipment.BaseVoltage should not be used.  The association from 
 * TransformerEnd to BaseVoltage should be used instead.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:55 MSK 2020
 */

@Entity
@Table(name = "powertransformer")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class PowerTransformer extends ConductingEquipment {
	/**
	 * The highest operating current (Ib in the IEC 60909-0) before short circuit 
	 * (depends on network configuration and relevant reliability philosophy). 
	 * It is used for calculation of the impedance correction factor KT defined 
	 * in IEC 60909-0.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="beforeShCircuitHighestOperatingCurrent_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="beforeShCircuitHighestOperatingCurrent_unit")),
		@AttributeOverride(name="value", column=@Column(name="beforeShCircuitHighestOperatingCurrent_value")),
	})
	private CurrentFlow beforeShCircuitHighestOperatingCurrent;
	/**
	 * The highest operating voltage (Ub in the IEC 60909-0) before short circuit. 
	 * It is used for calculation of the impedance correction factor KT defined 
	 * in IEC 60909-0. This is worst case voltage on the low side winding (Section 
	 * 3.7.1 in the standard). Used to define operating conditions.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="beforeShCircuitHighestOperatingVoltage_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="beforeShCircuitHighestOperatingVoltage_unit")),
		@AttributeOverride(name="value", column=@Column(name="beforeShCircuitHighestOperatingVoltage_value")),
	})
	private Voltage beforeShCircuitHighestOperatingVoltage;
	/**
	 * The angle of power factor before short circuit (phib in the IEC 60909-0). 
	 * It is used for calculation of the impedance correction factor KT defined 
	 * in IEC 60909-0. This is the worst case power factor. Used to define operating 
	 * conditions.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="beforeShortCircuitAnglePf_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="beforeShortCircuitAnglePf_unit")),
		@AttributeOverride(name="value", column=@Column(name="beforeShortCircuitAnglePf_value")),
	})
	private AngleDegrees beforeShortCircuitAnglePf;
	/**
	 * The minimum operating voltage (uQmin in the IEC 60909-0) at the high voltage 
	 * side (Q side) of the unit transformer of the power station unit. A value 
	 * well established from long-term operating experience of the system. It 
	 * is used for calculation of the impedance correction factor KG defined in 
	 * IEC 60909-0
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="highSideMinOperatingU_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="highSideMinOperatingU_unit")),
		@AttributeOverride(name="value", column=@Column(name="highSideMinOperatingU_value")),
	})
	private Voltage highSideMinOperatingU;
	/**
	 * Ток холостого хода, в % от номинального
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="idleCurrent_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="idleCurrent_unit")),
		@AttributeOverride(name="value", column=@Column(name="idleCurrent_value")),
	})
	private PerCent idleCurrent;
	/**
	 * Потери холостого хода трех фаз ТР
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="idlePower_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="idlePower_unit")),
		@AttributeOverride(name="value", column=@Column(name="idlePower_value")),
	})
	private ActivePower idlePower;
	/**
	 * Indicates whether the machine is part of a power station unit. Used for 
	 * short circuit data exchange according to IEC 60909
	 */
	@Column(name="isPartOfGeneratorUnit", nullable = true)
	private Boolean isPartOfGeneratorUnit;
	/**
	 * It is used to define if the data (other attributes related to short circuit 
	 * data exchange) defines long term operational conditions or not. Used for 
	 * short circuit data exchange according to IEC 60909.
	 */
	@Column(name="operationalValuesConsidered", nullable = true)
	private Boolean operationalValuesConsidered;
	/**
	 * Потери при КЗ стороны ВН-НН
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="pK_HighLow_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="pK_HighLow_unit")),
		@AttributeOverride(name="value", column=@Column(name="pK_HighLow_value")),
	})
	private ActivePower pK_HighLow;
	/**
	 * Потери при КЗ стороны ВН-СН
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="pK_HighMiddle_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="pK_HighMiddle_unit")),
		@AttributeOverride(name="value", column=@Column(name="pK_HighMiddle_value")),
	})
	private ActivePower pK_HighMiddle;
	/**
	 * Потери при КЗ стороны СН-НН
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="pK_MiddleLow_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="pK_MiddleLow_unit")),
		@AttributeOverride(name="value", column=@Column(name="pK_MiddleLow_value")),
	})
	private ActivePower pK_MiddleLow;
	/**
	 * Номинальный ток ТР
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedCurrent_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedCurrent_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedCurrent_value")),
	})
	private CurrentFlow ratedCurrent;
	/**
	 * Номинальное напряжение ВН
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedHighVoltage_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedHighVoltage_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedHighVoltage_value")),
	})
	private Voltage ratedHighVoltage;
	/**
	 * Номинальное напряжение НН
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedLowVoltage_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedLowVoltage_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedLowVoltage_value")),
	})
	private Voltage ratedLowVoltage;
	/**
	 * Номинальное напряжение CН
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedMiddleVoltage_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedMiddleVoltage_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedMiddleVoltage_value")),
	})
	private Voltage ratedMiddleVoltage;
	/**
	 * Номинальная мощность ТР, МВА
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedS_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedS_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedS_value")),
	})
	private ApparentPower ratedS;
	@Enumerated(EnumType.STRING)
	@Column(name = "type")
	private PowerTransformerType type;
	/**
	 * Напряжение КЗ между обмотками ВН-НН, отнесенное к номинальной мощности 
	 * (авто)трансформатора Sном, % номи-нального напряжения
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="uK_HighLow_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="uK_HighLow_unit")),
		@AttributeOverride(name="value", column=@Column(name="uK_HighLow_value")),
	})
	private PerCent uK_HighLow;
	/**
	 * Uкз ВН-НН при минимальном положении РПН
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="uK_HighLow_max_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="uK_HighLow_max_unit")),
		@AttributeOverride(name="value", column=@Column(name="uK_HighLow_max_value")),
	})
	private PerCent uK_HighLow_max;
	/**
	 * Uкз ВН-НН при максимальном положении РПН
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="uK_HighLow_min_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="uK_HighLow_min_unit")),
		@AttributeOverride(name="value", column=@Column(name="uK_HighLow_min_value")),
	})
	private PerCent uK_HighLow_min;
	/**
	 * Напряжение КЗ между обмотками ВН-СН, отнесенное к номинальной мощности 
	 * (авто)трансформатора Sном, % номи-нального напряжения
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="uK_HighMiddle_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="uK_HighMiddle_unit")),
		@AttributeOverride(name="value", column=@Column(name="uK_HighMiddle_value")),
	})
	private PerCent uK_HighMiddle;
	/**
	 * Значение Uk В-С на крайних положениях устройств РПН (используется для пересчета 
	 * сопротивлений от номера анцапфы РПН)
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="uK_HighMiddle_max_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="uK_HighMiddle_max_unit")),
		@AttributeOverride(name="value", column=@Column(name="uK_HighMiddle_max_value")),
	})
	private PerCent uK_HighMiddle_max;
	/**
	 * Значение Uk В-С на крайних положениях устройств РПН (используется для пересчета 
	 * сопротивлений от номера анцапфы РПН)
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="uK_HighMiddle_min_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="uK_HighMiddle_min_unit")),
		@AttributeOverride(name="value", column=@Column(name="uK_HighMiddle_min_value")),
	})
	private PerCent uK_HighMiddle_min;
	/**
	 * Напряжение КЗ между обмотками СН-НН, отнесенное к номинальной мощности 
	 * (авто)трансформатора Sном, % номи-нального напряжения
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="uK_MiddleLow_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="uK_MiddleLow_unit")),
		@AttributeOverride(name="value", column=@Column(name="uK_MiddleLow_value")),
	})
	private PerCent uK_MiddleLow;
	/**
	 * Uкз ВН-НН при максимальном положении РПН
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="uK_MiddleLow_max_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="uK_MiddleLow_max_unit")),
		@AttributeOverride(name="value", column=@Column(name="uK_MiddleLow_max_value")),
	})
	private PerCent uK_MiddleLow_max;
	/**
	 * Uкз СН-НН при максимальном положении РПН
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="uK_MiddleLow_min_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="uK_MiddleLow_min_unit")),
		@AttributeOverride(name="value", column=@Column(name="uK_MiddleLow_min_value")),
	})
	private PerCent uK_MiddleLow_min;
	/**
	 * Vector group of the transformer for protective relaying, e.g., Dyn1. For 
	 * unbalanced transformers, this may not be simply determined from the constituent 
	 * winding connections and phase angle dispacements.The vectorGroup string 
	 * consists of the following components in the order listed: high voltage 
	 * winding connection, mid voltage winding connection (for three winding transformers), 
	 * phase displacement clock number from 0 to 11,  low voltage winding connection 
	 * phase displacement clock number from 0 to 11.   The winding connections 
	 * are D (delta), Y (wye), YN (wye with neutral), Z (zigzag), ZN (zigzag with 
	 * neutral), A (auto transformer). Upper case means the high voltage, lower 
	 * case mid or low. The high voltage winding always has clock postion 0 and 
	 * is not included in the vector group string.  Some examples: YNy0 (two winding 
	 * wye to wye with no phase displacement), YNd11 (two winding wye to delta 
	 * with 330 degrees phase displacement), YNyn0d5 (three winding transformer 
	 * wye with neutral high voltgage, wye with neutral mid voltgage and no phase 
	 * displacement, delta low voltage with 150 degrees displacement).Phase displacement 
	 * is defined as the angular difference between the phasors representing the 
	 * voltages between the neutral point (real or imaginary) and the corresponding 
	 * terminals of two windings, a positive sequence voltage system being applied 
	 * to the high-voltage terminals, following each other in alphabetical sequence 
	 * if they are lettered, or in numerical sequence if they are numbered: the 
	 * phasors are assumed to rotate in a counter-clockwise sense.
	 */
	@Column(name="vectorGroup", nullable = true)
	private String vectorGroup;

	/**
	 * The power transformer of this power transformer end.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "PowerTransformer")
	private List<PowerTransformerEnd> PowerTransformerEnd;

	public CurrentFlow getBeforeShCircuitHighestOperatingCurrent(){
		return this.beforeShCircuitHighestOperatingCurrent;
	}

	@FieldSetter(fieldName = "PowerTransformer.beforeShCircuitHighestOperatingCurrent", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setBeforeShCircuitHighestOperatingCurrent(CurrentFlow beforeShCircuitHighestOperatingCurrent){
		this.beforeShCircuitHighestOperatingCurrent = beforeShCircuitHighestOperatingCurrent;
	}

	public Voltage getBeforeShCircuitHighestOperatingVoltage(){
		return this.beforeShCircuitHighestOperatingVoltage;
	}

	@FieldSetter(fieldName = "PowerTransformer.beforeShCircuitHighestOperatingVoltage", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setBeforeShCircuitHighestOperatingVoltage(Voltage beforeShCircuitHighestOperatingVoltage){
		this.beforeShCircuitHighestOperatingVoltage = beforeShCircuitHighestOperatingVoltage;
	}

	public AngleDegrees getBeforeShortCircuitAnglePf(){
		return this.beforeShortCircuitAnglePf;
	}

	@FieldSetter(fieldName = "PowerTransformer.beforeShortCircuitAnglePf", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setBeforeShortCircuitAnglePf(AngleDegrees beforeShortCircuitAnglePf){
		this.beforeShortCircuitAnglePf = beforeShortCircuitAnglePf;
	}

	public Voltage getHighSideMinOperatingU(){
		return this.highSideMinOperatingU;
	}

	@FieldSetter(fieldName = "PowerTransformer.highSideMinOperatingU", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setHighSideMinOperatingU(Voltage highSideMinOperatingU){
		this.highSideMinOperatingU = highSideMinOperatingU;
	}

	public PerCent getIdleCurrent(){
		return this.idleCurrent;
	}

	@FieldSetter(fieldName = "PowerTransformer.idleCurrent", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setIdleCurrent(PerCent idleCurrent){
		this.idleCurrent = idleCurrent;
	}

	public ActivePower getIdlePower(){
		return this.idlePower;
	}

	@FieldSetter(fieldName = "PowerTransformer.idlePower", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setIdlePower(ActivePower idlePower){
		this.idlePower = idlePower;
	}

	public Boolean getIsPartOfGeneratorUnit(){
		return this.isPartOfGeneratorUnit;
	}

	@FieldSetter(fieldName = "PowerTransformer.isPartOfGeneratorUnit", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setIsPartOfGeneratorUnit(Boolean isPartOfGeneratorUnit){
		this.isPartOfGeneratorUnit = isPartOfGeneratorUnit;
	}

	public Boolean getOperationalValuesConsidered(){
		return this.operationalValuesConsidered;
	}

	@FieldSetter(fieldName = "PowerTransformer.operationalValuesConsidered", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setOperationalValuesConsidered(Boolean operationalValuesConsidered){
		this.operationalValuesConsidered = operationalValuesConsidered;
	}

	public ActivePower getPK_HighLow(){
		return this.pK_HighLow;
	}

	@FieldSetter(fieldName = "PowerTransformer.pK_HighLow", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setPK_HighLow(ActivePower pK_HighLow){
		this.pK_HighLow = pK_HighLow;
	}

	public ActivePower getPK_HighMiddle(){
		return this.pK_HighMiddle;
	}

	@FieldSetter(fieldName = "PowerTransformer.pK_HighMiddle", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setPK_HighMiddle(ActivePower pK_HighMiddle){
		this.pK_HighMiddle = pK_HighMiddle;
	}

	public ActivePower getPK_MiddleLow(){
		return this.pK_MiddleLow;
	}

	@FieldSetter(fieldName = "PowerTransformer.pK_MiddleLow", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setPK_MiddleLow(ActivePower pK_MiddleLow){
		this.pK_MiddleLow = pK_MiddleLow;
	}

	public CurrentFlow getRatedCurrent(){
		return this.ratedCurrent;
	}

	@FieldSetter(fieldName = "PowerTransformer.ratedCurrent", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setRatedCurrent(CurrentFlow ratedCurrent){
		this.ratedCurrent = ratedCurrent;
	}

	public Voltage getRatedHighVoltage(){
		return this.ratedHighVoltage;
	}

	@FieldSetter(fieldName = "PowerTransformer.ratedHighVoltage", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setRatedHighVoltage(Voltage ratedHighVoltage){
		this.ratedHighVoltage = ratedHighVoltage;
	}

	public Voltage getRatedLowVoltage(){
		return this.ratedLowVoltage;
	}

	@FieldSetter(fieldName = "PowerTransformer.ratedLowVoltage", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setRatedLowVoltage(Voltage ratedLowVoltage){
		this.ratedLowVoltage = ratedLowVoltage;
	}

	public Voltage getRatedMiddleVoltage(){
		return this.ratedMiddleVoltage;
	}

	@FieldSetter(fieldName = "PowerTransformer.ratedMiddleVoltage", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setRatedMiddleVoltage(Voltage ratedMiddleVoltage){
		this.ratedMiddleVoltage = ratedMiddleVoltage;
	}

	public ApparentPower getRatedS(){
		return this.ratedS;
	}

	@FieldSetter(fieldName = "PowerTransformer.ratedS", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setRatedS(ApparentPower ratedS){
		this.ratedS = ratedS;
	}

	public PowerTransformerType getType(){
		return this.type;
	}

	@FieldSetter(fieldName = "PowerTransformer.type", fieldTypeStereotype = "Enumeration", fieldStereotype = "nti")
	public void setType(PowerTransformerType type){
		this.type = type;
	}

	public PerCent getUK_HighLow(){
		return this.uK_HighLow;
	}

	@FieldSetter(fieldName = "PowerTransformer.uK_HighLow", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setUK_HighLow(PerCent uK_HighLow){
		this.uK_HighLow = uK_HighLow;
	}

	public PerCent getUK_HighLow_max(){
		return this.uK_HighLow_max;
	}

	@FieldSetter(fieldName = "PowerTransformer.uK_HighLow_max", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setUK_HighLow_max(PerCent uK_HighLow_max){
		this.uK_HighLow_max = uK_HighLow_max;
	}

	public PerCent getUK_HighLow_min(){
		return this.uK_HighLow_min;
	}

	@FieldSetter(fieldName = "PowerTransformer.uK_HighLow_min", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setUK_HighLow_min(PerCent uK_HighLow_min){
		this.uK_HighLow_min = uK_HighLow_min;
	}

	public PerCent getUK_HighMiddle(){
		return this.uK_HighMiddle;
	}

	@FieldSetter(fieldName = "PowerTransformer.uK_HighMiddle", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setUK_HighMiddle(PerCent uK_HighMiddle){
		this.uK_HighMiddle = uK_HighMiddle;
	}

	public PerCent getUK_HighMiddle_max(){
		return this.uK_HighMiddle_max;
	}

	@FieldSetter(fieldName = "PowerTransformer.uK_HighMiddle_max", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setUK_HighMiddle_max(PerCent uK_HighMiddle_max){
		this.uK_HighMiddle_max = uK_HighMiddle_max;
	}

	public PerCent getUK_HighMiddle_min(){
		return this.uK_HighMiddle_min;
	}

	@FieldSetter(fieldName = "PowerTransformer.uK_HighMiddle_min", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setUK_HighMiddle_min(PerCent uK_HighMiddle_min){
		this.uK_HighMiddle_min = uK_HighMiddle_min;
	}

	public PerCent getUK_MiddleLow(){
		return this.uK_MiddleLow;
	}

	@FieldSetter(fieldName = "PowerTransformer.uK_MiddleLow", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setUK_MiddleLow(PerCent uK_MiddleLow){
		this.uK_MiddleLow = uK_MiddleLow;
	}

	public PerCent getUK_MiddleLow_max(){
		return this.uK_MiddleLow_max;
	}

	@FieldSetter(fieldName = "PowerTransformer.uK_MiddleLow_max", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setUK_MiddleLow_max(PerCent uK_MiddleLow_max){
		this.uK_MiddleLow_max = uK_MiddleLow_max;
	}

	public PerCent getUK_MiddleLow_min(){
		return this.uK_MiddleLow_min;
	}

	@FieldSetter(fieldName = "PowerTransformer.uK_MiddleLow_min", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setUK_MiddleLow_min(PerCent uK_MiddleLow_min){
		this.uK_MiddleLow_min = uK_MiddleLow_min;
	}

	public String getVectorGroup(){
		return this.vectorGroup;
	}

	@FieldSetter(fieldName = "PowerTransformer.vectorGroup", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setVectorGroup(String vectorGroup){
		this.vectorGroup = vectorGroup;
	}

	@JsonIgnore
	public List<PowerTransformerEnd> getPowerTransformerEnd(){
		return this.PowerTransformerEnd;
	}

	@AssociationSetter(fieldName = "PowerTransformer.PowerTransformerEnd", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Wires.PowerTransformerEnd", cardinality = "many")
	public void setPowerTransformerEnd(List<PowerTransformerEnd> PowerTransformerEnd){
		this.PowerTransformerEnd = PowerTransformerEnd;
	}

	public PowerTransformer(){

	}

}
