package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * A non linear shunt compensator has bank or section admittance values that 
 * differs.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:55 MSK 2020
 */

@Entity
@Table(name = "nonlinearshuntcompensator")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class NonlinearShuntCompensator extends ShuntCompensator {

	/**
	 * Non-linear shunt compensator owning this point.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "NonlinearShuntCompensator")
	private List<NonlinearShuntCompensatorPoint> NonlinearShuntCompensatorPoints;

	@JsonIgnore
	public List<NonlinearShuntCompensatorPoint> getNonlinearShuntCompensatorPoints(){
		return this.NonlinearShuntCompensatorPoints;
	}

	@AssociationSetter(fieldName = "NonlinearShuntCompensator.NonlinearShuntCompensatorPoints", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Wires.NonlinearShuntCompensatorPoint", cardinality = "many")
	public void setNonlinearShuntCompensatorPoints(List<NonlinearShuntCompensatorPoint> NonlinearShuntCompensatorPoints){
		this.NonlinearShuntCompensatorPoints = NonlinearShuntCompensatorPoints;
	}

	public NonlinearShuntCompensator(){

	}

}
