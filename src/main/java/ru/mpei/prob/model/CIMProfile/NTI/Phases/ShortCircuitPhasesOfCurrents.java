package ru.mpei.prob.model.CIMProfile.NTI.Phases;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * Контейнер для данных о токах КЗ разных фаз
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:50 MSK 2020
 */

@Embeddable
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ShortCircuitPhasesOfCurrents {
	/**
	 * Однофазное КЗ
	 */
	@Embedded
	@AttributeOverrides({
		@AttributeOverride(name="a.multiplier", column=@Column(name="p1amultiplier")),
		@AttributeOverride(name="a.unit", column=@Column(name="p1aunit")),
		@AttributeOverride(name="a.value", column=@Column(name="p1avalue")),
		@AttributeOverride(name="angleA.multiplier", column=@Column(name="p1angleAmultiplier")),
		@AttributeOverride(name="angleA.unit", column=@Column(name="p1angleAunit")),
		@AttributeOverride(name="angleA.value", column=@Column(name="p1angleAvalue")),
		@AttributeOverride(name="angleB.multiplier", column=@Column(name="p1angleBmultiplier")),
		@AttributeOverride(name="angleB.unit", column=@Column(name="p1angleBunit")),
		@AttributeOverride(name="angleB.value", column=@Column(name="p1angleBvalue")),
		@AttributeOverride(name="angleC.multiplier", column=@Column(name="p1angleCmultiplier")),
		@AttributeOverride(name="angleC.unit", column=@Column(name="p1angleCunit")),
		@AttributeOverride(name="angleC.value", column=@Column(name="p1angleCvalue")),
		@AttributeOverride(name="b.multiplier", column=@Column(name="p1bmultiplier")),
		@AttributeOverride(name="b.unit", column=@Column(name="p1bunit")),
		@AttributeOverride(name="b.value", column=@Column(name="p1bvalue")),
		@AttributeOverride(name="c.multiplier", column=@Column(name="p1cmultiplier")),
		@AttributeOverride(name="c.unit", column=@Column(name="p1cunit")),
		@AttributeOverride(name="c.value", column=@Column(name="p1cvalue"))
	})
	private CurrentPhases p1;
	/**
	 * Двухфазное КЗ на землю
	 */
	@Embedded
	@AttributeOverrides({
		@AttributeOverride(name="a.multiplier", column=@Column(name="p1_1amultiplier")),
		@AttributeOverride(name="a.unit", column=@Column(name="p1_1aunit")),
		@AttributeOverride(name="a.value", column=@Column(name="p1_1avalue")),
		@AttributeOverride(name="angleA.multiplier", column=@Column(name="p1_1angleAmultiplier")),
		@AttributeOverride(name="angleA.unit", column=@Column(name="p1_1angleAunit")),
		@AttributeOverride(name="angleA.value", column=@Column(name="p1_1angleAvalue")),
		@AttributeOverride(name="angleB.multiplier", column=@Column(name="p1_1angleBmultiplier")),
		@AttributeOverride(name="angleB.unit", column=@Column(name="p1_1angleBunit")),
		@AttributeOverride(name="angleB.value", column=@Column(name="p1_1angleBvalue")),
		@AttributeOverride(name="angleC.multiplier", column=@Column(name="p1_1angleCmultiplier")),
		@AttributeOverride(name="angleC.unit", column=@Column(name="p1_1angleCunit")),
		@AttributeOverride(name="angleC.value", column=@Column(name="p1_1angleCvalue")),
		@AttributeOverride(name="b.multiplier", column=@Column(name="p1_1bmultiplier")),
		@AttributeOverride(name="b.unit", column=@Column(name="p1_1bunit")),
		@AttributeOverride(name="b.value", column=@Column(name="p1_1bvalue")),
		@AttributeOverride(name="c.multiplier", column=@Column(name="p1_1cmultiplier")),
		@AttributeOverride(name="c.unit", column=@Column(name="p1_1cunit")),
		@AttributeOverride(name="c.value", column=@Column(name="p1_1cvalue"))
	})
	private CurrentPhases p1_1;
	/**
	 * Двухфазное КЗ
	 */
	@Embedded
	@AttributeOverrides({
		@AttributeOverride(name="a.multiplier", column=@Column(name="p2amultiplier")),
		@AttributeOverride(name="a.unit", column=@Column(name="p2aunit")),
		@AttributeOverride(name="a.value", column=@Column(name="p2avalue")),
		@AttributeOverride(name="angleA.multiplier", column=@Column(name="p2angleAmultiplier")),
		@AttributeOverride(name="angleA.unit", column=@Column(name="p2angleAunit")),
		@AttributeOverride(name="angleA.value", column=@Column(name="p2angleAvalue")),
		@AttributeOverride(name="angleB.multiplier", column=@Column(name="p2angleBmultiplier")),
		@AttributeOverride(name="angleB.unit", column=@Column(name="p2angleBunit")),
		@AttributeOverride(name="angleB.value", column=@Column(name="p2angleBvalue")),
		@AttributeOverride(name="angleC.multiplier", column=@Column(name="p2angleCmultiplier")),
		@AttributeOverride(name="angleC.unit", column=@Column(name="p2angleCunit")),
		@AttributeOverride(name="angleC.value", column=@Column(name="p2angleCvalue")),
		@AttributeOverride(name="b.multiplier", column=@Column(name="p2bmultiplier")),
		@AttributeOverride(name="b.unit", column=@Column(name="p2bunit")),
		@AttributeOverride(name="b.value", column=@Column(name="p2bvalue")),
		@AttributeOverride(name="c.multiplier", column=@Column(name="p2cmultiplier")),
		@AttributeOverride(name="c.unit", column=@Column(name="p2cunit")),
		@AttributeOverride(name="c.value", column=@Column(name="p2cvalue"))
	})
	private CurrentPhases p2;
	/**
	 * Трехфазное КЗ
	 */
	@Embedded
	@AttributeOverrides({
		@AttributeOverride(name="a.multiplier", column=@Column(name="p3amultiplier")),
		@AttributeOverride(name="a.unit", column=@Column(name="p3aunit")),
		@AttributeOverride(name="a.value", column=@Column(name="p3avalue")),
		@AttributeOverride(name="angleA.multiplier", column=@Column(name="p3angleAmultiplier")),
		@AttributeOverride(name="angleA.unit", column=@Column(name="p3angleAunit")),
		@AttributeOverride(name="angleA.value", column=@Column(name="p3angleAvalue")),
		@AttributeOverride(name="angleB.multiplier", column=@Column(name="p3angleBmultiplier")),
		@AttributeOverride(name="angleB.unit", column=@Column(name="p3angleBunit")),
		@AttributeOverride(name="angleB.value", column=@Column(name="p3angleBvalue")),
		@AttributeOverride(name="angleC.multiplier", column=@Column(name="p3angleCmultiplier")),
		@AttributeOverride(name="angleC.unit", column=@Column(name="p3angleCunit")),
		@AttributeOverride(name="angleC.value", column=@Column(name="p3angleCvalue")),
		@AttributeOverride(name="b.multiplier", column=@Column(name="p3bmultiplier")),
		@AttributeOverride(name="b.unit", column=@Column(name="p3bunit")),
		@AttributeOverride(name="b.value", column=@Column(name="p3bvalue")),
		@AttributeOverride(name="c.multiplier", column=@Column(name="p3cmultiplier")),
		@AttributeOverride(name="c.unit", column=@Column(name="p3cunit")),
		@AttributeOverride(name="c.value", column=@Column(name="p3cvalue"))
	})
	private CurrentPhases p3;


	public CurrentPhases getP1(){
		return this.p1;
	}

	@FieldSetter(fieldName = "ShortCircuitPhasesOfCurrents.p1", fieldTypeStereotype = "Embeddable", fieldStereotype = "nti")
	public void setP1(CurrentPhases p1){
		this.p1 = p1;
	}

	public CurrentPhases getP1_1(){
		return this.p1_1;
	}

	@FieldSetter(fieldName = "ShortCircuitPhasesOfCurrents.p1_1", fieldTypeStereotype = "Embeddable", fieldStereotype = "nti")
	public void setP1_1(CurrentPhases p1_1){
		this.p1_1 = p1_1;
	}

	public CurrentPhases getP2(){
		return this.p2;
	}

	@FieldSetter(fieldName = "ShortCircuitPhasesOfCurrents.p2", fieldTypeStereotype = "Embeddable", fieldStereotype = "nti")
	public void setP2(CurrentPhases p2){
		this.p2 = p2;
	}

	public CurrentPhases getP3(){
		return this.p3;
	}

	@FieldSetter(fieldName = "ShortCircuitPhasesOfCurrents.p3", fieldTypeStereotype = "Embeddable", fieldStereotype = "nti")
	public void setP3(CurrentPhases p3){
		this.p3 = p3;
	}

	public ShortCircuitPhasesOfCurrents(){

	}

}
