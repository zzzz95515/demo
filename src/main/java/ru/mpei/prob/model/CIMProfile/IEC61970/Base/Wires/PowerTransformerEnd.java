package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.*;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * A PowerTransformerEnd is associated with each Terminal of a PowerTransformer.The 
 * impedance values r, r0, x, and x0 of a PowerTransformerEnd represents a 
 * star equivalent as follows1) for a two Terminal PowerTransformer the high 
 * voltage PowerTransformerEnd has non zero values on r, r0, x, and x0 while 
 * the low voltage PowerTransformerEnd has zero values for r, r0, x, and x0.2) 
 * for a three Terminal PowerTransformer the three PowerTransformerEnds represents 
 * a star equivalent with each leg in the star represented by r, r0, x, and 
 * x0 values.3) for a PowerTransformer with more than three Terminals the 
 * PowerTransformerEnd impedance values cannot be used. Instead use the TransformerMeshImpedance 
 * or split the transformer into multiple PowerTransformers.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:55 MSK 2020
 */

@Entity
@Table(name = "powertransformerend")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class PowerTransformerEnd extends TransformerEnd {
	/**
	 * Magnetizing branch susceptance (B mag).  The value can be positive or negative.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="b_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="b_unit")),
		@AttributeOverride(name="value", column=@Column(name="b_value")),
	})
	private Susceptance b;
	/**
	 * Zero sequence magnetizing branch susceptance.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="b0_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="b0_unit")),
		@AttributeOverride(name="value", column=@Column(name="b0_value")),
	})
	private Susceptance b0;
	/**
	 * Kind of connection.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "connectionKind")
	private WindingConnection connectionKind;
	/**
	 * Magnetizing branch conductance.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="g_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="g_unit")),
		@AttributeOverride(name="value", column=@Column(name="g_value")),
	})
	private Conductance g;
	/**
	 * Zero sequence magnetizing branch conductance (star-model).
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="g0_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="g0_unit")),
		@AttributeOverride(name="value", column=@Column(name="g0_value")),
	})
	private Conductance g0;
	/**
	 * Идентификатор ветви. Требуется для составления электрических матриц при 
	 * расчете КЗ с участием земли
	 */
	@Column(name="groundFaultSchemeBranchID", nullable = true)
	private Integer groundFaultSchemeBranchID;
	/**
	 * Идентификатор mRID на внутренний узел.  Атрибут нужен для поиска в nodeIndiciesMap 
	 * номера электрического узла.
	 */
	@Column(name="internalNodeID", nullable = true)
	private String internalNodeID;
	/**
	 * Номер ветви электрических матриц для расчета нормального режима.
	 */
	@Column(name="normalSchemeBranchID", nullable = true)
	private Integer normalSchemeBranchID;
	/**
	 * Terminal voltage phase angle displacement where 360 degrees are represented 
	 * with clock hours. The valid values are 0 to 11. For example, for the secondary 
	 * side end of a transformer with vector group code of 'Dyn11', specify the 
	 * connection kind as wye with neutral and specify the phase angle of the 
	 * clock as 11.  The clock value of the transformer end number specified as 
	 * 1, is assumed to be zero.  Note the transformer end number is not assumed 
	 * to be the same as the terminal sequence number.
	 */
	@Column(name="phaseAngleClock", nullable = true)
	private Integer phaseAngleClock;
	/**
	 * Идентификатор ветви в электрической матрице расчета режима КЗ
	 */
	@Column(name="posSeqSchemeBranchID", nullable = true)
	private Integer posSeqSchemeBranchID;
	/**
	 * Resistance (star-model) of the transformer end.The attribute shall be equal 
	 * or greater than zero for non-equivalent transformers.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="r_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="r_unit")),
		@AttributeOverride(name="value", column=@Column(name="r_value")),
	})
	private Resistance r;
	/**
	 * Zero sequence series resistance (star-model) of the transformer end.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="r0_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="r0_unit")),
		@AttributeOverride(name="value", column=@Column(name="r0_value")),
	})
	private Resistance r0;
	/**
	 * Normal apparent power rating.The attribute shall be a positive value. For 
	 * a two-winding transformer the values for the high and low voltage sides 
	 * shall be identical. 
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedS_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedS_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedS_value")),
	})
	private ApparentPower ratedS;
	/**
	 * Rated voltage: phase-phase for three-phase windings, and either phase-phase 
	 * or phase-neutral for single-phase windings.A high voltage side, as given 
	 * by TransformerEnd.endNumber, shall have a ratedU that is greater or equal 
	 * than ratedU for the lower voltage sides.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedU_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedU_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedU_value")),
	})
	private Voltage ratedU;
	/**
	 * Positive sequence series reactance (star-model) of the transformer end.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="x_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="x_unit")),
		@AttributeOverride(name="value", column=@Column(name="x_value")),
	})
	private Reactance x;
	/**
	 * Zero sequence series reactance of the transformer end.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="x0_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="x0_unit")),
		@AttributeOverride(name="value", column=@Column(name="x0_value")),
	})
	private Reactance x0;

	/**
	 * The ends of this power transformer.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "powertransformer_mrid")
	@JoinColumn(name = "powertransformer_projectid")
	@JoinColumn(name = "powertransformer_synthesizedschemenumber")
	@JoinColumn(name = "powertransformer_schemascenarionumber")
	private PowerTransformer PowerTransformer;

	public Susceptance getB(){
		return this.b;
	}

	@FieldSetter(fieldName = "PowerTransformerEnd.b", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setB(Susceptance b){
		this.b = b;
	}

	public Susceptance getB0(){
		return this.b0;
	}

	@FieldSetter(fieldName = "PowerTransformerEnd.b0", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setB0(Susceptance b0){
		this.b0 = b0;
	}

	public WindingConnection getConnectionKind(){
		return this.connectionKind;
	}

	@FieldSetter(fieldName = "PowerTransformerEnd.connectionKind", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setConnectionKind(WindingConnection connectionKind){
		this.connectionKind = connectionKind;
	}

	public Conductance getG(){
		return this.g;
	}

	@FieldSetter(fieldName = "PowerTransformerEnd.g", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setG(Conductance g){
		this.g = g;
	}

	public Conductance getG0(){
		return this.g0;
	}

	@FieldSetter(fieldName = "PowerTransformerEnd.g0", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setG0(Conductance g0){
		this.g0 = g0;
	}

	public Integer getGroundFaultSchemeBranchID(){
		return this.groundFaultSchemeBranchID;
	}

	@FieldSetter(fieldName = "PowerTransformerEnd.groundFaultSchemeBranchID", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setGroundFaultSchemeBranchID(Integer groundFaultSchemeBranchID){
		this.groundFaultSchemeBranchID = groundFaultSchemeBranchID;
	}

	public String getInternalNodeID(){
		return this.internalNodeID;
	}

	@FieldSetter(fieldName = "PowerTransformerEnd.internalNodeID", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setInternalNodeID(String internalNodeID){
		this.internalNodeID = internalNodeID;
	}

	public Integer getNormalSchemeBranchID(){
		return this.normalSchemeBranchID;
	}

	@FieldSetter(fieldName = "PowerTransformerEnd.normalSchemeBranchID", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setNormalSchemeBranchID(Integer normalSchemeBranchID){
		this.normalSchemeBranchID = normalSchemeBranchID;
	}

	public Integer getPhaseAngleClock(){
		return this.phaseAngleClock;
	}

	@FieldSetter(fieldName = "PowerTransformerEnd.phaseAngleClock", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setPhaseAngleClock(Integer phaseAngleClock){
		this.phaseAngleClock = phaseAngleClock;
	}

	public Integer getPosSeqSchemeBranchID(){
		return this.posSeqSchemeBranchID;
	}

	@FieldSetter(fieldName = "PowerTransformerEnd.posSeqSchemeBranchID", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setPosSeqSchemeBranchID(Integer posSeqSchemeBranchID){
		this.posSeqSchemeBranchID = posSeqSchemeBranchID;
	}

	public Resistance getR(){
		return this.r;
	}

	@FieldSetter(fieldName = "PowerTransformerEnd.r", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setR(Resistance r){
		this.r = r;
	}

	public Resistance getR0(){
		return this.r0;
	}

	@FieldSetter(fieldName = "PowerTransformerEnd.r0", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setR0(Resistance r0){
		this.r0 = r0;
	}

	public ApparentPower getRatedS(){
		return this.ratedS;
	}

	@FieldSetter(fieldName = "PowerTransformerEnd.ratedS", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setRatedS(ApparentPower ratedS){
		this.ratedS = ratedS;
	}

	public Voltage getRatedU(){
		return this.ratedU;
	}

	@FieldSetter(fieldName = "PowerTransformerEnd.ratedU", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setRatedU(Voltage ratedU){
		this.ratedU = ratedU;
	}

	public Reactance getX(){
		return this.x;
	}

	@FieldSetter(fieldName = "PowerTransformerEnd.x", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setX(Reactance x){
		this.x = x;
	}

	public Reactance getX0(){
		return this.x0;
	}

	@FieldSetter(fieldName = "PowerTransformerEnd.x0", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setX0(Reactance x0){
		this.x0 = x0;
	}

	public PowerTransformer getPowerTransformer(){
		return this.PowerTransformer;
	}

	@AssociationSetter(fieldName = "PowerTransformerEnd.PowerTransformer", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Wires.PowerTransformer", cardinality = "one")
	public void setPowerTransformer(PowerTransformer PowerTransformer){
		this.PowerTransformer = PowerTransformer;
	}

	public PowerTransformerEnd(){

	}

}
