package ru.mpei.prob.model.CIMProfile.IEC61970.Base.DiagramLayout;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.IdentifiedObject;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * Layers are typically used for grouping diagram objects according to themes 
 * and scales. Themes are used to display or hide certain information (e.g., 
 * lakes, borders), while scales are used for hiding or displaying information 
 * depending on the current zoom level (hide text when it is too small to 
 * be read, or when it exceeds the screen size). This is also called de-cluttering.CIM 
 * based graphics exchange will support an m:n relationship between diagram 
 * objects and layers. It will be the task of the importing system to convert 
 * an m:n case into an appropriate 1:n representation if the importing system 
 * does not support m:n.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:51 MSK 2020
 */

@Entity
@Table(name = "visibilitylayer")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class VisibilityLayer extends IdentifiedObject {
	/**
	 * The drawing order for this layer.  The higher the number, the later the 
	 * layer and the objects within it are rendered.
	 */
	@Column(name="drawingOrder", nullable = true)
	private Integer drawingOrder;

	/**
	 * A diagram object can be part of multiple visibility layers.
	 */
	@ManyToMany(fetch = FetchType.LAZY)
	@JoinColumn(name = "visibleobjects_mrid")
	@JoinColumn(name = "visibleobjects_projectid")
	@JoinColumn(name = "visibleobjects_synthesizedschemenumber")
	@JoinColumn(name = "visibleobjects_schemascenarionumber")
	private List<DiagramObject> VisibleObjects;

	public Integer getDrawingOrder(){
		return this.drawingOrder;
	}

	@FieldSetter(fieldName = "VisibilityLayer.drawingOrder", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setDrawingOrder(Integer drawingOrder){
		this.drawingOrder = drawingOrder;
	}

	public List<DiagramObject> getVisibleObjects(){
		return this.VisibleObjects;
	}

	@AssociationSetter(fieldName = "VisibilityLayer.VisibleObjects", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.DiagramLayout.DiagramObject", cardinality = "many")
	public void setVisibleObjects(List<DiagramObject> VisibleObjects){
		this.VisibleObjects = VisibleObjects;
	}

	public VisibilityLayer(){

	}

}
