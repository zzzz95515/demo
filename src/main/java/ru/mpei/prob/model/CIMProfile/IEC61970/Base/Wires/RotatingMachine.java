package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.ActivePower;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.ApparentPower;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.ReactivePower;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Voltage;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Generation.Production.GeneratingUnit;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Generation.Production.HydroPump;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * A rotating machine which may be used as a generator or motor.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:55 MSK 2020
 */

@Entity
@Table(name = "rotatingmachine")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class RotatingMachine extends RegulatingCondEq {
	/**
	 * Схема соединения обмоток
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "connectionKind")
	private WindingConnection connectionKind;
	/**
	 * Active power injection. Load sign convention is used, i.e. positive sign 
	 * means flow out from a node.Starting value for a steady state solution.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="p_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="p_unit")),
		@AttributeOverride(name="value", column=@Column(name="p_value")),
	})
	private ActivePower p;
	/**
	 * Reactive power injection. Load sign convention is used, i.e. positive sign 
	 * means flow out from a node.Starting value for a steady state solution.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="q_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="q_unit")),
		@AttributeOverride(name="value", column=@Column(name="q_value")),
	})
	private ReactivePower q;
	/**
	 * Power factor (nameplate data). It is primarily used for short circuit data 
	 * exchange according to IEC 60909.
	 */
	@Column(name="ratedPowerFactor", nullable = true)
	private Float ratedPowerFactor;
	/**
	 * Nameplate apparent power rating for the unit.The attribute shall have a 
	 * positive value.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedS_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedS_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedS_value")),
	})
	private ApparentPower ratedS;
	/**
	 * Rated voltage (nameplate data, Ur in IEC 60909-0). It is primarily used 
	 * for short circuit data exchange according to IEC 60909.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedU_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedU_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedU_value")),
	})
	private Voltage ratedU;

	/**
	 * A synchronous machine may operate as a generator and as such becomes a 
	 * member of a generating unit.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "generatingunit_mrid")
	@JoinColumn(name = "generatingunit_projectid")
	@JoinColumn(name = "generatingunit_synthesizedschemenumber")
	@JoinColumn(name = "generatingunit_schemascenarionumber")
	private GeneratingUnit GeneratingUnit;
	/**
	 * The synchronous machine drives the turbine which moves the water from a 
	 * low elevation to a higher elevation. The direction of machine rotation 
	 * for pumping may or may not be the same as for generating.
	 */
	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "hydropump_mrid")
	@JoinColumn(name = "hydropump_projectid")
	@JoinColumn(name = "hydropump_synthesizedschemenumber")
	@JoinColumn(name = "hydropump_schemascenarionumber")
	private HydroPump HydroPump;

	public WindingConnection getConnectionKind(){
		return this.connectionKind;
	}

	@FieldSetter(fieldName = "RotatingMachine.connectionKind", fieldTypeStereotype = "Enumeration", fieldStereotype = "nti")
	public void setConnectionKind(WindingConnection connectionKind){
		this.connectionKind = connectionKind;
	}

	public ActivePower getP(){
		return this.p;
	}

	@FieldSetter(fieldName = "RotatingMachine.p", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setP(ActivePower p){
		this.p = p;
	}

	public ReactivePower getQ(){
		return this.q;
	}

	@FieldSetter(fieldName = "RotatingMachine.q", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setQ(ReactivePower q){
		this.q = q;
	}

	public Float getRatedPowerFactor(){
		return this.ratedPowerFactor;
	}

	@FieldSetter(fieldName = "RotatingMachine.ratedPowerFactor", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setRatedPowerFactor(Float ratedPowerFactor){
		this.ratedPowerFactor = ratedPowerFactor;
	}

	public ApparentPower getRatedS(){
		return this.ratedS;
	}

	@FieldSetter(fieldName = "RotatingMachine.ratedS", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setRatedS(ApparentPower ratedS){
		this.ratedS = ratedS;
	}

	public Voltage getRatedU(){
		return this.ratedU;
	}

	@FieldSetter(fieldName = "RotatingMachine.ratedU", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setRatedU(Voltage ratedU){
		this.ratedU = ratedU;
	}

	public GeneratingUnit getGeneratingUnit(){
		return this.GeneratingUnit;
	}

	@AssociationSetter(fieldName = "RotatingMachine.GeneratingUnit", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Generation.Production.GeneratingUnit", cardinality = "one")
	public void setGeneratingUnit(GeneratingUnit GeneratingUnit){
		this.GeneratingUnit = GeneratingUnit;
	}

	public HydroPump getHydroPump(){
		return this.HydroPump;
	}

	@AssociationSetter(fieldName = "RotatingMachine.HydroPump", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Generation.Production.HydroPump", cardinality = "one")
	public void setHydroPump(HydroPump HydroPump){
		this.HydroPump = HydroPump;
	}

	public RotatingMachine(){

	}

}
