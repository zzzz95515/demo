package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * Type of name. Possible values for attribute 'name' are implementation dependent 
 * but standard profiles may specify types. An enterprise may have multiple 
 * IT systems each having its own local name for the same object, e.g. a planning 
 * system may have different names from an EMS. An object may also have different 
 * names within the same IT system, e.g. localName as defined in CIM version 
 * 14. The definition from CIM14 is:The localName is a human readable name 
 * of the object. It is a free text name local to a node in a naming hierarchy 
 * similar to a file directory structure. A power system related naming hierarchy 
 * may be: Substation, VoltageLevel, Equipment etc. Children of the same parent 
 * in such a hierarchy have names that typically are unique among them.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:50 MSK 2020
 */

@Entity
@Table(name = "nametype")
@JsonInclude(JsonInclude.Include.NON_NULL)
// surrogate inheritance
public class NameType extends IdentifiedObject{
	/**
	 * Description of the name type.
	 */
	@Column(name="description", nullable = true)
	private String description;
	/**
	 * Name of the name type.
	 */
	@Column(name="name", nullable = true)
	private String name;

	/**
	 * Type of this name.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "NameType")
	private List<Name> Names;

	public String getDescription(){
		return this.description;
	}

	@FieldSetter(fieldName = "NameType.description", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setDescription(String description){
		this.description = description;
	}

	public String getName(){
		return this.name;
	}

	@FieldSetter(fieldName = "NameType.name", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setName(String name){
		this.name = name;
	}

	@JsonIgnore
	public List<Name> getNames(){
		return this.Names;
	}

	@AssociationSetter(fieldName = "NameType.Names", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.Name", cardinality = "many")
	public void setNames(List<Name> Names){
		this.Names = Names;
	}

	public NameType(){

	}

}
