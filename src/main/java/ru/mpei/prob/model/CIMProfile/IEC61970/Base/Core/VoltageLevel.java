package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Voltage;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * A collection of equipment at one common system voltage forming a switchgear. 
 * The equipment typically consist of breakers, busbars, instrumentation, 
 * control, regulation and protection devices as well as assemblies of all 
 * these.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:50 MSK 2020
 */

@Entity
@Table(name = "voltagelevel")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class VoltageLevel extends EquipmentContainer {
	/**
	 * The bus bar's high voltage limit
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="highVoltageLimit_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="highVoltageLimit_unit")),
		@AttributeOverride(name="value", column=@Column(name="highVoltageLimit_value")),
	})
	private Voltage highVoltageLimit;
	/**
	 * The bus bar's low voltage limit
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="lowVoltageLimit_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="lowVoltageLimit_unit")),
		@AttributeOverride(name="value", column=@Column(name="lowVoltageLimit_value")),
	})
	private Voltage lowVoltageLimit;

	/**
	 * The voltage levels having this base voltage.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "basevoltage_mrid")
	@JoinColumn(name = "basevoltage_projectid")
	@JoinColumn(name = "basevoltage_synthesizedschemenumber")
	@JoinColumn(name = "basevoltage_schemascenarionumber")
	private BaseVoltage BaseVoltage;
	/**
	 * The voltage level containing this bay.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "VoltageLevel")
	private List<Bay> Bays;
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "substation_mrid")
	@JoinColumn(name = "substation_projectid")
	@JoinColumn(name = "substation_synthesizedschemenumber")
	@JoinColumn(name = "substation_schemascenarionumber")
	private Substation Substation;

	public Voltage getHighVoltageLimit(){
		return this.highVoltageLimit;
	}

	@FieldSetter(fieldName = "VoltageLevel.highVoltageLimit", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setHighVoltageLimit(Voltage highVoltageLimit){
		this.highVoltageLimit = highVoltageLimit;
	}

	public Voltage getLowVoltageLimit(){
		return this.lowVoltageLimit;
	}

	@FieldSetter(fieldName = "VoltageLevel.lowVoltageLimit", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setLowVoltageLimit(Voltage lowVoltageLimit){
		this.lowVoltageLimit = lowVoltageLimit;
	}

	public BaseVoltage getBaseVoltage(){
		return this.BaseVoltage;
	}

	@AssociationSetter(fieldName = "VoltageLevel.BaseVoltage", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.BaseVoltage", cardinality = "one")
	public void setBaseVoltage(BaseVoltage BaseVoltage){
		this.BaseVoltage = BaseVoltage;
	}

	@JsonIgnore
	public List<Bay> getBays(){
		return this.Bays;
	}

	@AssociationSetter(fieldName = "VoltageLevel.Bays", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.Bay", cardinality = "many")
	public void setBays(List<Bay> Bays){
		this.Bays = Bays;
	}

	public Substation getSubstation(){
		return this.Substation;
	}

	@AssociationSetter(fieldName = "VoltageLevel.Substation", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.Substation", cardinality = "one")
	public void setSubstation(Substation Substation){
		this.Substation = Substation;
	}

	public VoltageLevel(){

	}

}
