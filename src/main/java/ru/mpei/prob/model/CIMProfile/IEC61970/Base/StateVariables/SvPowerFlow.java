package ru.mpei.prob.model.CIMProfile.IEC61970.Base.StateVariables;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.Terminal;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.ActivePower;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.AngleDegrees;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.CurrentFlow;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.ReactivePower;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Faults.EquipmentFault;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Faults.Fault;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * State variable for power flow. Load convention is used for flow direction. 
 * This means flow out from the TopologicalNode into the equipment is positive.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:54 MSK 2020
 */

@Entity
@Table(name = "svpowerflow")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class SvPowerFlow extends StateVariable {
	/**
	 * Значение суммы последовательностей
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="angle_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="angle_unit")),
		@AttributeOverride(name="value", column=@Column(name="angle_value")),
	})
	private AngleDegrees angle;
	/**
	 * Угол тока обратной последовательности
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="angleNegativeSeq_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="angleNegativeSeq_unit")),
		@AttributeOverride(name="value", column=@Column(name="angleNegativeSeq_value")),
	})
	private AngleDegrees angleNegativeSeq;
	/**
	 * Угол тока прямой последовательности
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="anglePositiveSeq_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="anglePositiveSeq_unit")),
		@AttributeOverride(name="value", column=@Column(name="anglePositiveSeq_value")),
	})
	private AngleDegrees anglePositiveSeq;
	/**
	 * Угол тока нулевой последовательности
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="angleZeroSeq_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="angleZeroSeq_unit")),
		@AttributeOverride(name="value", column=@Column(name="angleZeroSeq_value")),
	})
	private AngleDegrees angleZeroSeq;
	/**
	 * Значение суммы трех последовательностей
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="current_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="current_unit")),
		@AttributeOverride(name="value", column=@Column(name="current_value")),
	})
	private CurrentFlow current;
	/**
	 * Значение тока обратной последовательности
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="currentNegativeSeq_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="currentNegativeSeq_unit")),
		@AttributeOverride(name="value", column=@Column(name="currentNegativeSeq_value")),
	})
	private CurrentFlow currentNegativeSeq;
	/**
	 * Значение тока прямой последовательности
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="currentPositiveSeq_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="currentPositiveSeq_unit")),
		@AttributeOverride(name="value", column=@Column(name="currentPositiveSeq_value")),
	})
	private CurrentFlow currentPositiveSeq;
	/**
	 * Значение тока нулевой последовательности
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="currentZeroSeq_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="currentZeroSeq_unit")),
		@AttributeOverride(name="value", column=@Column(name="currentZeroSeq_value")),
	})
	private CurrentFlow currentZeroSeq;
	/**
	 * The active power flow. Load sign convention is used, i.e. positive sign 
	 * means flow out from a TopologicalNode (bus) into the conducting equipment.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="p_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="p_unit")),
		@AttributeOverride(name="value", column=@Column(name="p_value")),
	})
	private ActivePower p;
	/**
	 * The reactive power flow. Load sign convention is used, i.e. positive sign 
	 * means flow out from a TopologicalNode (bus) into the conducting equipment.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="q_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="q_unit")),
		@AttributeOverride(name="value", column=@Column(name="q_value")),
	})
	private ReactivePower q;

	/**
	 * Терминал, для которого было посчитано значение SvPowerFlow
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "terminalforresult_mrid")
	@JoinColumn(name = "terminalforresult_projectid")
	@JoinColumn(name = "terminalforresult_synthesizedschemenumber")
	@JoinColumn(name = "terminalforresult_schemascenarionumber")
	private Terminal TerminalForResult;
	/**
	 * The power flow state variable associated with the terminal.
	 */
	@OneToOne(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "SvPowerFlow")
	private Terminal Terminal;
	/**
	 * Повреждение, при котором было рассчитано значение мощности и тока
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "equipmentfault_mrid")
	@JoinColumn(name = "equipmentfault_projectid")
	@JoinColumn(name = "equipmentfault_synthesizedschemenumber")
	@JoinColumn(name = "equipmentfault_schemascenarionumber")
	private EquipmentFault EquipmentFault;
	/**
	 * Повреждение, для которого были посчитаны значения токов и мощностей
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "fault_mrid")
	@JoinColumn(name = "fault_projectid")
	@JoinColumn(name = "fault_synthesizedschemenumber")
	@JoinColumn(name = "fault_schemascenarionumber")
	private Fault Fault;

	public AngleDegrees getAngle(){
		return this.angle;
	}

	@FieldSetter(fieldName = "SvPowerFlow.angle", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setAngle(AngleDegrees angle){
		this.angle = angle;
	}

	public AngleDegrees getAngleNegativeSeq(){
		return this.angleNegativeSeq;
	}

	@FieldSetter(fieldName = "SvPowerFlow.angleNegativeSeq", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setAngleNegativeSeq(AngleDegrees angleNegativeSeq){
		this.angleNegativeSeq = angleNegativeSeq;
	}

	public AngleDegrees getAnglePositiveSeq(){
		return this.anglePositiveSeq;
	}

	@FieldSetter(fieldName = "SvPowerFlow.anglePositiveSeq", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setAnglePositiveSeq(AngleDegrees anglePositiveSeq){
		this.anglePositiveSeq = anglePositiveSeq;
	}

	public AngleDegrees getAngleZeroSeq(){
		return this.angleZeroSeq;
	}

	@FieldSetter(fieldName = "SvPowerFlow.angleZeroSeq", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setAngleZeroSeq(AngleDegrees angleZeroSeq){
		this.angleZeroSeq = angleZeroSeq;
	}

	public CurrentFlow getCurrent(){
		return this.current;
	}

	@FieldSetter(fieldName = "SvPowerFlow.current", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrent(CurrentFlow current){
		this.current = current;
	}

	public CurrentFlow getCurrentNegativeSeq(){
		return this.currentNegativeSeq;
	}

	@FieldSetter(fieldName = "SvPowerFlow.currentNegativeSeq", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrentNegativeSeq(CurrentFlow currentNegativeSeq){
		this.currentNegativeSeq = currentNegativeSeq;
	}

	public CurrentFlow getCurrentPositiveSeq(){
		return this.currentPositiveSeq;
	}

	@FieldSetter(fieldName = "SvPowerFlow.currentPositiveSeq", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrentPositiveSeq(CurrentFlow currentPositiveSeq){
		this.currentPositiveSeq = currentPositiveSeq;
	}

	public CurrentFlow getCurrentZeroSeq(){
		return this.currentZeroSeq;
	}

	@FieldSetter(fieldName = "SvPowerFlow.currentZeroSeq", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrentZeroSeq(CurrentFlow currentZeroSeq){
		this.currentZeroSeq = currentZeroSeq;
	}

	public ActivePower getP(){
		return this.p;
	}

	@FieldSetter(fieldName = "SvPowerFlow.p", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setP(ActivePower p){
		this.p = p;
	}

	public ReactivePower getQ(){
		return this.q;
	}

	@FieldSetter(fieldName = "SvPowerFlow.q", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setQ(ReactivePower q){
		this.q = q;
	}

	public Terminal getTerminalForResult(){
		return this.TerminalForResult;
	}

	@AssociationSetter(fieldName = "SvPowerFlow.TerminalForResult", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.Terminal", cardinality = "one")
	public void setTerminalForResult(Terminal TerminalForResult){
		this.TerminalForResult = TerminalForResult;
	}

	@JsonIgnore
	public Terminal getTerminal(){
		return this.Terminal;
	}

	@AssociationSetter(fieldName = "SvPowerFlow.Terminal", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.Terminal", cardinality = "one")
	public void setTerminal(Terminal Terminal){
		this.Terminal = Terminal;
	}

	public EquipmentFault getEquipmentFault(){
		return this.EquipmentFault;
	}

	@AssociationSetter(fieldName = "SvPowerFlow.EquipmentFault", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Faults.EquipmentFault", cardinality = "one")
	public void setEquipmentFault(EquipmentFault EquipmentFault){
		this.EquipmentFault = EquipmentFault;
	}

	public Fault getFault(){
		return this.Fault;
	}

	@AssociationSetter(fieldName = "SvPowerFlow.Fault", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Faults.Fault", cardinality = "one")
	public void setFault(Fault Fault){
		this.Fault = Fault;
	}

	public SvPowerFlow(){

	}

}
