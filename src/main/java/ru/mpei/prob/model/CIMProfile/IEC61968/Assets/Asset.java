package ru.mpei.prob.model.CIMProfile.IEC61968.Assets;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61968.Common.ElectronicAddress;
import ru.mpei.prob.model.CIMProfile.IEC61968.Common.Location;
import ru.mpei.prob.model.CIMProfile.IEC61968.Common.Status;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.IdentifiedObject;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.PowerSystemResource;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Money;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.PerCent;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * Tangible resource of the utility, including power system equipment, various 
 * end devices, cabinets, buildings, etc. For electrical network equipment, 
 * the role of the asset is defined through PowerSystemResource and its subclasses, 
 * defined mainly in the Wires model (refer to IEC61970-301 and model package 
 * IEC61970::Wires). Asset description places emphasis on the physical characteristics 
 * of the equipment fulfilling that role.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:50 MSK 2020
 */

@Entity
@Table(name = "asset")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Asset extends IdentifiedObject {
	/**
	 * Information on acceptance test.
	 */
	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "acceptancetest_mrid")
	@JoinColumn(name = "acceptancetest_projectid")
	@JoinColumn(name = "acceptancetest_synthesizedschemenumber")
	@JoinColumn(name = "acceptancetest_schemascenarionumber")
	private AcceptanceTest acceptanceTest;
	/**
	 * True if asset is considered critical for some reason (for example, a pole 
	 * with critical attachments).
	 */
	@Column(name="critical", nullable = true)
	private Boolean critical;
	/**
	 * Electronic address.
	 */
	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "electronicaddress_mrid")
	@JoinColumn(name = "electronicaddress_projectid")
	@JoinColumn(name = "electronicaddress_synthesizedschemenumber")
	@JoinColumn(name = "electronicaddress_schemascenarionumber")
	private ElectronicAddress electronicAddress;
	/**
	 * Condition of asset in inventory or at time of installation. Examples include 
	 * new, rebuilt, overhaul required, other. Refer to inspection data for information 
	 * on the most current condition of the asset.
	 */
	@Column(name="initialCondition", nullable = true)
	private String initialCondition;
	/**
	 * Whenever an asset is reconditioned, percentage of expected life for the 
	 * asset when it was new; zero for new devices.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="initialLossOfLife_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="initialLossOfLife_unit")),
		@AttributeOverride(name="value", column=@Column(name="initialLossOfLife_value")),
	})
	private PerCent initialLossOfLife;
	/**
	 * Lifecycle dates for this asset.
	 */
	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "lifecycle_mrid")
	@JoinColumn(name = "lifecycle_projectid")
	@JoinColumn(name = "lifecycle_synthesizedschemenumber")
	@JoinColumn(name = "lifecycle_schemascenarionumber")
	private LifecycleDate lifecycle;
	/**
	 * Lot number for this asset. Even for the same model and version number, 
	 * many assets are manufactured in lots.
	 */
	@Column(name="lotNumber", nullable = true)
	private String lotNumber;
	/**
	 * Purchase price of asset.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="purchasePrice_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="purchasePrice_unit")),
		@AttributeOverride(name="value", column=@Column(name="purchasePrice_value")),
	})
	private Money purchasePrice;
	/**
	 * Serial number of this asset.
	 */
	@Column(name="serialNumber", nullable = true)
	private String serialNumber;
	/**
	 * Status of this asset.
	 */
	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "status_mrid")
	@JoinColumn(name = "status_projectid")
	@JoinColumn(name = "status_synthesizedschemenumber")
	@JoinColumn(name = "status_schemascenarionumber")
	private Status status;
	/**
	 * Utility-specific classification of Asset and its subtypes, according to 
	 * their corporate standards, practices, and existing IT systems (e.g., for 
	 * management of assets, maintenance, work, outage, customers, etc.).
	 */
	@Column(name="type", nullable = true)
	private String type;
	/**
	 * Uniquely tracked commodity (UTC) number.
	 */
	@Column(name="utcNumber", nullable = true)
	private String utcNumber;

	/**
	 * All assets at this location.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "location_mrid")
	@JoinColumn(name = "location_projectid")
	@JoinColumn(name = "location_synthesizedschemenumber")
	@JoinColumn(name = "location_schemascenarionumber")
	private Location Location;
	/**
	 * All assets represented by this power system resource. For example, multiple 
	 * conductor assets are electrically modelled as a single AC line segment.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "Assets")
	private List<PowerSystemResource> PowerSystemResources;

	public AcceptanceTest getAcceptanceTest(){
		return this.acceptanceTest;
	}

	@CompoundFieldSetter(fieldName = "Asset.acceptanceTest", fieldType = "ru.mpei.ltdb.model.CIMProfile.IEC61968.Assets.AcceptanceTest")
	public void setAcceptanceTest(AcceptanceTest acceptanceTest){
		this.acceptanceTest = acceptanceTest;
	}

	public Boolean getCritical(){
		return this.critical;
	}

	@FieldSetter(fieldName = "Asset.critical", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setCritical(Boolean critical){
		this.critical = critical;
	}

	public ElectronicAddress getElectronicAddress(){
		return this.electronicAddress;
	}

	@CompoundFieldSetter(fieldName = "Asset.electronicAddress", fieldType = "ru.mpei.ltdb.model.CIMProfile.IEC61968.Common.ElectronicAddress")
	public void setElectronicAddress(ElectronicAddress electronicAddress){
		this.electronicAddress = electronicAddress;
	}

	public String getInitialCondition(){
		return this.initialCondition;
	}

	@FieldSetter(fieldName = "Asset.initialCondition", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setInitialCondition(String initialCondition){
		this.initialCondition = initialCondition;
	}

	public PerCent getInitialLossOfLife(){
		return this.initialLossOfLife;
	}

	@FieldSetter(fieldName = "Asset.initialLossOfLife", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setInitialLossOfLife(PerCent initialLossOfLife){
		this.initialLossOfLife = initialLossOfLife;
	}

	public LifecycleDate getLifecycle(){
		return this.lifecycle;
	}

	@CompoundFieldSetter(fieldName = "Asset.lifecycle", fieldType = "ru.mpei.ltdb.model.CIMProfile.IEC61968.Assets.LifecycleDate")
	public void setLifecycle(LifecycleDate lifecycle){
		this.lifecycle = lifecycle;
	}

	public String getLotNumber(){
		return this.lotNumber;
	}

	@FieldSetter(fieldName = "Asset.lotNumber", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setLotNumber(String lotNumber){
		this.lotNumber = lotNumber;
	}

	public Money getPurchasePrice(){
		return this.purchasePrice;
	}

	@FieldSetter(fieldName = "Asset.purchasePrice", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setPurchasePrice(Money purchasePrice){
		this.purchasePrice = purchasePrice;
	}

	public String getSerialNumber(){
		return this.serialNumber;
	}

	@FieldSetter(fieldName = "Asset.serialNumber", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setSerialNumber(String serialNumber){
		this.serialNumber = serialNumber;
	}

	public Status getStatus(){
		return this.status;
	}

	@CompoundFieldSetter(fieldName = "Asset.status", fieldType = "ru.mpei.ltdb.model.CIMProfile.IEC61968.Common.Status")
	public void setStatus(Status status){
		this.status = status;
	}

	public String getType(){
		return this.type;
	}

	@FieldSetter(fieldName = "Asset.type", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setType(String type){
		this.type = type;
	}

	public String getUtcNumber(){
		return this.utcNumber;
	}

	@FieldSetter(fieldName = "Asset.utcNumber", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setUtcNumber(String utcNumber){
		this.utcNumber = utcNumber;
	}

	public Location getLocation(){
		return this.Location;
	}

	@AssociationSetter(fieldName = "Asset.Location", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61968.Common.Location", cardinality = "one")
	public void setLocation(Location Location){
		this.Location = Location;
	}

	@JsonIgnore
	public List<PowerSystemResource> getPowerSystemResources(){
		return this.PowerSystemResources;
	}

	@AssociationSetter(fieldName = "Asset.PowerSystemResources", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.PowerSystemResource", cardinality = "many")
	public void setPowerSystemResources(List<PowerSystemResource> PowerSystemResources){
		this.PowerSystemResources = PowerSystemResources;
	}

	public Asset(){

	}

}
