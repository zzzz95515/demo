package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Reactance;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.ReactivePower;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Voltage;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.VoltagePerReactivePower;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * A facility for providing variable and controllable shunt reactive power. 
 * The SVC typically consists of a stepdown transformer, filter, thyristor-controlled 
 * reactor, and thyristor-switched capacitor arms.The SVC may operate in fixed 
 * MVar output mode or in voltage control mode. When in voltage control mode, 
 * the output of the SVC will be proportional to the deviation of voltage 
 * at the controlled bus from the voltage setpoint.  The SVC characteristic 
 * slope defines the proportion.  If the voltage at the controlled bus is 
 * equal to the voltage setpoint, the SVC MVar output is zero.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:56 MSK 2020
 */

@Entity
@Table(name = "staticvarcompensator")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class StaticVarCompensator extends RegulatingCondEq {
	/**
	 * Maximum available capacitive reactance.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="capacitiveRating_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="capacitiveRating_unit")),
		@AttributeOverride(name="value", column=@Column(name="capacitiveRating_value")),
	})
	private Reactance capacitiveRating;
	/**
	 * Maximum available inductive reactance.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="inductiveRating_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="inductiveRating_unit")),
		@AttributeOverride(name="value", column=@Column(name="inductiveRating_value")),
	})
	private Reactance inductiveRating;
	/**
	 * Reactive power injection. Load sign convention is used, i.e. positive sign 
	 * means flow out from a node.Starting value for a steady state solution.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="q_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="q_unit")),
		@AttributeOverride(name="value", column=@Column(name="q_value")),
	})
	private ReactivePower q;
	/**
	 * The characteristics slope of an SVC defines how the reactive power output 
	 * changes in proportion to the difference between the regulated bus voltage 
	 * and the voltage setpoint.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="denominatorMultiplier", column=@Column(name="slope_denominatorMultiplier")),
		@AttributeOverride(name="denominatorUnit", column=@Column(name="slope_denominatorUnit")),
		@AttributeOverride(name="multiplier", column=@Column(name="slope_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="slope_unit")),
		@AttributeOverride(name="value", column=@Column(name="slope_value")),
	})
	private VoltagePerReactivePower slope;
	/**
	 * SVC control mode.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "sVCControlMode")
	private SVCControlMode sVCControlMode;
	/**
	 * The reactive power output of the SVC is proportional to the difference 
	 * between the voltage at the regulated bus and the voltage setpoint.  When 
	 * the regulated bus voltage is equal to the voltage setpoint, the reactive 
	 * power output is zero.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="voltageSetPoint_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="voltageSetPoint_unit")),
		@AttributeOverride(name="value", column=@Column(name="voltageSetPoint_value")),
	})
	private Voltage voltageSetPoint;


	public Reactance getCapacitiveRating(){
		return this.capacitiveRating;
	}

	@FieldSetter(fieldName = "StaticVarCompensator.capacitiveRating", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setCapacitiveRating(Reactance capacitiveRating){
		this.capacitiveRating = capacitiveRating;
	}

	public Reactance getInductiveRating(){
		return this.inductiveRating;
	}

	@FieldSetter(fieldName = "StaticVarCompensator.inductiveRating", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setInductiveRating(Reactance inductiveRating){
		this.inductiveRating = inductiveRating;
	}

	public ReactivePower getQ(){
		return this.q;
	}

	@FieldSetter(fieldName = "StaticVarCompensator.q", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setQ(ReactivePower q){
		this.q = q;
	}

	public VoltagePerReactivePower getSlope(){
		return this.slope;
	}

	@FieldSetter(fieldName = "StaticVarCompensator.slope", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setSlope(VoltagePerReactivePower slope){
		this.slope = slope;
	}

	public SVCControlMode getSVCControlMode(){
		return this.sVCControlMode;
	}

	@FieldSetter(fieldName = "StaticVarCompensator.sVCControlMode", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setSVCControlMode(SVCControlMode sVCControlMode){
		this.sVCControlMode = sVCControlMode;
	}

	public Voltage getVoltageSetPoint(){
		return this.voltageSetPoint;
	}

	@FieldSetter(fieldName = "StaticVarCompensator.voltageSetPoint", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setVoltageSetPoint(Voltage voltageSetPoint){
		this.voltageSetPoint = voltageSetPoint;
	}

	public StaticVarCompensator(){

	}

}
