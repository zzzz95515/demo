package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.ConductingEquipment;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.Substation;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.ActivePower;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.PerCent;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.ReactivePower;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.LoadModel.LoadResponseCharacteristic;
import ru.mpei.prob.model.CIMProfile.NTI.ConsumersCluster;
import ru.mpei.prob.model.CIMProfile.NTI.ConsumersVoltageCluster;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * Generic user of energy - a  point of consumption on the power system model.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:54 MSK 2020
 */

@Entity
@Table(name = "energyconsumer")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class EnergyConsumer extends ConductingEquipment {
	/**
	 * Расчетное значение активной мощности нагрузки
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="actualP_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="actualP_unit")),
			@AttributeOverride(name="value", column=@Column(name="actualP_value")),
	})
	private ActivePower actualP;

	public ActivePower getActualP(){
		return this.actualP;
	}

	@FieldSetter(fieldName = "EnergyConsumer.actualP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setActualP(ActivePower actualP){
		this.actualP = actualP;
	}

	/**
	 * Расчетное значение реактивной мощности нагрузки
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="actualQ_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="actualQ_unit")),
			@AttributeOverride(name="value", column=@Column(name="actualQ_value")),
	})
	private ReactivePower actualQ;

	public ReactivePower getActualQ(){
		return this.actualQ;
	}

	@FieldSetter(fieldName = "EnergyConsumer.actualQ", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setActualQ(ReactivePower actualQ){
		this.actualQ = actualQ;
	}

	/**
	 * Тариф на электроэнергию
	 */
	@Column(name="rate", nullable = true)
	private Float rate;
	/**
	 * Метка кластера, присваиваемая алгоритмом DBSCAN
	 */
	@Column(name="clusterLabel", nullable = true)
	private Integer clusterLabel;
	/**
	 * Number of individual customers represented by this demand.
	 */
	@Column(name="customerCount", nullable = true)
	private Integer customerCount;
	/**
	 * Used for Yn and Zn connections. True if the neutral is solidly grounded.
	 */
	@Column(name="grounded", nullable = true)
	private Boolean grounded;
	/**
	 * Является ли потребитель выбросом в отношении кластеров потребителей, объединенных 
	 * по географической близости
	 */
	@Column(name="isOutLier", nullable = true)
	private Boolean isOutLier;
	/**
	 * Нужен ли трансформатор для подключения потребителя к подстанции?
	 */
	@Column(name="isTransformerNeedToConnectToSubstation", nullable = true)
	private Boolean isTransformerNeedToConnectToSubstation;
	/**
	 * Active power of the load. Load sign convention is used, i.e. positive sign 
	 * means flow out from a node.For voltage dependent loads the value is at 
	 * rated voltage.Starting value for a steady state solution.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="p_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="p_unit")),
		@AttributeOverride(name="value", column=@Column(name="p_value")),
	})
	private ActivePower p;
	/**
	 * Active power of the load that is a fixed quantity. Load sign convention 
	 * is used, i.e. positive sign means flow out from a node.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="pfixed_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="pfixed_unit")),
		@AttributeOverride(name="value", column=@Column(name="pfixed_value")),
	})
	private ActivePower pfixed;
	/**
	 * Fixed active power as per cent of load group fixed active power. Load sign 
	 * convention is used, i.e. positive sign means flow out from a node.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="pfixedPct_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="pfixedPct_unit")),
		@AttributeOverride(name="value", column=@Column(name="pfixedPct_value")),
	})
	private PerCent pfixedPct;
	/**
	 * The type of phase connection, such as wye or delta.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "phaseConnection")
	private PhaseShuntConnectionKind phaseConnection;
	/**
	 * Reactive power of the load. Load sign convention is used, i.e. positive 
	 * sign means flow out from a node.For voltage dependent loads the value is 
	 * at rated voltage.Starting value for a steady state solution.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="q_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="q_unit")),
		@AttributeOverride(name="value", column=@Column(name="q_value")),
	})
	private ReactivePower q;
	/**
	 * Reactive power of the load that is a fixed quantity. Load sign convention 
	 * is used, i.e. positive sign means flow out from a node.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="qfixed_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="qfixed_unit")),
		@AttributeOverride(name="value", column=@Column(name="qfixed_value")),
	})
	private ReactivePower qfixed;
	/**
	 * Fixed reactive power as per cent of load group fixed reactive power. Load 
	 * sign convention is used, i.e. positive sign means flow out from a node.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="qfixedPct_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="qfixedPct_unit")),
		@AttributeOverride(name="value", column=@Column(name="qfixedPct_value")),
	})
	private PerCent qfixedPct;
	/**
	 * Значение напряжения в кВ подстанции, установленной в атрибуте substationFeedingFrom, 
	 * к которому может быть подключен потребитель через трансформатор (или без 
	 * трансформатора, если напряжения совпадают)
	 */
	@Column(name="substationPreferredVoltage", nullable = true)
	private Float substationPreferredVoltage;

	/**
	 * Кластер, объединяющий потребителей по географической близости
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cluster_mrid")
	@JoinColumn(name = "cluster_projectid")
	@JoinColumn(name = "cluster_synthesizedschemenumber")
	@JoinColumn(name = "cluster_schemascenarionumber")
	private ConsumersCluster Cluster;
	/**
	 * Кластер потребителей объединенных по напряжению под одним географическим 
	 * кластером
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "voltagecluster_mrid")
	@JoinColumn(name = "voltagecluster_projectid")
	@JoinColumn(name = "voltagecluster_synthesizedschemenumber")
	@JoinColumn(name = "voltagecluster_schemascenarionumber")
	private ConsumersVoltageCluster VoltageCluster;
	/**
	 * Подстанция, которая питает потребителя
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "substationfeedingfrom_mrid")
	@JoinColumn(name = "substationfeedingfrom_projectid")
	@JoinColumn(name = "substationfeedingfrom_synthesizedschemenumber")
	@JoinColumn(name = "substationfeedingfrom_schemascenarionumber")
	private Substation SubstationFeedingFrom;
	/**
	 * The set of loads that have the response characteristics.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "loadresponse_mrid")
	@JoinColumn(name = "loadresponse_projectid")
	@JoinColumn(name = "loadresponse_synthesizedschemenumber")
	@JoinColumn(name = "loadresponse_schemascenarionumber")
	private LoadResponseCharacteristic LoadResponse;

	public Integer getClusterLabel(){
		return this.clusterLabel;
	}

	@FieldSetter(fieldName = "EnergyConsumer.clusterLabel", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setClusterLabel(Integer clusterLabel){
		this.clusterLabel = clusterLabel;
	}

	public Integer getCustomerCount(){
		return this.customerCount;
	}

	@FieldSetter(fieldName = "EnergyConsumer.customerCount", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setCustomerCount(Integer customerCount){
		this.customerCount = customerCount;
	}

	public Boolean getGrounded(){
		return this.grounded;
	}

	@FieldSetter(fieldName = "EnergyConsumer.grounded", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setGrounded(Boolean grounded){
		this.grounded = grounded;
	}

	public Boolean getIsOutLier(){
		return this.isOutLier;
	}

	@FieldSetter(fieldName = "EnergyConsumer.isOutLier", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setIsOutLier(Boolean isOutLier){
		this.isOutLier = isOutLier;
	}

	public Boolean getIsTransformerNeedToConnectToSubstation(){
		return this.isTransformerNeedToConnectToSubstation;
	}

	@FieldSetter(fieldName = "EnergyConsumer.isTransformerNeedToConnectToSubstation", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setIsTransformerNeedToConnectToSubstation(Boolean isTransformerNeedToConnectToSubstation){
		this.isTransformerNeedToConnectToSubstation = isTransformerNeedToConnectToSubstation;
	}

	public ActivePower getP(){
		return this.p;
	}

	@FieldSetter(fieldName = "EnergyConsumer.p", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setP(ActivePower p){
		this.p = p;
	}

	public ActivePower getPfixed(){
		return this.pfixed;
	}

	@FieldSetter(fieldName = "EnergyConsumer.pfixed", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setPfixed(ActivePower pfixed){
		this.pfixed = pfixed;
	}

	public PerCent getPfixedPct(){
		return this.pfixedPct;
	}

	@FieldSetter(fieldName = "EnergyConsumer.pfixedPct", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setPfixedPct(PerCent pfixedPct){
		this.pfixedPct = pfixedPct;
	}

	public PhaseShuntConnectionKind getPhaseConnection(){
		return this.phaseConnection;
	}

	@FieldSetter(fieldName = "EnergyConsumer.phaseConnection", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setPhaseConnection(PhaseShuntConnectionKind phaseConnection){
		this.phaseConnection = phaseConnection;
	}

	public ReactivePower getQ(){
		return this.q;
	}

	@FieldSetter(fieldName = "EnergyConsumer.q", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setQ(ReactivePower q){
		this.q = q;
	}

	public ReactivePower getQfixed(){
		return this.qfixed;
	}

	@FieldSetter(fieldName = "EnergyConsumer.qfixed", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setQfixed(ReactivePower qfixed){
		this.qfixed = qfixed;
	}

	public PerCent getQfixedPct(){
		return this.qfixedPct;
	}

	@FieldSetter(fieldName = "EnergyConsumer.qfixedPct", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setQfixedPct(PerCent qfixedPct){
		this.qfixedPct = qfixedPct;
	}

	public Float getSubstationPreferredVoltage(){
		return this.substationPreferredVoltage;
	}

	@FieldSetter(fieldName = "EnergyConsumer.substationPreferredVoltage", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setSubstationPreferredVoltage(Float substationPreferredVoltage){
		this.substationPreferredVoltage = substationPreferredVoltage;
	}

	public ConsumersCluster getCluster(){
		return this.Cluster;
	}

	@AssociationSetter(fieldName = "EnergyConsumer.Cluster", assocType = "ru.mpei.ltdb.model.CIMProfile.NTI.ConsumersCluster", cardinality = "one")
	public void setCluster(ConsumersCluster Cluster){
		this.Cluster = Cluster;
	}

	public ConsumersVoltageCluster getVoltageCluster(){
		return this.VoltageCluster;
	}

	@AssociationSetter(fieldName = "EnergyConsumer.VoltageCluster", assocType = "ru.mpei.ltdb.model.CIMProfile.NTI.ConsumersVoltageCluster", cardinality = "one")
	public void setVoltageCluster(ConsumersVoltageCluster VoltageCluster){
		this.VoltageCluster = VoltageCluster;
	}

	public Substation getSubstationFeedingFrom(){
		return this.SubstationFeedingFrom;
	}

	@AssociationSetter(fieldName = "EnergyConsumer.SubstationFeedingFrom", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.Substation", cardinality = "one")
	public void setSubstationFeedingFrom(Substation SubstationFeedingFrom){
		this.SubstationFeedingFrom = SubstationFeedingFrom;
	}

	public LoadResponseCharacteristic getLoadResponse(){
		return this.LoadResponse;
	}

	@AssociationSetter(fieldName = "EnergyConsumer.LoadResponse", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.LoadModel.LoadResponseCharacteristic", cardinality = "one")
	public void setLoadResponse(LoadResponseCharacteristic LoadResponse){
		this.LoadResponse = LoadResponse;
	}

	public Float getRate(){
		return this.rate;
	}

	@FieldSetter(fieldName = "EnergyConsumer.rate", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setRate(Float rate){
		this.rate = rate;
	}

	public EnergyConsumer(){

	}

}
