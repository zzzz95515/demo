package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.AngleDegrees;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Reactance;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * Describes a tap changer with a linear relation between the tap step and 
 * the phase angle difference across the transformer. This is a mathematical 
 * model that is an approximation of a real phase tap changer.The phase angle 
 * is computed as stepPhaseShitfIncrement times the tap position.The secondary 
 * side voltage magnitude is the same as at the primary side.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:55 MSK 2020
 */

@Entity
@Table(name = "phasetapchangerlinear")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class PhaseTapChangerLinear extends PhaseTapChanger {
	/**
	 * Phase shift per step position. A positive value indicates a positive phase 
	 * shift from the winding where the tap is located to the other winding (for 
	 * a two-winding transformer).The actual phase shift increment might be more 
	 * accurately computed from the symmetrical or asymmetrical models or a tap 
	 * step table lookup if those are available.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="stepPhaseShiftIncrement_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="stepPhaseShiftIncrement_unit")),
		@AttributeOverride(name="value", column=@Column(name="stepPhaseShiftIncrement_value")),
	})
	private AngleDegrees stepPhaseShiftIncrement;
	/**
	 * The reactance depend on the tap position according to a "u" shaped curve. 
	 * The maximum reactance (xMax) appear at the low and high tap positions.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="xMax_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="xMax_unit")),
		@AttributeOverride(name="value", column=@Column(name="xMax_value")),
	})
	private Reactance xMax;
	/**
	 * The reactance depend on the tap position according to a "u" shaped curve. 
	 * The minimum reactance (xMin) appear at the mid tap position.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="xMin_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="xMin_unit")),
		@AttributeOverride(name="value", column=@Column(name="xMin_value")),
	})
	private Reactance xMin;


	public AngleDegrees getStepPhaseShiftIncrement(){
		return this.stepPhaseShiftIncrement;
	}

	@FieldSetter(fieldName = "PhaseTapChangerLinear.stepPhaseShiftIncrement", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setStepPhaseShiftIncrement(AngleDegrees stepPhaseShiftIncrement){
		this.stepPhaseShiftIncrement = stepPhaseShiftIncrement;
	}

	public Reactance getXMax(){
		return this.xMax;
	}

	@FieldSetter(fieldName = "PhaseTapChangerLinear.xMax", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setXMax(Reactance xMax){
		this.xMax = xMax;
	}

	public Reactance getXMin(){
		return this.xMin;
	}

	@FieldSetter(fieldName = "PhaseTapChangerLinear.xMin", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setXMin(Reactance xMin){
		this.xMin = xMin;
	}

	public PhaseTapChangerLinear(){

	}

}
