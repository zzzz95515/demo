package ru.mpei.prob.model.CIMProfile.NTI.EnergyStorageSystems;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.ConductingEquipment;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.ActivePower;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.CurrentFlow;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.RealEnergy;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Voltage;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * Система накопления электроэнергии (СНЭ)
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:50 MSK 2020
 */

@Entity
@Table(name = "batteryenergystoragesystem")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class BatteryEnergyStorageSystem extends ConductingEquipment {
	/**
	 * Количество ячеек в одном модуле аккумуляторной батареи
	 */
	@Column(name="cellsPerModuleNumber", nullable = true)
	private Integer cellsPerModuleNumber;
	/**
	 * Максимальный ток заряда
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="maxChargingCurrent_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="maxChargingCurrent_unit")),
		@AttributeOverride(name="value", column=@Column(name="maxChargingCurrent_value")),
	})
	private CurrentFlow maxChargingCurrent;
	/**
	 * Максимальный ток разряда
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="maxDischargingCurrent_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="maxDischargingCurrent_unit")),
		@AttributeOverride(name="value", column=@Column(name="maxDischargingCurrent_value")),
	})
	private CurrentFlow maxDischargingCurrent;
	/**
	 * Максимальное рабочее напряжение
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="maxWorkingVoltage_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="maxWorkingVoltage_unit")),
		@AttributeOverride(name="value", column=@Column(name="maxWorkingVoltage_value")),
	})
	private Voltage maxWorkingVoltage;
	/**
	 * Минимальное рабочее напряжение
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="minWorkingVoltage_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="minWorkingVoltage_unit")),
		@AttributeOverride(name="value", column=@Column(name="minWorkingVoltage_value")),
	})
	private Voltage minWorkingVoltage;
	/**
	 * Количество модулей аккумуляторных батарей
	 */
	@Column(name="modulesNumber", nullable = true)
	private Integer modulesNumber;
	/**
	 * Прочие затраты
	 */
	@Column(name="priceAdditional", nullable = true)
	private Float priceAdditional;
	/**
	 * Кап.затраты на помещение
	 */
	@Column(name="priceLocation", nullable = true)
	private Float priceLocation;
	/**
	 * Стандартный ток заряда
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedChargingCurrent_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedChargingCurrent_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedChargingCurrent_value")),
	})
	private CurrentFlow ratedChargingCurrent;
	/**
	 * Стандартный ток разряда
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedDischargingCurrent_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedDischargingCurrent_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedDischargingCurrent_value")),
	})
	private CurrentFlow ratedDischargingCurrent;
	/**
	 * Номинальная мощность СНЭ
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedP_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedP_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedP_value")),
	})
	private ActivePower ratedP;
	/**
	 * Номинальная запасаемая энергия
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedStoredEnergy_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedStoredEnergy_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedStoredEnergy_value")),
	})
	private RealEnergy ratedStoredEnergy;
	/**
	 * Номинальное напряжение
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedVoltage_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedVoltage_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedVoltage_value")),
	})
	private Voltage ratedVoltage;


	public Integer getCellsPerModuleNumber(){
		return this.cellsPerModuleNumber;
	}

	@FieldSetter(fieldName = "BatteryEnergyStorageSystem.cellsPerModuleNumber", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setCellsPerModuleNumber(Integer cellsPerModuleNumber){
		this.cellsPerModuleNumber = cellsPerModuleNumber;
	}

	public CurrentFlow getMaxChargingCurrent(){
		return this.maxChargingCurrent;
	}

	@FieldSetter(fieldName = "BatteryEnergyStorageSystem.maxChargingCurrent", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setMaxChargingCurrent(CurrentFlow maxChargingCurrent){
		this.maxChargingCurrent = maxChargingCurrent;
	}

	public CurrentFlow getMaxDischargingCurrent(){
		return this.maxDischargingCurrent;
	}

	@FieldSetter(fieldName = "BatteryEnergyStorageSystem.maxDischargingCurrent", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setMaxDischargingCurrent(CurrentFlow maxDischargingCurrent){
		this.maxDischargingCurrent = maxDischargingCurrent;
	}

	public Voltage getMaxWorkingVoltage(){
		return this.maxWorkingVoltage;
	}

	@FieldSetter(fieldName = "BatteryEnergyStorageSystem.maxWorkingVoltage", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setMaxWorkingVoltage(Voltage maxWorkingVoltage){
		this.maxWorkingVoltage = maxWorkingVoltage;
	}

	public Voltage getMinWorkingVoltage(){
		return this.minWorkingVoltage;
	}

	@FieldSetter(fieldName = "BatteryEnergyStorageSystem.minWorkingVoltage", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setMinWorkingVoltage(Voltage minWorkingVoltage){
		this.minWorkingVoltage = minWorkingVoltage;
	}

	public Integer getModulesNumber(){
		return this.modulesNumber;
	}

	@FieldSetter(fieldName = "BatteryEnergyStorageSystem.modulesNumber", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setModulesNumber(Integer modulesNumber){
		this.modulesNumber = modulesNumber;
	}

	public Float getPriceAdditional(){
		return this.priceAdditional;
	}

	@FieldSetter(fieldName = "BatteryEnergyStorageSystem.priceAdditional", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setPriceAdditional(Float priceAdditional){
		this.priceAdditional = priceAdditional;
	}

	public Float getPriceLocation(){
		return this.priceLocation;
	}

	@FieldSetter(fieldName = "BatteryEnergyStorageSystem.priceLocation", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setPriceLocation(Float priceLocation){
		this.priceLocation = priceLocation;
	}

	public CurrentFlow getRatedChargingCurrent(){
		return this.ratedChargingCurrent;
	}

	@FieldSetter(fieldName = "BatteryEnergyStorageSystem.ratedChargingCurrent", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setRatedChargingCurrent(CurrentFlow ratedChargingCurrent){
		this.ratedChargingCurrent = ratedChargingCurrent;
	}

	public CurrentFlow getRatedDischargingCurrent(){
		return this.ratedDischargingCurrent;
	}

	@FieldSetter(fieldName = "BatteryEnergyStorageSystem.ratedDischargingCurrent", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setRatedDischargingCurrent(CurrentFlow ratedDischargingCurrent){
		this.ratedDischargingCurrent = ratedDischargingCurrent;
	}

	public ActivePower getRatedP(){
		return this.ratedP;
	}

	@FieldSetter(fieldName = "BatteryEnergyStorageSystem.ratedP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setRatedP(ActivePower ratedP){
		this.ratedP = ratedP;
	}

	public RealEnergy getRatedStoredEnergy(){
		return this.ratedStoredEnergy;
	}

	@FieldSetter(fieldName = "BatteryEnergyStorageSystem.ratedStoredEnergy", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setRatedStoredEnergy(RealEnergy ratedStoredEnergy){
		this.ratedStoredEnergy = ratedStoredEnergy;
	}

	public Voltage getRatedVoltage(){
		return this.ratedVoltage;
	}

	@FieldSetter(fieldName = "BatteryEnergyStorageSystem.ratedVoltage", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setRatedVoltage(Voltage ratedVoltage){
		this.ratedVoltage = ratedVoltage;
	}

	public BatteryEnergyStorageSystem(){

	}

}
