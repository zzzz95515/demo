package ru.mpei.prob.model.CIMProfile.IEC61970.Base.StateVariables;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.ConnectivityNode;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.AngleDegrees;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Voltage;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Faults.EquipmentFault;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Faults.Fault;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Topology.TopologicalNode;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * State variable for voltage.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:54 MSK 2020
 */

@Entity
@Table(name = "svvoltage")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class SvVoltage extends StateVariable {
	/**
	 * Угол напряжения обратной последовательности
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="angleNegativeSeq_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="angleNegativeSeq_unit")),
			@AttributeOverride(name="value", column=@Column(name="angleNegativeSeq_value")),
	})
	private AngleDegrees angleNegativeSeq;

	public AngleDegrees getAngleNegativeSeq(){
		return this.angleNegativeSeq;
	}

	@FieldSetter(fieldName = "SvPowerFlow.angleNegativeSeq", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setAngleNegativeSeq(AngleDegrees angleNegativeSeq){
		this.angleNegativeSeq = angleNegativeSeq;
	}

	/**
	 * Угол напряжения нулевой последовательности
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="angleZeroSeq_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="angleZeroSeq_unit")),
			@AttributeOverride(name="value", column=@Column(name="angleZeroSeq_value")),
	})
	private AngleDegrees angleZeroSeq;

	public AngleDegrees getAngleZeroSeq(){
		return this.angleZeroSeq;
	}

	@FieldSetter(fieldName = "SvPowerFlow.angleZeroSeq", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setAngleZeroSeq(AngleDegrees angleZeroSeq){
		this.angleZeroSeq = angleZeroSeq;
	}
	/**
	 * Значение напряжения обратной последовательности
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="voltageNegativeSeq_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="voltageNegativeSeq_unit")),
			@AttributeOverride(name="value", column=@Column(name="voltageNegativeSeq_value")),
	})
	private Voltage voltageNegativeSeq;

	public Voltage getVoltageNegativeSeq(){
		return this.voltageNegativeSeq;
	}

	@FieldSetter(fieldName = "SvPowerFlow.voltageNegativeSeq", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setVoltageNegativeSeq(Voltage voltageNegativeSeq){
		this.voltageNegativeSeq = voltageNegativeSeq;
	}
	/**
	 * Значение напряжения нулевой последовательности
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="voltageZeroSeq_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="voltageZeroSeq_unit")),
			@AttributeOverride(name="value", column=@Column(name="voltageZeroSeq_value")),
	})
	private Voltage voltageZeroSeq;

	public Voltage getVoltageZeroSeq(){
		return this.voltageZeroSeq;
	}

	@FieldSetter(fieldName = "SvPowerFlow.voltageZeroSeq", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setVoltageZeroSeq(Voltage voltageZeroSeq){
		this.voltageZeroSeq = voltageZeroSeq;
	}


	/**
	 * The voltage angle of the topological node complex voltage with respect 
	 * to system reference.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="angle_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="angle_unit")),
		@AttributeOverride(name="value", column=@Column(name="angle_value")),
	})
	private AngleDegrees angle;
	/**
	 * The voltage magnitude of the topological node.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="v_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="v_unit")),
		@AttributeOverride(name="value", column=@Column(name="v_value")),
	})
	private Voltage v;

	/**
	 * Узлы ConnectivityNode, для которых было посчитано значение напряжения
	 */
	@ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "CalculatedSvVoltages")
	private List<ConnectivityNode> ConnectivityNodes;
	/**
	 * Повреждение, при котором было рассчитано значение напряжения
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "equipmentfault_mrid")
	@JoinColumn(name = "equipmentfault_projectid")
	@JoinColumn(name = "equipmentfault_synthesizedschemenumber")
	@JoinColumn(name = "equipmentfault_schemascenarionumber")
	private EquipmentFault EquipmentFault;
	/**
	 * Рассчитанные значения напряжений для этого повреждения
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "fault_mrid")
	@JoinColumn(name = "fault_projectid")
	@JoinColumn(name = "fault_synthesizedschemenumber")
	@JoinColumn(name = "fault_schemascenarionumber")
	private Fault Fault;
	/**
	 * Топологический узел. Ассоциация с этой стороны не используется
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "topologicalnodeforresult_mrid")
	@JoinColumn(name = "topologicalnodeforresult_projectid")
	@JoinColumn(name = "topologicalnodeforresult_synthesizedschemenumber")
	@JoinColumn(name = "topologicalnodeforresult_schemascenarionumber")
	private TopologicalNode TopologicalNodeForResult;
	/**
	 * The state voltage associated with the topological node.
	 */
	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "topologicalnode_mrid")
	@JoinColumn(name = "topologicalnode_projectid")
	@JoinColumn(name = "topologicalnode_synthesizedschemenumber")
	@JoinColumn(name = "topologicalnode_schemascenarionumber")
	private TopologicalNode TopologicalNode;

	public AngleDegrees getAngle(){
		return this.angle;
	}

	@FieldSetter(fieldName = "SvVoltage.angle", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setAngle(AngleDegrees angle){
		this.angle = angle;
	}

	public Voltage getV(){
		return this.v;
	}

	@FieldSetter(fieldName = "SvVoltage.v", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setV(Voltage v){
		this.v = v;
	}

	@JsonIgnore
	public List<ConnectivityNode> getConnectivityNodes(){
		return this.ConnectivityNodes;
	}

	@AssociationSetter(fieldName = "SvVoltage.ConnectivityNodes", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.ConnectivityNode", cardinality = "many")
	public void setConnectivityNodes(List<ConnectivityNode> ConnectivityNodes){
		this.ConnectivityNodes = ConnectivityNodes;
	}

	public EquipmentFault getEquipmentFault(){
		return this.EquipmentFault;
	}

	@AssociationSetter(fieldName = "SvVoltage.EquipmentFault", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Faults.EquipmentFault", cardinality = "one")
	public void setEquipmentFault(EquipmentFault EquipmentFault){
		this.EquipmentFault = EquipmentFault;
	}

	public Fault getFault(){
		return this.Fault;
	}

	@AssociationSetter(fieldName = "SvVoltage.Fault", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Faults.Fault", cardinality = "one")
	public void setFault(Fault Fault){
		this.Fault = Fault;
	}

	public TopologicalNode getTopologicalNodeForResult(){
		return this.TopologicalNodeForResult;
	}

	@AssociationSetter(fieldName = "SvVoltage.TopologicalNodeForResult", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Topology.TopologicalNode", cardinality = "one")
	public void setTopologicalNodeForResult(TopologicalNode TopologicalNodeForResult){
		this.TopologicalNodeForResult = TopologicalNodeForResult;
	}

	public TopologicalNode getTopologicalNode(){
		return this.TopologicalNode;
	}

	@AssociationSetter(fieldName = "SvVoltage.TopologicalNode", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Topology.TopologicalNode", cardinality = "one")
	public void setTopologicalNode(TopologicalNode TopologicalNode){
		this.TopologicalNode = TopologicalNode;
	}

	public SvVoltage(){

	}

}
