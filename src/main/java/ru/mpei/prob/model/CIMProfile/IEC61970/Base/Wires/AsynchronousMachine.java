package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.*;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * A rotating machine whose shaft rotates asynchronously with the electrical 
 * field.  Also known as an induction machine with no external connection 
 * to the rotor windings, e.g squirrel-cage induction machine.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:54 MSK 2020
 */

@Entity
@Table(name = "asynchronousmachine")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class AsynchronousMachine extends RotatingMachine {
	/**
	 * Indicates the type of Asynchronous Machine (motor or generator).
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "asynchronousMachineType")
	private AsynchronousMachineKind asynchronousMachineType;
	/**
	 * Indicates whether the machine is a converter fed drive. Used for short 
	 * circuit data exchange according to IEC 60909
	 */
	@Column(name="converterFedDrive", nullable = true)
	private Boolean converterFedDrive;
	/**
	 * Efficiency of the asynchronous machine at nominal operation in percent. 
	 * Indicator for converter drive motors. Used for short circuit data exchange 
	 * according to IEC 60909
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="efficiency_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="efficiency_unit")),
		@AttributeOverride(name="value", column=@Column(name="efficiency_value")),
	})
	private PerCent efficiency;
	/**
	 * Ratio of locked-rotor current to the rated current of the motor (Ia/Ir). 
	 * Used for short circuit data exchange according to IEC 60909
	 */
	@Column(name="iaIrRatio", nullable = true)
	private Float iaIrRatio;
	/**
	 * Nameplate data indicates if the machine is 50 or 60 Hz.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="nominalFrequency_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="nominalFrequency_unit")),
		@AttributeOverride(name="value", column=@Column(name="nominalFrequency_value")),
	})
	private Frequency nominalFrequency;
	/**
	 * Nameplate data.  Depends on the slip and number of pole pairs.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="denominatorMultiplier", column=@Column(name="nominalSpeed_denominatorMultiplier")),
		@AttributeOverride(name="denominatorUnit", column=@Column(name="nominalSpeed_denominatorUnit")),
		@AttributeOverride(name="multiplier", column=@Column(name="nominalSpeed_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="nominalSpeed_unit")),
		@AttributeOverride(name="value", column=@Column(name="nominalSpeed_value")),
	})
	private RotationSpeed nominalSpeed;
	/**
	 * Number of pole pairs of stator. Used for short circuit data exchange according 
	 * to IEC 60909
	 */
	@Column(name="polePairNumber", nullable = true)
	private Integer polePairNumber;
	/**
	 * Rated mechanical power (Pr in the IEC 60909-0). Used for short circuit 
	 * data exchange according to IEC 60909.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedMechanicalPower_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedMechanicalPower_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedMechanicalPower_value")),
	})
	private ActivePower ratedMechanicalPower;
	/**
	 * Indicates for converter drive motors if the power can be reversible. Used 
	 * for short circuit data exchange according to IEC 60909
	 */
	@Column(name="reversible", nullable = true)
	private Boolean reversible;
	/**
	 * Damper 1 winding resistance.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="rr1_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="rr1_unit")),
		@AttributeOverride(name="value", column=@Column(name="rr1_value")),
	})
	private Resistance rr1;
	/**
	 * Damper 2 winding resistance.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="rr2_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="rr2_unit")),
		@AttributeOverride(name="value", column=@Column(name="rr2_value")),
	})
	private Resistance rr2;
	/**
	 * Locked rotor ratio (R/X). Used for short circuit data exchange according 
	 * to IEC 60909
	 */
	@Column(name="rxLockedRotorRatio", nullable = true)
	private Float rxLockedRotorRatio;
	/**
	 * Transient rotor time constant (greater than tppo).
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="tpo_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="tpo_unit")),
		@AttributeOverride(name="value", column=@Column(name="tpo_value")),
	})
	private Seconds tpo;
	/**
	 * Sub-transient rotor time constant (greater than 0).
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="tppo_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="tppo_unit")),
		@AttributeOverride(name="value", column=@Column(name="tppo_value")),
	})
	private Seconds tppo;
	/**
	 * Damper 1 winding leakage reactance.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="xlr1_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="xlr1_unit")),
		@AttributeOverride(name="value", column=@Column(name="xlr1_value")),
	})
	private Reactance xlr1;
	/**
	 * Damper 2 winding leakage reactance.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="xlr2_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="xlr2_unit")),
		@AttributeOverride(name="value", column=@Column(name="xlr2_value")),
	})
	private Reactance xlr2;
	/**
	 * Magnetizing reactance.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="xm_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="xm_unit")),
		@AttributeOverride(name="value", column=@Column(name="xm_value")),
	})
	private Reactance xm;
	/**
	 * Transient reactance (unsaturated) (greater than or equal to xpp).
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="xp_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="xp_unit")),
		@AttributeOverride(name="value", column=@Column(name="xp_value")),
	})
	private Reactance xp;
	/**
	 * Sub-transient reactance (unsaturated) (greather than Xl).
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="xpp_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="xpp_unit")),
		@AttributeOverride(name="value", column=@Column(name="xpp_value")),
	})
	private Reactance xpp;
	/**
	 * Synchronous reactance (greather than xp).
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="xs_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="xs_unit")),
		@AttributeOverride(name="value", column=@Column(name="xs_value")),
	})
	private Reactance xs;


	public AsynchronousMachineKind getAsynchronousMachineType(){
		return this.asynchronousMachineType;
	}

	@FieldSetter(fieldName = "AsynchronousMachine.asynchronousMachineType", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setAsynchronousMachineType(AsynchronousMachineKind asynchronousMachineType){
		this.asynchronousMachineType = asynchronousMachineType;
	}

	public Boolean getConverterFedDrive(){
		return this.converterFedDrive;
	}

	@FieldSetter(fieldName = "AsynchronousMachine.converterFedDrive", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setConverterFedDrive(Boolean converterFedDrive){
		this.converterFedDrive = converterFedDrive;
	}

	public PerCent getEfficiency(){
		return this.efficiency;
	}

	@FieldSetter(fieldName = "AsynchronousMachine.efficiency", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setEfficiency(PerCent efficiency){
		this.efficiency = efficiency;
	}

	public Float getIaIrRatio(){
		return this.iaIrRatio;
	}

	@FieldSetter(fieldName = "AsynchronousMachine.iaIrRatio", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setIaIrRatio(Float iaIrRatio){
		this.iaIrRatio = iaIrRatio;
	}

	public Frequency getNominalFrequency(){
		return this.nominalFrequency;
	}

	@FieldSetter(fieldName = "AsynchronousMachine.nominalFrequency", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setNominalFrequency(Frequency nominalFrequency){
		this.nominalFrequency = nominalFrequency;
	}

	public RotationSpeed getNominalSpeed(){
		return this.nominalSpeed;
	}

	@FieldSetter(fieldName = "AsynchronousMachine.nominalSpeed", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setNominalSpeed(RotationSpeed nominalSpeed){
		this.nominalSpeed = nominalSpeed;
	}

	public Integer getPolePairNumber(){
		return this.polePairNumber;
	}

	@FieldSetter(fieldName = "AsynchronousMachine.polePairNumber", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setPolePairNumber(Integer polePairNumber){
		this.polePairNumber = polePairNumber;
	}

	public ActivePower getRatedMechanicalPower(){
		return this.ratedMechanicalPower;
	}

	@FieldSetter(fieldName = "AsynchronousMachine.ratedMechanicalPower", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setRatedMechanicalPower(ActivePower ratedMechanicalPower){
		this.ratedMechanicalPower = ratedMechanicalPower;
	}

	public Boolean getReversible(){
		return this.reversible;
	}

	@FieldSetter(fieldName = "AsynchronousMachine.reversible", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setReversible(Boolean reversible){
		this.reversible = reversible;
	}

	public Resistance getRr1(){
		return this.rr1;
	}

	@FieldSetter(fieldName = "AsynchronousMachine.rr1", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setRr1(Resistance rr1){
		this.rr1 = rr1;
	}

	public Resistance getRr2(){
		return this.rr2;
	}

	@FieldSetter(fieldName = "AsynchronousMachine.rr2", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setRr2(Resistance rr2){
		this.rr2 = rr2;
	}

	public Float getRxLockedRotorRatio(){
		return this.rxLockedRotorRatio;
	}

	@FieldSetter(fieldName = "AsynchronousMachine.rxLockedRotorRatio", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setRxLockedRotorRatio(Float rxLockedRotorRatio){
		this.rxLockedRotorRatio = rxLockedRotorRatio;
	}

	public Seconds getTpo(){
		return this.tpo;
	}

	@FieldSetter(fieldName = "AsynchronousMachine.tpo", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setTpo(Seconds tpo){
		this.tpo = tpo;
	}

	public Seconds getTppo(){
		return this.tppo;
	}

	@FieldSetter(fieldName = "AsynchronousMachine.tppo", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setTppo(Seconds tppo){
		this.tppo = tppo;
	}

	public Reactance getXlr1(){
		return this.xlr1;
	}

	@FieldSetter(fieldName = "AsynchronousMachine.xlr1", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setXlr1(Reactance xlr1){
		this.xlr1 = xlr1;
	}

	public Reactance getXlr2(){
		return this.xlr2;
	}

	@FieldSetter(fieldName = "AsynchronousMachine.xlr2", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setXlr2(Reactance xlr2){
		this.xlr2 = xlr2;
	}

	public Reactance getXm(){
		return this.xm;
	}

	@FieldSetter(fieldName = "AsynchronousMachine.xm", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setXm(Reactance xm){
		this.xm = xm;
	}

	public Reactance getXp(){
		return this.xp;
	}

	@FieldSetter(fieldName = "AsynchronousMachine.xp", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setXp(Reactance xp){
		this.xp = xp;
	}

	public Reactance getXpp(){
		return this.xpp;
	}

	@FieldSetter(fieldName = "AsynchronousMachine.xpp", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setXpp(Reactance xpp){
		this.xpp = xpp;
	}

	public Reactance getXs(){
		return this.xs;
	}

	@FieldSetter(fieldName = "AsynchronousMachine.xs", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setXs(Reactance xs){
		this.xs = xs;
	}

	public AsynchronousMachine(){

	}

}
