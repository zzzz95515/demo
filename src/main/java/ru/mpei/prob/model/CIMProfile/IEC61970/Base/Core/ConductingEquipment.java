package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Protection.ProtectionEquipment;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.StateVariables.SvStatus;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Topology.TopologicalIsland;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.time.LocalDate;
import java.util.List;

/**
 * The parts of the AC power system that are designed to carry current or 
 * that are conductively connected through terminals.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:50 MSK 2020
 */

@Entity
@Table(name = "conductingequipment")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ConductingEquipment extends Equipment {
	/**
	 * Скорость снижения вероятности безотказной работы из-за внезапных отказов, у.е.
	 */
	@Column(name="betaFailure", nullable = true)
	private Float betaFailure;

	/**
	 * Скорость снижения вероятности безотказной работы, у.е.
	 */
	@Column(name="alphaFailure", nullable = true)
	private Float alphaFailure;

	/**
	 * Последний день ремонта
	 */
	@Column(name="lastFixDate", nullable = true)
	private LocalDate lastFixDate;

	/**
	 * Дни, когда запрещается проводить ремонт
	 */
	@ElementCollection
	private List<LocalDate> forbiddenDays;

	/**
	 * Цена за техническое перевооружение, у.е.
	 */
	@Column(name="technicalReequipmentCost", nullable = true)
	private Float technicalReequipmentCost;

	public Float getTechnicalReequipmentCost(){
		return this.technicalReequipmentCost;
	}

	@FieldSetter(fieldName = "ConductingEquipment.technicalReequipmentCost", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setTechnicalReequipmentCost(Float technicalReequipmentCost){
		this.technicalReequipmentCost = technicalReequipmentCost;
	}

	/**
	 * Цена за капитальный ремонт, у.е.
	 */
	@Column(name="capitalRepairCost", nullable = true)
	private Float capitalRepairCost;

	public Float getCapitalRepairCost(){
		return this.capitalRepairCost;
	}

	@FieldSetter(fieldName = "ConductingEquipment.capitalRepairCost", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setCapitalRepairCost(Float capitalRepairCost){
		this.capitalRepairCost = capitalRepairCost;
	}

	/**
	 * Цена за текущий ремонт, у.е.
	 */
	@Column(name="currentRepairCost", nullable = true)
	private Float currentRepairCost;

	public Float getCurrentRepairCost(){
		return this.currentRepairCost;
	}

	@FieldSetter(fieldName = "ConductingEquipment.currentRepairCost", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setCurrentRepairCost(Float currentRepairCost){
		this.currentRepairCost = currentRepairCost;
	}

	/**
	 * Ток обратной последовательности после расчета КЗ, кА
	 */
	@Column(name="currentNegSeq", nullable = true)
	private Float currentNegSeq;
	/**
	 * Ток нулевой последовательности после расчета КЗ, кА
	 */
	@Column(name="currentZeroSeq", nullable = true)
	private Float currentZeroSeq;
	/**
	 * Идентификатор ветви. Требуется для составления электрических матриц при 
	 * расчете КЗ с участием земли
	 */
	@Column(name="groundFaultSchemeBranchID", nullable = true)
	private Integer groundFaultSchemeBranchID;
	/**
	 * Атрибут указывает, является ли объект оптимизируемым по параметрам для 
	 * расчета эквивалентов энергосистемы
	 */
	@Column(name="isEquipmentAvailableForOptimization", nullable = true)
	private Boolean isEquipmentAvailableForOptimization;
	/**
	 * Идентификатор ветви в электрической матрице расчета нормального режима
	 */
	@Column(name="normalSchemeBranchID", nullable = true)
	private Integer normalSchemeBranchID;
	/**
	 * Идентификатор узла для нормальной схемы.Атрибут есть только у оборудования, 
	 * имеющее внутренний узел
	 */
	@Column(name="normalSchemeNodeID", nullable = true)
	private Integer normalSchemeNodeID;
	/**
	 * Идентификатор ветви в электрической матрице расчета КЗ
	 */
	@Column(name="posSeqSchemeBranchID", nullable = true)
	private Integer posSeqSchemeBranchID;

	/**
	 * All conducting equipment with this base voltage.  Use only when there is 
	 * no voltage level container used and only one base voltage applies.  For 
	 * example, not used for transformers.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "basevoltage_mrid")
	@JoinColumn(name = "basevoltage_projectid")
	@JoinColumn(name = "basevoltage_synthesizedschemenumber")
	@JoinColumn(name = "basevoltage_schemascenarionumber")
	private BaseVoltage BaseVoltage;
	/**
	 * Принадлежность к топологическому острову
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "topologicalisland_mrid")
	@JoinColumn(name = "topologicalisland_projectid")
	@JoinColumn(name = "topologicalisland_synthesizedschemenumber")
	@JoinColumn(name = "topologicalisland_schemascenarionumber")
	private TopologicalIsland TopologicalIsland;
	/**
	 * Топологический остров, имеющий оборудование с внутренними узлами
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "topologicalislandhavinginrernalnodes_mrid")
	@JoinColumn(name = "topologicalislandhavinginrernalnodes_projectid")
	@JoinColumn(name = "topologicalislandhavinginrernalnodes_synthesizedschemenumber")
	@JoinColumn(name = "topologicalislandhavinginrernalnodes_schemascenarionumber")
	private TopologicalIsland TopologicalIslandHavingInrernalNodes;
	/**
	 * The conducting equipment of the terminal.  Conducting equipment have  terminals 
	 * that may be connected to other conducting equipment terminals via connectivity 
	 * nodes or topological nodes.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "ConductingEquipment")
	private List<Terminal> Terminals;
	/**
	 * The conducting equipment associated with the status state variable.
	 */
	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "svstatus_mrid")
	@JoinColumn(name = "svstatus_projectid")
	@JoinColumn(name = "svstatus_synthesizedschemenumber")
	@JoinColumn(name = "svstatus_schemascenarionumber")
	private SvStatus SvStatus;
	/**
	 * Protection equipment may be used to protect specific conducting equipment.
	 */
	@ManyToMany(fetch = FetchType.LAZY)
	@JoinColumn(name = "protectionequipments_mrid")
	@JoinColumn(name = "protectionequipments_projectid")
	@JoinColumn(name = "protectionequipments_synthesizedschemenumber")
	@JoinColumn(name = "protectionequipments_schemascenarionumber")
	private List<ProtectionEquipment> ProtectionEquipments;

	public Float getCurrentNegSeq(){
		return this.currentNegSeq;
	}

	@FieldSetter(fieldName = "ConductingEquipment.currentNegSeq", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setCurrentNegSeq(Float currentNegSeq){
		this.currentNegSeq = currentNegSeq;
	}

	public Float getCurrentZeroSeq(){
		return this.currentZeroSeq;
	}

	@FieldSetter(fieldName = "ConductingEquipment.currentZeroSeq", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setCurrentZeroSeq(Float currentZeroSeq){
		this.currentZeroSeq = currentZeroSeq;
	}

	public Integer getGroundFaultSchemeBranchID(){
		return this.groundFaultSchemeBranchID;
	}

	@FieldSetter(fieldName = "ConductingEquipment.groundFaultSchemeBranchID", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setGroundFaultSchemeBranchID(Integer groundFaultSchemeBranchID){
		this.groundFaultSchemeBranchID = groundFaultSchemeBranchID;
	}

	public Boolean getIsEquipmentAvailableForOptimization(){
		return this.isEquipmentAvailableForOptimization;
	}

	@FieldSetter(fieldName = "ConductingEquipment.isEquipmentAvailableForOptimization", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setIsEquipmentAvailableForOptimization(Boolean isEquipmentAvailableForOptimization){
		this.isEquipmentAvailableForOptimization = isEquipmentAvailableForOptimization;
	}

	public Integer getNormalSchemeBranchID(){
		return this.normalSchemeBranchID;
	}

	@FieldSetter(fieldName = "ConductingEquipment.normalSchemeBranchID", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setNormalSchemeBranchID(Integer normalSchemeBranchID){
		this.normalSchemeBranchID = normalSchemeBranchID;
	}

	public Integer getNormalSchemeNodeID(){
		return this.normalSchemeNodeID;
	}

	@FieldSetter(fieldName = "ConductingEquipment.normalSchemeNodeID", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setNormalSchemeNodeID(Integer normalSchemeNodeID){
		this.normalSchemeNodeID = normalSchemeNodeID;
	}

	public Integer getPosSeqSchemeBranchID(){
		return this.posSeqSchemeBranchID;
	}

	@FieldSetter(fieldName = "ConductingEquipment.posSeqSchemeBranchID", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setPosSeqSchemeBranchID(Integer posSeqSchemeBranchID){
		this.posSeqSchemeBranchID = posSeqSchemeBranchID;
	}

	public BaseVoltage getBaseVoltage(){
		return this.BaseVoltage;
	}

	@AssociationSetter(fieldName = "ConductingEquipment.BaseVoltage", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.BaseVoltage", cardinality = "one")
	public void setBaseVoltage(BaseVoltage BaseVoltage){
		this.BaseVoltage = BaseVoltage;
	}

	public TopologicalIsland getTopologicalIsland(){
		return this.TopologicalIsland;
	}

	@AssociationSetter(fieldName = "ConductingEquipment.TopologicalIsland", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Topology.TopologicalIsland", cardinality = "one")
	public void setTopologicalIsland(TopologicalIsland TopologicalIsland){
		this.TopologicalIsland = TopologicalIsland;
	}

	public TopologicalIsland getTopologicalIslandHavingInrernalNodes(){
		return this.TopologicalIslandHavingInrernalNodes;
	}

	@AssociationSetter(fieldName = "ConductingEquipment.TopologicalIslandHavingInrernalNodes", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Topology.TopologicalIsland", cardinality = "one")
	public void setTopologicalIslandHavingInrernalNodes(TopologicalIsland TopologicalIslandHavingInrernalNodes){
		this.TopologicalIslandHavingInrernalNodes = TopologicalIslandHavingInrernalNodes;
	}

	@JsonIgnore
	public List<Terminal> getTerminals(){
		return this.Terminals;
	}

	@AssociationSetter(fieldName = "ConductingEquipment.Terminals", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.Terminal", cardinality = "many")
	public void setTerminals(List<Terminal> Terminals){
		this.Terminals = Terminals;
	}

	public SvStatus getSvStatus(){
		return this.SvStatus;
	}

	@AssociationSetter(fieldName = "ConductingEquipment.SvStatus", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.StateVariables.SvStatus", cardinality = "one")
	public void setSvStatus(SvStatus SvStatus){
		this.SvStatus = SvStatus;
	}

	public List<ProtectionEquipment> getProtectionEquipments(){
		return this.ProtectionEquipments;
	}

	@AssociationSetter(fieldName = "ConductingEquipment.ProtectionEquipments", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Protection.ProtectionEquipment", cardinality = "many")
	public void setProtectionEquipments(List<ProtectionEquipment> ProtectionEquipments){
		this.ProtectionEquipments = ProtectionEquipments;
	}

	public List<LocalDate> getForbiddenDays() {
		return forbiddenDays;
	}

	@FieldSetter(fieldName = "ConductingEquipment.forbiddenDays", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setForbiddenDays(List<LocalDate> forbiddenDays) {
		this.forbiddenDays = forbiddenDays;
	}

	public LocalDate getLastFixDate() {
		return lastFixDate;
	}

	@FieldSetter(fieldName = "ConductingEquipment.lastFixDate", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setLastFixDate(LocalDate lastFixDate) {
		this.lastFixDate = lastFixDate;
	}


	public Float getBetaFailure() {
		return betaFailure;
	}

	@FieldSetter(fieldName = "ConductingEquipment.betaFailure", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setBetaFailure(Float betaFailure) {
		this.betaFailure = betaFailure;
	}

	public Float getAlphaFailure() {
		return alphaFailure;
	}

	@FieldSetter(fieldName = "ConductingEquipment.alphaFailure", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setAlphaFailure(Float alphaFailure) {
		this.alphaFailure = alphaFailure;
	}

	public ConductingEquipment(){

	}

}
