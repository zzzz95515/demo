package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Generation.Production;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.IdentifiedObject;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.ActivePower;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.PU;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.PerCent;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * The fossil fuel consumed by the non-nuclear thermal generating unit.   
 * For example, coal, oil, gas, etc.   This a the specific fuels that the 
 * generating unit can consume.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:52 MSK 2020
 */

@Entity
@Table(name = "fossilfuel")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class FossilFuel extends IdentifiedObject {
	/**
	 * The type of fossil fuel, such as coal, oil, or gas.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "fossilFuelType")
	private FuelType fossilFuelType;
	/**
	 * The cost in terms of heat value for the given type of fuel.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="denominatorMultiplier", column=@Column(name="fuelCost_denominatorMultiplier")),
		@AttributeOverride(name="denominatorUnit", column=@Column(name="fuelCost_denominatorUnit")),
		@AttributeOverride(name="multiplier", column=@Column(name="fuelCost_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="fuelCost_unit")),
		@AttributeOverride(name="value", column=@Column(name="fuelCost_value")),
	})
	private CostPerHeatUnit fuelCost;
	/**
	 * The cost of fuel used for economic dispatching which includes: fuel cost, 
	 * transportation cost,  and incremental maintenance cost.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="denominatorMultiplier", column=@Column(name="fuelDispatchCost_denominatorMultiplier")),
		@AttributeOverride(name="denominatorUnit", column=@Column(name="fuelDispatchCost_denominatorUnit")),
		@AttributeOverride(name="multiplier", column=@Column(name="fuelDispatchCost_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="fuelDispatchCost_unit")),
		@AttributeOverride(name="value", column=@Column(name="fuelDispatchCost_value")),
	})
	private CostPerHeatUnit fuelDispatchCost;
	/**
	 * The efficiency factor for the fuel (per unit) in terms of the effective 
	 * energy absorbed.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="fuelEffFactor_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="fuelEffFactor_unit")),
		@AttributeOverride(name="value", column=@Column(name="fuelEffFactor_value")),
	})
	private PU fuelEffFactor;
	/**
	 * Handling and processing cost associated with this fuel.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="denominatorMultiplier", column=@Column(name="fuelHandlingCost_denominatorMultiplier")),
		@AttributeOverride(name="denominatorUnit", column=@Column(name="fuelHandlingCost_denominatorUnit")),
		@AttributeOverride(name="multiplier", column=@Column(name="fuelHandlingCost_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="fuelHandlingCost_unit")),
		@AttributeOverride(name="value", column=@Column(name="fuelHandlingCost_value")),
	})
	private CostPerHeatUnit fuelHandlingCost;
	/**
	 * The amount of heat per weight (or volume) of the given type of fuel.
	 */
	@Column(name="fuelHeatContent", nullable = true)
	private Float fuelHeatContent;
	/**
	 * Relative amount of the given type of fuel, when multiple fuels are being 
	 * consumed.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="fuelMixture_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="fuelMixture_unit")),
		@AttributeOverride(name="value", column=@Column(name="fuelMixture_value")),
	})
	private PerCent fuelMixture;
	/**
	 * The fuel's fraction of pollution credit per unit of heat content.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="fuelSulfur_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="fuelSulfur_unit")),
		@AttributeOverride(name="value", column=@Column(name="fuelSulfur_value")),
	})
	private PU fuelSulfur;
	/**
	 * The active power output level of the unit at which the given type of fuel 
	 * is switched on. This fuel (e.g., oil) is sometimes used to supplement the 
	 * base fuel (e.g., coal) at high active power output levels.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="highBreakpointP_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="highBreakpointP_unit")),
		@AttributeOverride(name="value", column=@Column(name="highBreakpointP_value")),
	})
	private ActivePower highBreakpointP;
	/**
	 * The active power output level of the unit at which the given type of fuel 
	 * is switched off. This fuel (e.g., oil) is sometimes used to stabilize the 
	 * base fuel (e.g., coal) at low active power output levels.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="lowBreakpointP_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="lowBreakpointP_unit")),
		@AttributeOverride(name="value", column=@Column(name="lowBreakpointP_value")),
	})
	private ActivePower lowBreakpointP;

	/**
	 * A thermal generating unit may have one or more fossil fuels.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "thermalgeneratingunit_mrid")
	@JoinColumn(name = "thermalgeneratingunit_projectid")
	@JoinColumn(name = "thermalgeneratingunit_synthesizedschemenumber")
	@JoinColumn(name = "thermalgeneratingunit_schemascenarionumber")
	private ThermalGeneratingUnit ThermalGeneratingUnit;

	public FuelType getFossilFuelType(){
		return this.fossilFuelType;
	}

	@FieldSetter(fieldName = "FossilFuel.fossilFuelType", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setFossilFuelType(FuelType fossilFuelType){
		this.fossilFuelType = fossilFuelType;
	}

	public CostPerHeatUnit getFuelCost(){
		return this.fuelCost;
	}

	@FieldSetter(fieldName = "FossilFuel.fuelCost", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setFuelCost(CostPerHeatUnit fuelCost){
		this.fuelCost = fuelCost;
	}

	public CostPerHeatUnit getFuelDispatchCost(){
		return this.fuelDispatchCost;
	}

	@FieldSetter(fieldName = "FossilFuel.fuelDispatchCost", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setFuelDispatchCost(CostPerHeatUnit fuelDispatchCost){
		this.fuelDispatchCost = fuelDispatchCost;
	}

	public PU getFuelEffFactor(){
		return this.fuelEffFactor;
	}

	@FieldSetter(fieldName = "FossilFuel.fuelEffFactor", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setFuelEffFactor(PU fuelEffFactor){
		this.fuelEffFactor = fuelEffFactor;
	}

	public CostPerHeatUnit getFuelHandlingCost(){
		return this.fuelHandlingCost;
	}

	@FieldSetter(fieldName = "FossilFuel.fuelHandlingCost", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setFuelHandlingCost(CostPerHeatUnit fuelHandlingCost){
		this.fuelHandlingCost = fuelHandlingCost;
	}

	public Float getFuelHeatContent(){
		return this.fuelHeatContent;
	}

	@FieldSetter(fieldName = "FossilFuel.fuelHeatContent", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setFuelHeatContent(Float fuelHeatContent){
		this.fuelHeatContent = fuelHeatContent;
	}

	public PerCent getFuelMixture(){
		return this.fuelMixture;
	}

	@FieldSetter(fieldName = "FossilFuel.fuelMixture", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setFuelMixture(PerCent fuelMixture){
		this.fuelMixture = fuelMixture;
	}

	public PU getFuelSulfur(){
		return this.fuelSulfur;
	}

	@FieldSetter(fieldName = "FossilFuel.fuelSulfur", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setFuelSulfur(PU fuelSulfur){
		this.fuelSulfur = fuelSulfur;
	}

	public ActivePower getHighBreakpointP(){
		return this.highBreakpointP;
	}

	@FieldSetter(fieldName = "FossilFuel.highBreakpointP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setHighBreakpointP(ActivePower highBreakpointP){
		this.highBreakpointP = highBreakpointP;
	}

	public ActivePower getLowBreakpointP(){
		return this.lowBreakpointP;
	}

	@FieldSetter(fieldName = "FossilFuel.lowBreakpointP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setLowBreakpointP(ActivePower lowBreakpointP){
		this.lowBreakpointP = lowBreakpointP;
	}

	public ThermalGeneratingUnit getThermalGeneratingUnit(){
		return this.ThermalGeneratingUnit;
	}

	@AssociationSetter(fieldName = "FossilFuel.ThermalGeneratingUnit", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Generation.Production.ThermalGeneratingUnit", cardinality = "one")
	public void setThermalGeneratingUnit(ThermalGeneratingUnit ThermalGeneratingUnit){
		this.ThermalGeneratingUnit = ThermalGeneratingUnit;
	}

	public FossilFuel(){

	}

}
