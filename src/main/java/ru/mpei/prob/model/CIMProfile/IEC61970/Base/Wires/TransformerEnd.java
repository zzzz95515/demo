package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.BaseVoltage;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.IdentifiedObject;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.Terminal;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.PerCent;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Reactance;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Resistance;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Voltage;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * A conducting connection point of a power transformer. It corresponds to 
 * a physical transformer winding terminal.  In earlier CIM versions, the 
 * TransformerWinding class served a similar purpose, but this class is more 
 * flexible because it associates to terminal but is not a specialization 
 * of ConductingEquipment.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:56 MSK 2020
 */

@Entity
@Table(name = "transformerend")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class TransformerEnd extends IdentifiedObject {
	/**
	 * Core shunt magnetizing susceptance in the saturation region.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="bmagSat_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="bmagSat_unit")),
		@AttributeOverride(name="value", column=@Column(name="bmagSat_value")),
	})
	private PerCent bmagSat;
	/**
	 * Number for this transformer end, corresponding to the end's order in the 
	 * power transformer vector group or phase angle clock number.  Highest voltage 
	 * winding should be 1.  Each end within a power transformer should have a 
	 * unique subsequent end number.   Note the transformer end number need not 
	 * match the terminal sequence number.
	 */
	@Column(name="endNumber", nullable = true)
	private Integer endNumber;
	/**
	 * (for Yn and Zn connections) True if the neutral is solidly grounded.
	 */
	@Column(name="grounded", nullable = true)
	private Boolean grounded;
	/**
	 * The reference voltage at which the magnetizing saturation measurements 
	 * were made
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="magBaseU_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="magBaseU_unit")),
		@AttributeOverride(name="value", column=@Column(name="magBaseU_value")),
	})
	private Voltage magBaseU;
	/**
	 * Core magnetizing saturation curve knee flux level.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="magSatFlux_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="magSatFlux_unit")),
		@AttributeOverride(name="value", column=@Column(name="magSatFlux_value")),
	})
	private PerCent magSatFlux;
	/**
	 * (for Yn and Zn connections) Resistance part of neutral impedance where 
	 * 'grounded' is true.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="rground_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="rground_unit")),
		@AttributeOverride(name="value", column=@Column(name="rground_value")),
	})
	private Resistance rground;
	/**
	 * (for Yn and Zn connections) Reactive part of neutral impedance where 'grounded' 
	 * is true.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="xground_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="xground_unit")),
		@AttributeOverride(name="value", column=@Column(name="xground_value")),
	})
	private Reactance xground;

	/**
	 * Transformer ends at the base voltage.  This is essential for PU calculation.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "basevoltage_mrid")
	@JoinColumn(name = "basevoltage_projectid")
	@JoinColumn(name = "basevoltage_synthesizedschemenumber")
	@JoinColumn(name = "basevoltage_schemascenarionumber")
	private BaseVoltage BaseVoltage;
	/**
	 * All transformer ends connected at this terminal.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "terminal_mrid")
	@JoinColumn(name = "terminal_projectid")
	@JoinColumn(name = "terminal_synthesizedschemenumber")
	@JoinColumn(name = "terminal_schemascenarionumber")
	private Terminal Terminal;
	/**
	 * Transformer end to which this phase tap changer belongs.
	 */
	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "phasetapchanger_mrid")
	@JoinColumn(name = "phasetapchanger_projectid")
	@JoinColumn(name = "phasetapchanger_synthesizedschemenumber")
	@JoinColumn(name = "phasetapchanger_schemascenarionumber")
	private PhaseTapChanger PhaseTapChanger;
	/**
	 * Transformer end to which this ratio tap changer belongs.
	 */
	@OneToOne(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "TransformerEnd")
	private RatioTapChanger RatioTapChanger;

	public PerCent getBmagSat(){
		return this.bmagSat;
	}

	@FieldSetter(fieldName = "TransformerEnd.bmagSat", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setBmagSat(PerCent bmagSat){
		this.bmagSat = bmagSat;
	}

	public Integer getEndNumber(){
		return this.endNumber;
	}

	@FieldSetter(fieldName = "TransformerEnd.endNumber", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setEndNumber(Integer endNumber){
		this.endNumber = endNumber;
	}

	public Boolean getGrounded(){
		return this.grounded;
	}

	@FieldSetter(fieldName = "TransformerEnd.grounded", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setGrounded(Boolean grounded){
		this.grounded = grounded;
	}

	public Voltage getMagBaseU(){
		return this.magBaseU;
	}

	@FieldSetter(fieldName = "TransformerEnd.magBaseU", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMagBaseU(Voltage magBaseU){
		this.magBaseU = magBaseU;
	}

	public PerCent getMagSatFlux(){
		return this.magSatFlux;
	}

	@FieldSetter(fieldName = "TransformerEnd.magSatFlux", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMagSatFlux(PerCent magSatFlux){
		this.magSatFlux = magSatFlux;
	}

	public Resistance getRground(){
		return this.rground;
	}

	@FieldSetter(fieldName = "TransformerEnd.rground", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setRground(Resistance rground){
		this.rground = rground;
	}

	public Reactance getXground(){
		return this.xground;
	}

	@FieldSetter(fieldName = "TransformerEnd.xground", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setXground(Reactance xground){
		this.xground = xground;
	}

	public BaseVoltage getBaseVoltage(){
		return this.BaseVoltage;
	}

	@AssociationSetter(fieldName = "TransformerEnd.BaseVoltage", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.BaseVoltage", cardinality = "one")
	public void setBaseVoltage(BaseVoltage BaseVoltage){
		this.BaseVoltage = BaseVoltage;
	}

	public Terminal getTerminal(){
		return this.Terminal;
	}

	@AssociationSetter(fieldName = "TransformerEnd.Terminal", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.Terminal", cardinality = "one")
	public void setTerminal(Terminal Terminal){
		this.Terminal = Terminal;
	}

	public PhaseTapChanger getPhaseTapChanger(){
		return this.PhaseTapChanger;
	}

	@AssociationSetter(fieldName = "TransformerEnd.PhaseTapChanger", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Wires.PhaseTapChanger", cardinality = "one")
	public void setPhaseTapChanger(PhaseTapChanger PhaseTapChanger){
		this.PhaseTapChanger = PhaseTapChanger;
	}

	@JsonIgnore
	public RatioTapChanger getRatioTapChanger(){
		return this.RatioTapChanger;
	}

	@AssociationSetter(fieldName = "TransformerEnd.RatioTapChanger", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Wires.RatioTapChanger", cardinality = "one")
	public void setRatioTapChanger(RatioTapChanger RatioTapChanger){
		this.RatioTapChanger = RatioTapChanger;
	}

	public TransformerEnd(){

	}

}
