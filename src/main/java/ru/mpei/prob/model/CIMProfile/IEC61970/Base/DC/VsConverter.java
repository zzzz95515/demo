package ru.mpei.prob.model.CIMProfile.IEC61970.Base.DC;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.*;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * DC side of the voltage source converter (VSC).
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:51 MSK 2020
 */

@Entity
@Table(name = "vsconverter")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class VsConverter extends ACDCConverter {
	/**
	 * Angle between uf and uc. Converter state variable used in power flow.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="delta_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="delta_unit")),
		@AttributeOverride(name="value", column=@Column(name="delta_value")),
	})
	private AngleDegrees delta;
	/**
	 * Droop constant; pu value is obtained as D [kV^2 / MW] x Sb / Ubdc^2.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="droop_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="droop_unit")),
		@AttributeOverride(name="value", column=@Column(name="droop_value")),
	})
	private PU droop;
	/**
	 * Compensation (resistance) constant. Used to compensate for voltage drop 
	 * when controlling voltage at a distant bus.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="droopCompensation_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="droopCompensation_unit")),
		@AttributeOverride(name="value", column=@Column(name="droopCompensation_value")),
	})
	private Resistance droopCompensation;
	/**
	 * The max quotient between the AC converter voltage (Uc) and DC voltage (Ud). 
	 * A factor typically less than 1. VSC configuration data used in power flow.
	 */
	@Column(name="maxModulationIndex", nullable = true)
	private Float maxModulationIndex;
	/**
	 * The maximum current through a valve. This current limit is the basis for 
	 * calculating the capability diagram. VSC  configuration data.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="maxValveCurrent_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="maxValveCurrent_unit")),
		@AttributeOverride(name="value", column=@Column(name="maxValveCurrent_value")),
	})
	private CurrentFlow maxValveCurrent;
	/**
	 * Kind of control of real power and/or DC voltage.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "pPccControl")
	private VsPpccControlKind pPccControl;
	@Enumerated(EnumType.STRING)
	@Column(name = "qPccControl")
	private VsQpccControlKind qPccControl;
	/**
	 * Reactive power sharing factor among parallel converters on Uac control.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="qShare_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="qShare_unit")),
		@AttributeOverride(name="value", column=@Column(name="qShare_value")),
	})
	private PerCent qShare;
	/**
	 * Reactive power injection target in AC grid, at point of common coupling.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="targetQpcc_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="targetQpcc_unit")),
		@AttributeOverride(name="value", column=@Column(name="targetQpcc_value")),
	})
	private ReactivePower targetQpcc;
	/**
	 * Voltage target in AC grid, at point of common coupling.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="targetUpcc_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="targetUpcc_unit")),
		@AttributeOverride(name="value", column=@Column(name="targetUpcc_value")),
	})
	private Voltage targetUpcc;
	/**
	 * Filter bus voltage. Converter state variable, result from power flow.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="uf_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="uf_unit")),
		@AttributeOverride(name="value", column=@Column(name="uf_value")),
	})
	private Voltage uf;

	/**
	 * All converters with this capability curve.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "capabilitycurve_mrid")
	@JoinColumn(name = "capabilitycurve_projectid")
	@JoinColumn(name = "capabilitycurve_synthesizedschemenumber")
	@JoinColumn(name = "capabilitycurve_schemascenarionumber")
	private VsCapabilityCurve CapabilityCurve;

	public AngleDegrees getDelta(){
		return this.delta;
	}

	@FieldSetter(fieldName = "VsConverter.delta", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setDelta(AngleDegrees delta){
		this.delta = delta;
	}

	public PU getDroop(){
		return this.droop;
	}

	@FieldSetter(fieldName = "VsConverter.droop", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setDroop(PU droop){
		this.droop = droop;
	}

	public Resistance getDroopCompensation(){
		return this.droopCompensation;
	}

	@FieldSetter(fieldName = "VsConverter.droopCompensation", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setDroopCompensation(Resistance droopCompensation){
		this.droopCompensation = droopCompensation;
	}

	public Float getMaxModulationIndex(){
		return this.maxModulationIndex;
	}

	@FieldSetter(fieldName = "VsConverter.maxModulationIndex", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setMaxModulationIndex(Float maxModulationIndex){
		this.maxModulationIndex = maxModulationIndex;
	}

	public CurrentFlow getMaxValveCurrent(){
		return this.maxValveCurrent;
	}

	@FieldSetter(fieldName = "VsConverter.maxValveCurrent", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMaxValveCurrent(CurrentFlow maxValveCurrent){
		this.maxValveCurrent = maxValveCurrent;
	}

	public VsPpccControlKind getPPccControl(){
		return this.pPccControl;
	}

	@FieldSetter(fieldName = "VsConverter.pPccControl", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setPPccControl(VsPpccControlKind pPccControl){
		this.pPccControl = pPccControl;
	}

	public VsQpccControlKind getQPccControl(){
		return this.qPccControl;
	}

	@FieldSetter(fieldName = "VsConverter.qPccControl", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setQPccControl(VsQpccControlKind qPccControl){
		this.qPccControl = qPccControl;
	}

	public PerCent getQShare(){
		return this.qShare;
	}

	@FieldSetter(fieldName = "VsConverter.qShare", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setQShare(PerCent qShare){
		this.qShare = qShare;
	}

	public ReactivePower getTargetQpcc(){
		return this.targetQpcc;
	}

	@FieldSetter(fieldName = "VsConverter.targetQpcc", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setTargetQpcc(ReactivePower targetQpcc){
		this.targetQpcc = targetQpcc;
	}

	public Voltage getTargetUpcc(){
		return this.targetUpcc;
	}

	@FieldSetter(fieldName = "VsConverter.targetUpcc", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setTargetUpcc(Voltage targetUpcc){
		this.targetUpcc = targetUpcc;
	}

	public Voltage getUf(){
		return this.uf;
	}

	@FieldSetter(fieldName = "VsConverter.uf", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setUf(Voltage uf){
		this.uf = uf;
	}

	public VsCapabilityCurve getCapabilityCurve(){
		return this.CapabilityCurve;
	}

	@AssociationSetter(fieldName = "VsConverter.CapabilityCurve", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.DC.VsCapabilityCurve", cardinality = "one")
	public void setCapabilityCurve(VsCapabilityCurve CapabilityCurve){
		this.CapabilityCurve = CapabilityCurve;
	}

	public VsConverter(){

	}

}
