package ru.mpei.prob.model.CIMProfile.IEC61970.Base.DiagramLayout;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.IdentifiedObject;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * This is used for grouping diagram object points from different diagram 
 * objects that are considered to be glued together in a diagram even if they 
 * are not at the exact same coordinates.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:51 MSK 2020
 */

@Entity
@Table(name = "diagramobjectgluepoint")
@JsonInclude(JsonInclude.Include.NON_NULL)
// surrogate inheritance
public class DiagramObjectGluePoint extends IdentifiedObject{

	/**
	 * The 'glue' point to which this point is associated.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "DiagramObjectGluePoint")
	private List<DiagramObjectPoint> DiagramObjectPoints;

	@JsonIgnore
	public List<DiagramObjectPoint> getDiagramObjectPoints(){
		return this.DiagramObjectPoints;
	}

	@AssociationSetter(fieldName = "DiagramObjectGluePoint.DiagramObjectPoints", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.DiagramLayout.DiagramObjectPoint", cardinality = "many")
	public void setDiagramObjectPoints(List<DiagramObjectPoint> DiagramObjectPoints){
		this.DiagramObjectPoints = DiagramObjectPoints;
	}

	public DiagramObjectGluePoint(){

	}

}
