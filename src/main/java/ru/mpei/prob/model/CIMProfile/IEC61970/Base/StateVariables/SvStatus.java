package ru.mpei.prob.model.CIMProfile.IEC61970.Base.StateVariables;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.ConductingEquipment;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * State variable for status.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:54 MSK 2020
 */

@Entity
@Table(name = "svstatus")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class SvStatus extends StateVariable {
	/**
	 * The in service status as a result of topology processing.
	 */
	@Column(name="inService", nullable = true)
	private Boolean inService;

	/**
	 * The status state variable associated with this conducting equipment.
	 */
	@OneToOne(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "SvStatus")
	private ConductingEquipment ConductingEquipment;

	public Boolean getInService(){
		return this.inService;
	}

	@FieldSetter(fieldName = "SvStatus.inService", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setInService(Boolean inService){
		this.inService = inService;
	}

	@JsonIgnore
	public ConductingEquipment getConductingEquipment(){
		return this.ConductingEquipment;
	}

	@AssociationSetter(fieldName = "SvStatus.ConductingEquipment", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.ConductingEquipment", cardinality = "one")
	public void setConductingEquipment(ConductingEquipment ConductingEquipment){
		this.ConductingEquipment = ConductingEquipment;
	}

	public SvStatus(){

	}

}
