package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Protection;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.CurrentFlow;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Seconds;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Voltage;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * A device that checks current flow values in any direction or designated
 * direction.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:53 MSK 2020
 */

@Entity
@Table(name = "currentrelay")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class CurrentRelay extends ProtectionEquipment {
	/**
	 * Ток обратной последовательности для расчета первой ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="currentForCalculationNegSeqStep1_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="currentForCalculationNegSeqStep1_unit")),
			@AttributeOverride(name="value", column=@Column(name="currentForCalculationNegSeqStep1_value")),
	})
	private CurrentFlow currentForCalculationNegSeqStep1;
	/**
	 * Ток обратной последовательности для расчета второй ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="currentForCalculationNegSeqStep2_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="currentForCalculationNegSeqStep2_unit")),
			@AttributeOverride(name="value", column=@Column(name="currentForCalculationNegSeqStep2_value")),
	})
	private CurrentFlow currentForCalculationNegSeqStep2;
	/**
	 * Ток обратной последовательности для расчета третьей ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="currentForCalculationNegSeqStep3_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="currentForCalculationNegSeqStep3_unit")),
			@AttributeOverride(name="value", column=@Column(name="currentForCalculationNegSeqStep3_value")),
	})
	private CurrentFlow currentForCalculationNegSeqStep3;
	/**
	 * Ток прямой последовательности для расчета первой ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="currentForCalculationPosSeqStep1_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="currentForCalculationPosSeqStep1_unit")),
			@AttributeOverride(name="value", column=@Column(name="currentForCalculationPosSeqStep1_value")),
	})
	private CurrentFlow currentForCalculationPosSeqStep1;
	/**
	 * Ток прямой последовательности для расчета второй ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="currentForCalculationPosSeqStep2_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="currentForCalculationPosSeqStep2_unit")),
			@AttributeOverride(name="value", column=@Column(name="currentForCalculationPosSeqStep2_value")),
	})
	private CurrentFlow currentForCalculationPosSeqStep2;
	/**
	 * Ток прямой последовательности для расчета третьей ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="currentForCalculationPosSeqStep3_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="currentForCalculationPosSeqStep3_unit")),
			@AttributeOverride(name="value", column=@Column(name="currentForCalculationPosSeqStep3_value")),
	})
	private CurrentFlow currentForCalculationPosSeqStep3;
	/**
	 * Ток нулевой последовательности для расчета первой ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="currentForCalculationZeroSeqStep1_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="currentForCalculationZeroSeqStep1_unit")),
			@AttributeOverride(name="value", column=@Column(name="currentForCalculationZeroSeqStep1_value")),
	})
	private CurrentFlow currentForCalculationZeroSeqStep1;
	/**
	 * Ток нулевой последовательности для расчета второй ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="currentForCalculationZeroSeqStep2_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="currentForCalculationZeroSeqStep2_unit")),
			@AttributeOverride(name="value", column=@Column(name="currentForCalculationZeroSeqStep2_value")),
	})
	private CurrentFlow currentForCalculationZeroSeqStep2;
	/**
	 * Ток нулевой последовательности для расчета третьей ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="currentForCalculationZeroSeqStep3_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="currentForCalculationZeroSeqStep3_unit")),
			@AttributeOverride(name="value", column=@Column(name="currentForCalculationZeroSeqStep3_value")),
	})
	private CurrentFlow currentForCalculationZeroSeqStep3;
	/**
	 * Current limit number one 1 for inverse time pickup.
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="currentLimit1_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="currentLimit1_unit")),
			@AttributeOverride(name="value", column=@Column(name="currentLimit1_value")),
	})
	private CurrentFlow currentLimit1;
	/**
	 * Current limit number 2 for inverse time pickup.
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="currentLimit2_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="currentLimit2_unit")),
			@AttributeOverride(name="value", column=@Column(name="currentLimit2_value")),
	})
	private CurrentFlow currentLimit2;
	/**
	 * Current limit number 3 for inverse time pickup.
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="currentLimit3_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="currentLimit3_unit")),
			@AttributeOverride(name="value", column=@Column(name="currentLimit3_value")),
	})
	private CurrentFlow currentLimit3;
	/**
	 * Current limit number 4 for inverse time pickup.
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="currentLimit4_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="currentLimit4_unit")),
			@AttributeOverride(name="value", column=@Column(name="currentLimit4_value")),
	})
	private CurrentFlow currentLimit4;
	/**
	 * Current limit number 5 for inverse time pickup.
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="currentLimit5_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="currentLimit5_unit")),
			@AttributeOverride(name="value", column=@Column(name="currentLimit5_value")),
	})
	private CurrentFlow currentLimit5;
	/**
	 * Ток первой ступени смежной защиты
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="currentOfAdjacentProtectionStep1_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="currentOfAdjacentProtectionStep1_unit")),
			@AttributeOverride(name="value", column=@Column(name="currentOfAdjacentProtectionStep1_value")),
	})
	private CurrentFlow currentOfAdjacentProtectionStep1;
	/**
	 * Ток второй ступени смежной защиты
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="currentOfAdjacentProtectionStep2_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="currentOfAdjacentProtectionStep2_unit")),
			@AttributeOverride(name="value", column=@Column(name="currentOfAdjacentProtectionStep2_value")),
	})
	private CurrentFlow currentOfAdjacentProtectionStep2;
	/**
	 * Ток третьей ступени смежной защиты
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="currentOfAdjacentProtectionStep3_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="currentOfAdjacentProtectionStep3_unit")),
			@AttributeOverride(name="value", column=@Column(name="currentOfAdjacentProtectionStep3_value")),
	})
	private CurrentFlow currentOfAdjacentProtectionStep3;
	/**
	 * Максимальный ток трехфазного КЗ на смежном участке
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="maxForkSCCurrent3_in_Adjacent_area_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="maxForkSCCurrent3_in_Adjacent_area_unit")),
			@AttributeOverride(name="value", column=@Column(name="maxForkSCCurrent3_in_Adjacent_area_value")),
	})
	private CurrentFlow maxForkSCCurrent3_in_Adjacent_area;

	/**
	 * Ток четвертой ступени смежной защиты
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="currentOfAdjacentProtectionStep4_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="currentOfAdjacentProtectionStep4_unit")),
			@AttributeOverride(name="value", column=@Column(name="currentOfAdjacentProtectionStep4_value")),
	})
	private CurrentFlow currentOfAdjacentProtectionStep4;
	/**
	 * Set true if the current relay has inverse time characteristic.
	 */
	@Column(name="inverseTimeFlag", nullable = true)
	private Boolean inverseTimeFlag;
	/**
	 * Коэффициент токораспределения смежных защит для первой ступени
	 */
	@Column(name="koefOfcurrentDistributionForStep1", nullable = true)
	private Float koefOfcurrentDistributionForStep1;
	/**
	 * Коэффициент токораспределения смежных защит для второй ступени
	 */
	@Column(name="koefOfcurrentDistributionForStep2", nullable = true)
	private Float koefOfcurrentDistributionForStep2;
	/**
	 * Коэффициент токораспределения смежных защит для третьей ступени
	 */
	@Column(name="koefOfcurrentDistributionForStep3", nullable = true)
	private Float koefOfcurrentDistributionForStep3;
	/**
	 * Номинальный ток первичной обмотки трансформатора на отпаечной подстанции
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="powerTransformerForkNominalCurrent_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="powerTransformerForkNominalCurrent_unit")),
			@AttributeOverride(name="value", column=@Column(name="powerTransformerForkNominalCurrent_value")),
	})
	private CurrentFlow powerTransformerForkNominalCurrent;
	/**
	 * Inverse time delay number 1 for current limit number 1.
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="timeDelay1_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="timeDelay1_unit")),
			@AttributeOverride(name="value", column=@Column(name="timeDelay1_value")),
	})
	private Seconds timeDelay1;
	/**
	 * Inverse time delay number 2 for current limit number 2.
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="timeDelay2_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="timeDelay2_unit")),
			@AttributeOverride(name="value", column=@Column(name="timeDelay2_value")),
	})
	private Seconds timeDelay2;
	/**
	 * Inverse time delay number 3 for current limit number 3.
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="timeDelay3_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="timeDelay3_unit")),
			@AttributeOverride(name="value", column=@Column(name="timeDelay3_value")),
	})
	private Seconds timeDelay3;
	/**
	 * Inverse time delay number 4 for current limit number 4.
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="timeDelay4_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="timeDelay4_unit")),
			@AttributeOverride(name="value", column=@Column(name="timeDelay4_value")),
	})
	private Seconds timeDelay4;
	/**
	 * Inverse time delay number 5 for current limit number 5.
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="timeDelay5_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="timeDelay5_unit")),
			@AttributeOverride(name="value", column=@Column(name="timeDelay5_value")),
	})
	private Seconds timeDelay5;
	/**
	 * Напряжение обратной последовательности для расчета первой ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="voltageForCalculationNegSeqStep1_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="voltageForCalculationNegSeqStep1_unit")),
			@AttributeOverride(name="value", column=@Column(name="voltageForCalculationNegSeqStep1_value")),
	})
	private Voltage voltageForCalculationNegSeqStep1;
	/**
	 * Напряжение обратной последовательности для расчета второй ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="voltageForCalculationNegSeqStep2_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="voltageForCalculationNegSeqStep2_unit")),
			@AttributeOverride(name="value", column=@Column(name="voltageForCalculationNegSeqStep2_value")),
	})
	private Voltage voltageForCalculationNegSeqStep2;
	/**
	 * Напряжение обратной последовательности для расчета третьей ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="voltageForCalculationNegSeqStep3_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="voltageForCalculationNegSeqStep3_unit")),
			@AttributeOverride(name="value", column=@Column(name="voltageForCalculationNegSeqStep3_value")),
	})
	private Voltage voltageForCalculationNegSeqStep3;
	/**
	 * Напряжение прямой последовательности для расчета первой ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="voltageForCalculationPosSeqStep1_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="voltageForCalculationPosSeqStep1_unit")),
			@AttributeOverride(name="value", column=@Column(name="voltageForCalculationPosSeqStep1_value")),
	})
	private Voltage voltageForCalculationPosSeqStep1;
	/**
	 * Напряжение прямой последовательности для расчета второй ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="voltageForCalculationPosSeqStep2_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="voltageForCalculationPosSeqStep2_unit")),
			@AttributeOverride(name="value", column=@Column(name="voltageForCalculationPosSeqStep2_value")),
	})
	private Voltage voltageForCalculationPosSeqStep2;
	/**
	 * Напряжение прямой последовательности для расчета третьей ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="voltageForCalculationPosSeqStep3_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="voltageForCalculationPosSeqStep3_unit")),
			@AttributeOverride(name="value", column=@Column(name="voltageForCalculationPosSeqStep3_value")),
	})
	private Voltage voltageForCalculationPosSeqStep3;
	/**
	 * Напряжение прямой последовательности для расчета нулевой ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="voltageForCalculationZeroSeqStep1_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="voltageForCalculationZeroSeqStep1_unit")),
			@AttributeOverride(name="value", column=@Column(name="voltageForCalculationZeroSeqStep1_value")),
	})
	private Voltage voltageForCalculationZeroSeqStep1;
	/**
	 * Напряжение прямой последовательности для расчета второй ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="voltageForCalculationZeroSeqStep2_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="voltageForCalculationZeroSeqStep2_unit")),
			@AttributeOverride(name="value", column=@Column(name="voltageForCalculationZeroSeqStep2_value")),
	})
	private Voltage voltageForCalculationZeroSeqStep2;
	/**
	 * Напряжение прямой последовательности для расчета третьей ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="voltageForCalculationZeroSeqStep3_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="voltageForCalculationZeroSeqStep3_unit")),
			@AttributeOverride(name="value", column=@Column(name="voltageForCalculationZeroSeqStep3_value")),
	})
	private Voltage voltageForCalculationZeroSeqStep3;
	/**
	 * Уставка по напряжению первой ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="voltageLimit1_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="voltageLimit1_unit")),
			@AttributeOverride(name="value", column=@Column(name="voltageLimit1_value")),
	})
	private Voltage voltageLimit1;
	/**
	 * Уставка по напряжению второй ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="voltageLimit2_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="voltageLimit2_unit")),
			@AttributeOverride(name="value", column=@Column(name="voltageLimit2_value")),
	})
	private Voltage voltageLimit2;
	/**
	 * Уставка по напряжению третьей ступени
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="voltageLimit3_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="voltageLimit3_unit")),
			@AttributeOverride(name="value", column=@Column(name="voltageLimit3_value")),
	})
	private Voltage voltageLimit3;
	/**
	 * Напряжение первой ступени смежной защиты
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="voltageOfAdjacentProtectionStep1_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="voltageOfAdjacentProtectionStep1_unit")),
			@AttributeOverride(name="value", column=@Column(name="voltageOfAdjacentProtectionStep1_value")),
	})
	private Voltage voltageOfAdjacentProtectionStep1;
	/**
	 * Напряжение второй ступени смежной защиты
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="voltageOfAdjacentProtectionStep2_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="voltageOfAdjacentProtectionStep2_unit")),
			@AttributeOverride(name="value", column=@Column(name="voltageOfAdjacentProtectionStep2_value")),
	})
	private Voltage voltageOfAdjacentProtectionStep2;
	/**
	 * Напряжение третьей ступени смежной защиты
	 */
	@AttributeOverrides({
			@AttributeOverride(name="multiplier", column=@Column(name="voltageOfAdjacentProtectionStep3_multiplier")),
			@AttributeOverride(name="unit", column=@Column(name="voltageOfAdjacentProtectionStep3_unit")),
			@AttributeOverride(name="value", column=@Column(name="voltageOfAdjacentProtectionStep3_value")),
	})
	private Voltage voltageOfAdjacentProtectionStep3;



	public CurrentFlow getCurrentForCalculationNegSeqStep1(){
		return this.currentForCalculationNegSeqStep1;
	}

	@FieldSetter(fieldName = "CurrentRelay.currentForCalculationNegSeqStep1", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrentForCalculationNegSeqStep1(CurrentFlow currentForCalculationNegSeqStep1){
		this.currentForCalculationNegSeqStep1 = currentForCalculationNegSeqStep1;
	}

	public CurrentFlow getCurrentForCalculationNegSeqStep2(){
		return this.currentForCalculationNegSeqStep2;
	}

	@FieldSetter(fieldName = "CurrentRelay.currentForCalculationNegSeqStep2", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrentForCalculationNegSeqStep2(CurrentFlow currentForCalculationNegSeqStep2){
		this.currentForCalculationNegSeqStep2 = currentForCalculationNegSeqStep2;
	}

	public CurrentFlow getCurrentForCalculationNegSeqStep3(){
		return this.currentForCalculationNegSeqStep3;
	}

	@FieldSetter(fieldName = "CurrentRelay.currentForCalculationNegSeqStep3", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrentForCalculationNegSeqStep3(CurrentFlow currentForCalculationNegSeqStep3){
		this.currentForCalculationNegSeqStep3 = currentForCalculationNegSeqStep3;
	}

	public CurrentFlow getCurrentForCalculationPosSeqStep1(){
		return this.currentForCalculationPosSeqStep1;
	}

	@FieldSetter(fieldName = "CurrentRelay.currentForCalculationPosSeqStep1", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrentForCalculationPosSeqStep1(CurrentFlow currentForCalculationPosSeqStep1){
		this.currentForCalculationPosSeqStep1 = currentForCalculationPosSeqStep1;
	}

	public CurrentFlow getCurrentForCalculationPosSeqStep2(){
		return this.currentForCalculationPosSeqStep2;
	}

	@FieldSetter(fieldName = "CurrentRelay.currentForCalculationPosSeqStep2", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrentForCalculationPosSeqStep2(CurrentFlow currentForCalculationPosSeqStep2){
		this.currentForCalculationPosSeqStep2 = currentForCalculationPosSeqStep2;
	}

	public CurrentFlow getCurrentForCalculationPosSeqStep3(){
		return this.currentForCalculationPosSeqStep3;
	}

	@FieldSetter(fieldName = "CurrentRelay.currentForCalculationPosSeqStep3", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrentForCalculationPosSeqStep3(CurrentFlow currentForCalculationPosSeqStep3){
		this.currentForCalculationPosSeqStep3 = currentForCalculationPosSeqStep3;
	}

	public CurrentFlow getCurrentForCalculationZeroSeqStep1(){
		return this.currentForCalculationZeroSeqStep1;
	}

	@FieldSetter(fieldName = "CurrentRelay.currentForCalculationZeroSeqStep1", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrentForCalculationZeroSeqStep1(CurrentFlow currentForCalculationZeroSeqStep1){
		this.currentForCalculationZeroSeqStep1 = currentForCalculationZeroSeqStep1;
	}

	public CurrentFlow getCurrentForCalculationZeroSeqStep2(){
		return this.currentForCalculationZeroSeqStep2;
	}

	@FieldSetter(fieldName = "CurrentRelay.currentForCalculationZeroSeqStep2", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrentForCalculationZeroSeqStep2(CurrentFlow currentForCalculationZeroSeqStep2){
		this.currentForCalculationZeroSeqStep2 = currentForCalculationZeroSeqStep2;
	}

	public CurrentFlow getCurrentForCalculationZeroSeqStep3(){
		return this.currentForCalculationZeroSeqStep3;
	}

	@FieldSetter(fieldName = "CurrentRelay.currentForCalculationZeroSeqStep3", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrentForCalculationZeroSeqStep3(CurrentFlow currentForCalculationZeroSeqStep3){
		this.currentForCalculationZeroSeqStep3 = currentForCalculationZeroSeqStep3;
	}

	public CurrentFlow getCurrentLimit1(){
		return this.currentLimit1;
	}

	@FieldSetter(fieldName = "CurrentRelay.currentLimit1", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setCurrentLimit1(CurrentFlow currentLimit1){
		this.currentLimit1 = currentLimit1;
	}

	public CurrentFlow getCurrentLimit2(){
		return this.currentLimit2;
	}

	@FieldSetter(fieldName = "CurrentRelay.currentLimit2", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setCurrentLimit2(CurrentFlow currentLimit2){
		this.currentLimit2 = currentLimit2;
	}

	public CurrentFlow getCurrentLimit3(){
		return this.currentLimit3;
	}

	@FieldSetter(fieldName = "CurrentRelay.currentLimit3", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setCurrentLimit3(CurrentFlow currentLimit3){
		this.currentLimit3 = currentLimit3;
	}

	public CurrentFlow getCurrentLimit4(){
		return this.currentLimit4;
	}

	@FieldSetter(fieldName = "CurrentRelay.currentLimit4", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrentLimit4(CurrentFlow currentLimit4){
		this.currentLimit4 = currentLimit4;
	}

	public CurrentFlow getCurrentLimit5(){
		return this.currentLimit5;
	}

	@FieldSetter(fieldName = "CurrentRelay.currentLimit5", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrentLimit5(CurrentFlow currentLimit5){
		this.currentLimit5 = currentLimit5;
	}

	public CurrentFlow getCurrentOfAdjacentProtectionStep1(){
		return this.currentOfAdjacentProtectionStep1;
	}

	@FieldSetter(fieldName = "CurrentRelay.currentOfAdjacentProtectionStep1", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrentOfAdjacentProtectionStep1(CurrentFlow currentOfAdjacentProtectionStep1){
		this.currentOfAdjacentProtectionStep1 = currentOfAdjacentProtectionStep1;
	}

	public CurrentFlow getCurrentOfAdjacentProtectionStep2(){
		return this.currentOfAdjacentProtectionStep2;
	}

	@FieldSetter(fieldName = "CurrentRelay.currentOfAdjacentProtectionStep2", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrentOfAdjacentProtectionStep2(CurrentFlow currentOfAdjacentProtectionStep2){
		this.currentOfAdjacentProtectionStep2 = currentOfAdjacentProtectionStep2;
	}

	public CurrentFlow getCurrentOfAdjacentProtectionStep3(){
		return this.currentOfAdjacentProtectionStep3;
	}

	@FieldSetter(fieldName = "CurrentRelay.maxForkSCCurrent3_in_Adjacent_area", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setMaxForkSCCurrent3_in_Adjacent_area(CurrentFlow maxForkSCCurrent3_in_Adjacent_area){
		this.maxForkSCCurrent3_in_Adjacent_area = maxForkSCCurrent3_in_Adjacent_area;
	}

	public CurrentFlow getMaxForkSCCurrent3_in_Adjacent_area(){
		return this.maxForkSCCurrent3_in_Adjacent_area;
	}


	@FieldSetter(fieldName = "CurrentRelay.currentOfAdjacentProtectionStep3", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrentOfAdjacentProtectionStep3(CurrentFlow currentOfAdjacentProtectionStep3){
		this.currentOfAdjacentProtectionStep3 = currentOfAdjacentProtectionStep3;
	}

	public CurrentFlow getCurrentOfAdjacentProtectionStep4(){
		return this.currentOfAdjacentProtectionStep4;
	}

	@FieldSetter(fieldName = "CurrentRelay.currentOfAdjacentProtectionStep4", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setCurrentOfAdjacentProtectionStep4(CurrentFlow currentOfAdjacentProtectionStep4){
		this.currentOfAdjacentProtectionStep4 = currentOfAdjacentProtectionStep4;
	}

	public Boolean getInverseTimeFlag(){
		return this.inverseTimeFlag;
	}

	@FieldSetter(fieldName = "CurrentRelay.inverseTimeFlag", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setInverseTimeFlag(Boolean inverseTimeFlag){
		this.inverseTimeFlag = inverseTimeFlag;
	}

	public Float getKoefOfcurrentDistributionForStep1(){
		return this.koefOfcurrentDistributionForStep1;
	}

	@FieldSetter(fieldName = "CurrentRelay.koefOfcurrentDistributionForStep1", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setKoefOfcurrentDistributionForStep1(Float koefOfcurrentDistributionForStep1){
		this.koefOfcurrentDistributionForStep1 = koefOfcurrentDistributionForStep1;
	}

	public Float getKoefOfcurrentDistributionForStep2(){
		return this.koefOfcurrentDistributionForStep2;
	}

	@FieldSetter(fieldName = "CurrentRelay.koefOfcurrentDistributionForStep2", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setKoefOfcurrentDistributionForStep2(Float koefOfcurrentDistributionForStep2){
		this.koefOfcurrentDistributionForStep2 = koefOfcurrentDistributionForStep2;
	}

	public Float getKoefOfcurrentDistributionForStep3(){
		return this.koefOfcurrentDistributionForStep3;
	}

	@FieldSetter(fieldName = "CurrentRelay.koefOfcurrentDistributionForStep3", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setKoefOfcurrentDistributionForStep3(Float koefOfcurrentDistributionForStep3){
		this.koefOfcurrentDistributionForStep3 = koefOfcurrentDistributionForStep3;
	}

	public CurrentFlow getPowerTransformerForkNominalCurrent(){
		return this.powerTransformerForkNominalCurrent;
	}

	@FieldSetter(fieldName = "CurrentRelay.powerTransformerForkNominalCurrent", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setPowerTransformerForkNominalCurrent(CurrentFlow powerTransformerForkNominalCurrent){
		this.powerTransformerForkNominalCurrent = powerTransformerForkNominalCurrent;
	}

	public Seconds getTimeDelay1(){
		return this.timeDelay1;
	}

	@FieldSetter(fieldName = "CurrentRelay.timeDelay1", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setTimeDelay1(Seconds timeDelay1){
		this.timeDelay1 = timeDelay1;
	}

	public Seconds getTimeDelay2(){
		return this.timeDelay2;
	}

	@FieldSetter(fieldName = "CurrentRelay.timeDelay2", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setTimeDelay2(Seconds timeDelay2){
		this.timeDelay2 = timeDelay2;
	}

	public Seconds getTimeDelay3(){
		return this.timeDelay3;
	}

	@FieldSetter(fieldName = "CurrentRelay.timeDelay3", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setTimeDelay3(Seconds timeDelay3){
		this.timeDelay3 = timeDelay3;
	}

	public Seconds getTimeDelay4(){
		return this.timeDelay4;
	}

	@FieldSetter(fieldName = "CurrentRelay.timeDelay4", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setTimeDelay4(Seconds timeDelay4){
		this.timeDelay4 = timeDelay4;
	}

	public Seconds getTimeDelay5(){
		return this.timeDelay5;
	}

	@FieldSetter(fieldName = "CurrentRelay.timeDelay5", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setTimeDelay5(Seconds timeDelay5){
		this.timeDelay5 = timeDelay5;
	}

	public Voltage getVoltageForCalculationNegSeqStep1(){
		return this.voltageForCalculationNegSeqStep1;
	}

	@FieldSetter(fieldName = "CurrentRelay.voltageForCalculationNegSeqStep1", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setVoltageForCalculationNegSeqStep1(Voltage voltageForCalculationNegSeqStep1){
		this.voltageForCalculationNegSeqStep1 = voltageForCalculationNegSeqStep1;
	}

	public Voltage getVoltageForCalculationNegSeqStep2(){
		return this.voltageForCalculationNegSeqStep2;
	}

	@FieldSetter(fieldName = "CurrentRelay.voltageForCalculationNegSeqStep2", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setVoltageForCalculationNegSeqStep2(Voltage voltageForCalculationNegSeqStep2){
		this.voltageForCalculationNegSeqStep2 = voltageForCalculationNegSeqStep2;
	}

	public Voltage getVoltageForCalculationNegSeqStep3(){
		return this.voltageForCalculationNegSeqStep3;
	}

	@FieldSetter(fieldName = "CurrentRelay.voltageForCalculationNegSeqStep3", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setVoltageForCalculationNegSeqStep3(Voltage voltageForCalculationNegSeqStep3){
		this.voltageForCalculationNegSeqStep3 = voltageForCalculationNegSeqStep3;
	}

	public Voltage getVoltageForCalculationPosSeqStep1(){
		return this.voltageForCalculationPosSeqStep1;
	}

	@FieldSetter(fieldName = "CurrentRelay.voltageForCalculationPosSeqStep1", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setVoltageForCalculationPosSeqStep1(Voltage voltageForCalculationPosSeqStep1){
		this.voltageForCalculationPosSeqStep1 = voltageForCalculationPosSeqStep1;
	}

	public Voltage getVoltageForCalculationPosSeqStep2(){
		return this.voltageForCalculationPosSeqStep2;
	}

	@FieldSetter(fieldName = "CurrentRelay.voltageForCalculationPosSeqStep2", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setVoltageForCalculationPosSeqStep2(Voltage voltageForCalculationPosSeqStep2){
		this.voltageForCalculationPosSeqStep2 = voltageForCalculationPosSeqStep2;
	}

	public Voltage getVoltageForCalculationPosSeqStep3(){
		return this.voltageForCalculationPosSeqStep3;
	}

	@FieldSetter(fieldName = "CurrentRelay.voltageForCalculationPosSeqStep3", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setVoltageForCalculationPosSeqStep3(Voltage voltageForCalculationPosSeqStep3){
		this.voltageForCalculationPosSeqStep3 = voltageForCalculationPosSeqStep3;
	}

	public Voltage getVoltageForCalculationZeroSeqStep1(){
		return this.voltageForCalculationZeroSeqStep1;
	}

	@FieldSetter(fieldName = "CurrentRelay.voltageForCalculationZeroSeqStep1", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setVoltageForCalculationZeroSeqStep1(Voltage voltageForCalculationZeroSeqStep1){
		this.voltageForCalculationZeroSeqStep1 = voltageForCalculationZeroSeqStep1;
	}

	public Voltage getVoltageForCalculationZeroSeqStep2(){
		return this.voltageForCalculationZeroSeqStep2;
	}

	@FieldSetter(fieldName = "CurrentRelay.voltageForCalculationZeroSeqStep2", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setVoltageForCalculationZeroSeqStep2(Voltage voltageForCalculationZeroSeqStep2){
		this.voltageForCalculationZeroSeqStep2 = voltageForCalculationZeroSeqStep2;
	}

	public Voltage getVoltageForCalculationZeroSeqStep3(){
		return this.voltageForCalculationZeroSeqStep3;
	}

	@FieldSetter(fieldName = "CurrentRelay.voltageForCalculationZeroSeqStep3", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setVoltageForCalculationZeroSeqStep3(Voltage voltageForCalculationZeroSeqStep3){
		this.voltageForCalculationZeroSeqStep3 = voltageForCalculationZeroSeqStep3;
	}

	public Voltage getVoltageLimit1(){
		return this.voltageLimit1;
	}

	@FieldSetter(fieldName = "CurrentRelay.voltageLimit1", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setVoltageLimit1(Voltage voltageLimit1){
		this.voltageLimit1 = voltageLimit1;
	}

	public Voltage getVoltageLimit2(){
		return this.voltageLimit2;
	}

	@FieldSetter(fieldName = "CurrentRelay.voltageLimit2", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setVoltageLimit2(Voltage voltageLimit2){
		this.voltageLimit2 = voltageLimit2;
	}

	public Voltage getVoltageLimit3(){
		return this.voltageLimit3;
	}

	@FieldSetter(fieldName = "CurrentRelay.voltageLimit3", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setVoltageLimit3(Voltage voltageLimit3){
		this.voltageLimit3 = voltageLimit3;
	}

	public Voltage getVoltageOfAdjacentProtectionStep1(){
		return this.voltageOfAdjacentProtectionStep1;
	}

	@FieldSetter(fieldName = "CurrentRelay.voltageOfAdjacentProtectionStep1", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setVoltageOfAdjacentProtectionStep1(Voltage voltageOfAdjacentProtectionStep1){
		this.voltageOfAdjacentProtectionStep1 = voltageOfAdjacentProtectionStep1;
	}

	public Voltage getVoltageOfAdjacentProtectionStep2(){
		return this.voltageOfAdjacentProtectionStep2;
	}

	@FieldSetter(fieldName = "CurrentRelay.voltageOfAdjacentProtectionStep2", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setVoltageOfAdjacentProtectionStep2(Voltage voltageOfAdjacentProtectionStep2){
		this.voltageOfAdjacentProtectionStep2 = voltageOfAdjacentProtectionStep2;
	}

	public Voltage getVoltageOfAdjacentProtectionStep3(){
		return this.voltageOfAdjacentProtectionStep3;
	}

	@FieldSetter(fieldName = "CurrentRelay.voltageOfAdjacentProtectionStep3", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setVoltageOfAdjacentProtectionStep3(Voltage voltageOfAdjacentProtectionStep3){
		this.voltageOfAdjacentProtectionStep3 = voltageOfAdjacentProtectionStep3;
	}


	public CurrentRelay(){

	}

}
