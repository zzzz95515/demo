package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Faults.Fault;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * The parts of a power system that are physical devices, electronic or mechanical.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:50 MSK 2020
 */

@Entity
@Table(name = "equipment")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Equipment extends PowerSystemResource {
	/**
	 * The single instance of equipment represents multiple pieces of equipment 
	 * that have been modeled together as an aggregate.  Examples would be power 
	 * transformers or synchronous machines operating in parallel modeled as a 
	 * single aggregate power transformer or aggregate synchronous machine.  This 
	 * is not to be used to indicate equipment that is part of a group of interdependent 
	 * equipment produced by a network production program.  
	 */
	@Column(name="aggregate", nullable = true)
	private Boolean aggregate;
	/**
	 * Параметр потока отказов
	 */
	@Column(name="failureFlow", nullable = true)
	private Float failureFlow;
	/**
	 * If true, the equipment is normally in service.
	 */
	@Column(name="normallyInService", nullable = true)
	private Boolean normallyInService;
	/**
	 * Время восстановления, час.
	 */
	@Column(name="recoveryTime", nullable = true)
	private Float recoveryTime;

	/**
	 * Equipment carrying this fault.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "FaultyEquipment")
	private List<Fault> Faults;
	/**
	 * Contained equipment.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "equipmentcontainer_mrid")
	@JoinColumn(name = "equipmentcontainer_projectid")
	@JoinColumn(name = "equipmentcontainer_synthesizedschemenumber")
	@JoinColumn(name = "equipmentcontainer_schemascenarionumber")
	private EquipmentContainer EquipmentContainer;

	public Boolean getAggregate(){
		return this.aggregate;
	}

	@FieldSetter(fieldName = "Equipment.aggregate", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setAggregate(Boolean aggregate){
		this.aggregate = aggregate;
	}

	public Float getFailureFlow(){
		return this.failureFlow;
	}

	@FieldSetter(fieldName = "Equipment.failureFlow", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setFailureFlow(Float failureFlow){
		this.failureFlow = failureFlow;
	}

	public Boolean getNormallyInService(){
		return this.normallyInService;
	}

	@FieldSetter(fieldName = "Equipment.normallyInService", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setNormallyInService(Boolean normallyInService){
		this.normallyInService = normallyInService;
	}

	public Float getRecoveryTime(){
		return this.recoveryTime;
	}

	@FieldSetter(fieldName = "Equipment.recoveryTime", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setRecoveryTime(Float recoveryTime){
		this.recoveryTime = recoveryTime;
	}

	@JsonIgnore
	public List<Fault> getFaults(){
		return this.Faults;
	}

	@AssociationSetter(fieldName = "Equipment.Faults", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Faults.Fault", cardinality = "many")
	public void setFaults(List<Fault> Faults){
		this.Faults = Faults;
	}

	public EquipmentContainer getEquipmentContainer(){
		return this.EquipmentContainer;
	}

	@AssociationSetter(fieldName = "Equipment.EquipmentContainer", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.EquipmentContainer", cardinality = "one")
	public void setEquipmentContainer(EquipmentContainer EquipmentContainer){
		this.EquipmentContainer = EquipmentContainer;
	}

	public Equipment(){

	}

}
