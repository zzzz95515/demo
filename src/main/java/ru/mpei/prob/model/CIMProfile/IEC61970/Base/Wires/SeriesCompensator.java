package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.ConductingEquipment;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.CurrentFlow;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Reactance;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Resistance;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Voltage;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * A Series Compensator is a series capacitor or reactor or an AC transmission 
 * line without charging susceptance.  It is a two terminal device.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:55 MSK 2020
 */

@Entity
@Table(name = "seriescompensator")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class SeriesCompensator extends ConductingEquipment {
	/**
	 * Positive sequence resistance.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="r_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="r_unit")),
		@AttributeOverride(name="value", column=@Column(name="r_value")),
	})
	private Resistance r;
	/**
	 * Zero sequence resistance.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="r0_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="r0_unit")),
		@AttributeOverride(name="value", column=@Column(name="r0_value")),
	})
	private Resistance r0;
	/**
	 * Describe if a metal oxide varistor (mov) for over voltage protection is 
	 * configured at the series compensator.
	 */
	@Column(name="varistorPresent", nullable = true)
	private Boolean varistorPresent;
	/**
	 * The maximum current the varistor is designed to handle at specified duration.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="varistorRatedCurrent_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="varistorRatedCurrent_unit")),
		@AttributeOverride(name="value", column=@Column(name="varistorRatedCurrent_value")),
	})
	private CurrentFlow varistorRatedCurrent;
	/**
	 * The dc voltage at which the varistor start conducting.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="varistorVoltageThreshold_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="varistorVoltageThreshold_unit")),
		@AttributeOverride(name="value", column=@Column(name="varistorVoltageThreshold_value")),
	})
	private Voltage varistorVoltageThreshold;
	/**
	 * Positive sequence reactance.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="x_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="x_unit")),
		@AttributeOverride(name="value", column=@Column(name="x_value")),
	})
	private Reactance x;
	/**
	 * Zero sequence reactance.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="x0_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="x0_unit")),
		@AttributeOverride(name="value", column=@Column(name="x0_value")),
	})
	private Reactance x0;


	public Resistance getR(){
		return this.r;
	}

	@FieldSetter(fieldName = "SeriesCompensator.r", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setR(Resistance r){
		this.r = r;
	}

	public Resistance getR0(){
		return this.r0;
	}

	@FieldSetter(fieldName = "SeriesCompensator.r0", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setR0(Resistance r0){
		this.r0 = r0;
	}

	public Boolean getVaristorPresent(){
		return this.varistorPresent;
	}

	@FieldSetter(fieldName = "SeriesCompensator.varistorPresent", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setVaristorPresent(Boolean varistorPresent){
		this.varistorPresent = varistorPresent;
	}

	public CurrentFlow getVaristorRatedCurrent(){
		return this.varistorRatedCurrent;
	}

	@FieldSetter(fieldName = "SeriesCompensator.varistorRatedCurrent", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setVaristorRatedCurrent(CurrentFlow varistorRatedCurrent){
		this.varistorRatedCurrent = varistorRatedCurrent;
	}

	public Voltage getVaristorVoltageThreshold(){
		return this.varistorVoltageThreshold;
	}

	@FieldSetter(fieldName = "SeriesCompensator.varistorVoltageThreshold", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setVaristorVoltageThreshold(Voltage varistorVoltageThreshold){
		this.varistorVoltageThreshold = varistorVoltageThreshold;
	}

	public Reactance getX(){
		return this.x;
	}

	@FieldSetter(fieldName = "SeriesCompensator.x", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setX(Reactance x){
		this.x = x;
	}

	public Reactance getX0(){
		return this.x0;
	}

	@FieldSetter(fieldName = "SeriesCompensator.x0", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setX0(Reactance x0){
		this.x0 = x0;
	}

	public SeriesCompensator(){

	}

}
