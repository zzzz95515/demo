package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.*;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * This class represents external network and it is used for IEC 60909 calculations.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:55 MSK 2020
 */

@Entity
@Table(name = "externalnetworkinjection")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ExternalNetworkInjection extends RegulatingCondEq {
	/**
	 * Power Frequency Bias. This is the change in power injection divided by 
	 * the change in frequency and negated.  A positive value of the power frequency 
	 * bias provides additional power injection upon a drop in frequency.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="denominatorMultiplier", column=@Column(name="governorSCD_denominatorMultiplier")),
		@AttributeOverride(name="denominatorUnit", column=@Column(name="governorSCD_denominatorUnit")),
		@AttributeOverride(name="multiplier", column=@Column(name="governorSCD_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="governorSCD_unit")),
		@AttributeOverride(name="value", column=@Column(name="governorSCD_value")),
	})
	private ActivePowerPerFrequency governorSCD;
	/**
	 * Indicates whether initial symmetrical short-circuit current and power have 
	 * been calculated according to IEC (Ik").
	 */
	@Column(name="ikSecond", nullable = true)
	private Boolean ikSecond;
	/**
	 *   Maximum initial symmetrical short-circuit currents (Ik" max) in A (Ik" 
	 * = Sk"/(SQRT(3) Un)). Used for short circuit data exchange according to 
	 * IEC 60909
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="maxInitialSymShCCurrent_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="maxInitialSymShCCurrent_unit")),
		@AttributeOverride(name="value", column=@Column(name="maxInitialSymShCCurrent_value")),
	})
	private CurrentFlow maxInitialSymShCCurrent;
	/**
	 * Maximum active power of the injection.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="maxP_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="maxP_unit")),
		@AttributeOverride(name="value", column=@Column(name="maxP_value")),
	})
	private ActivePower maxP;
	/**
	 * Not for short circuit modelling; It is used for modelling of infeed for 
	 * load flow exchange. If maxQ and minQ are not used ReactiveCapabilityCurve 
	 * can be used 
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="maxQ_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="maxQ_unit")),
		@AttributeOverride(name="value", column=@Column(name="maxQ_value")),
	})
	private ReactivePower maxQ;
	/**
	 * Maximum ratio of zero sequence resistance of Network Feeder to its zero 
	 * sequence reactance (R(0)/X(0) max). Used for short circuit data exchange 
	 * according to IEC 60909
	 */
	@Column(name="maxR0ToX0Ratio", nullable = true)
	private Float maxR0ToX0Ratio;
	/**
	 * Maximum ratio of positive sequence resistance of Network Feeder to its 
	 * positive sequence reactance (R(1)/X(1) max). Used for short circuit data 
	 * exchange according to IEC 60909
	 */
	@Column(name="maxR1ToX1Ratio", nullable = true)
	private Float maxR1ToX1Ratio;
	/**
	 * Maximum ratio of zero sequence impedance to its positive sequence impedance 
	 * (Z(0)/Z(1) max). Used for short circuit data exchange according to IEC 
	 * 60909
	 */
	@Column(name="maxZ0ToZ1Ratio", nullable = true)
	private Float maxZ0ToZ1Ratio;
	/**
	 * Minimum initial symmetrical short-circuit currents (Ik" min) in A (Ik" 
	 * = Sk"/(SQRT(3) Un)). Used for short circuit data exchange according to 
	 * IEC 60909
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="minInitialSymShCCurrent_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="minInitialSymShCCurrent_unit")),
		@AttributeOverride(name="value", column=@Column(name="minInitialSymShCCurrent_value")),
	})
	private CurrentFlow minInitialSymShCCurrent;
	/**
	 * Minimum active power of the injection.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="minP_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="minP_unit")),
		@AttributeOverride(name="value", column=@Column(name="minP_value")),
	})
	private ActivePower minP;
	/**
	 * Not for short circuit modelling; It is used for modelling of infeed for 
	 * load flow exchange. If maxQ and minQ are not used ReactiveCapabilityCurve 
	 * can be used
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="minQ_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="minQ_unit")),
		@AttributeOverride(name="value", column=@Column(name="minQ_value")),
	})
	private ReactivePower minQ;
	/**
	 * Indicates whether initial symmetrical short-circuit current and power have 
	 * been calculated according to IEC (Ik"). Used for short circuit data exchange 
	 * according to IEC 6090
	 */
	@Column(name="minR0ToX0Ratio", nullable = true)
	private Float minR0ToX0Ratio;
	/**
	 * Minimum ratio of positive sequence resistance of Network Feeder to its 
	 * positive sequence reactance (R(1)/X(1) min). Used for short circuit data 
	 * exchange according to IEC 60909
	 */
	@Column(name="minR1ToX1Ratio", nullable = true)
	private Float minR1ToX1Ratio;
	/**
	 * Minimum ratio of zero sequence impedance to its positive sequence impedance 
	 * (Z(0)/Z(1) min). Used for short circuit data exchange according to IEC 
	 * 60909
	 */
	@Column(name="minZ0ToZ1Ratio", nullable = true)
	private Float minZ0ToZ1Ratio;
	/**
	 * Active power injection. Load sign convention is used, i.e. positive sign 
	 * means flow out from a node.Starting value for steady state solutions.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="p_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="p_unit")),
		@AttributeOverride(name="value", column=@Column(name="p_value")),
	})
	private ActivePower p;
	/**
	 * Reactive power injection. Load sign convention is used, i.e. positive sign 
	 * means flow out from a node.Starting value for steady state solutions.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="q_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="q_unit")),
		@AttributeOverride(name="value", column=@Column(name="q_value")),
	})
	private ReactivePower q;
	/**
	 * Priority of unit for use as powerflow voltage phase angle reference bus 
	 * selection. 0 = don t care (default) 1 = highest priority. 2 is less than 
	 * 1 and so on.
	 */
	@Column(name="referencePriority", nullable = true)
	private Integer referencePriority;
	/**
	 * Voltage factor in pu, which was used to calculate short-circuit current 
	 * Ik" and power Sk".
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="voltageFactor_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="voltageFactor_unit")),
		@AttributeOverride(name="value", column=@Column(name="voltageFactor_value")),
	})
	private PU voltageFactor;


	public ActivePowerPerFrequency getGovernorSCD(){
		return this.governorSCD;
	}

	@FieldSetter(fieldName = "ExternalNetworkInjection.governorSCD", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setGovernorSCD(ActivePowerPerFrequency governorSCD){
		this.governorSCD = governorSCD;
	}

	public Boolean getIkSecond(){
		return this.ikSecond;
	}

	@FieldSetter(fieldName = "ExternalNetworkInjection.ikSecond", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setIkSecond(Boolean ikSecond){
		this.ikSecond = ikSecond;
	}

	public CurrentFlow getMaxInitialSymShCCurrent(){
		return this.maxInitialSymShCCurrent;
	}

	@FieldSetter(fieldName = "ExternalNetworkInjection.maxInitialSymShCCurrent", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMaxInitialSymShCCurrent(CurrentFlow maxInitialSymShCCurrent){
		this.maxInitialSymShCCurrent = maxInitialSymShCCurrent;
	}

	public ActivePower getMaxP(){
		return this.maxP;
	}

	@FieldSetter(fieldName = "ExternalNetworkInjection.maxP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMaxP(ActivePower maxP){
		this.maxP = maxP;
	}

	public ReactivePower getMaxQ(){
		return this.maxQ;
	}

	@FieldSetter(fieldName = "ExternalNetworkInjection.maxQ", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMaxQ(ReactivePower maxQ){
		this.maxQ = maxQ;
	}

	public Float getMaxR0ToX0Ratio(){
		return this.maxR0ToX0Ratio;
	}

	@FieldSetter(fieldName = "ExternalNetworkInjection.maxR0ToX0Ratio", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setMaxR0ToX0Ratio(Float maxR0ToX0Ratio){
		this.maxR0ToX0Ratio = maxR0ToX0Ratio;
	}

	public Float getMaxR1ToX1Ratio(){
		return this.maxR1ToX1Ratio;
	}

	@FieldSetter(fieldName = "ExternalNetworkInjection.maxR1ToX1Ratio", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setMaxR1ToX1Ratio(Float maxR1ToX1Ratio){
		this.maxR1ToX1Ratio = maxR1ToX1Ratio;
	}

	public Float getMaxZ0ToZ1Ratio(){
		return this.maxZ0ToZ1Ratio;
	}

	@FieldSetter(fieldName = "ExternalNetworkInjection.maxZ0ToZ1Ratio", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setMaxZ0ToZ1Ratio(Float maxZ0ToZ1Ratio){
		this.maxZ0ToZ1Ratio = maxZ0ToZ1Ratio;
	}

	public CurrentFlow getMinInitialSymShCCurrent(){
		return this.minInitialSymShCCurrent;
	}

	@FieldSetter(fieldName = "ExternalNetworkInjection.minInitialSymShCCurrent", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMinInitialSymShCCurrent(CurrentFlow minInitialSymShCCurrent){
		this.minInitialSymShCCurrent = minInitialSymShCCurrent;
	}

	public ActivePower getMinP(){
		return this.minP;
	}

	@FieldSetter(fieldName = "ExternalNetworkInjection.minP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMinP(ActivePower minP){
		this.minP = minP;
	}

	public ReactivePower getMinQ(){
		return this.minQ;
	}

	@FieldSetter(fieldName = "ExternalNetworkInjection.minQ", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMinQ(ReactivePower minQ){
		this.minQ = minQ;
	}

	public Float getMinR0ToX0Ratio(){
		return this.minR0ToX0Ratio;
	}

	@FieldSetter(fieldName = "ExternalNetworkInjection.minR0ToX0Ratio", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setMinR0ToX0Ratio(Float minR0ToX0Ratio){
		this.minR0ToX0Ratio = minR0ToX0Ratio;
	}

	public Float getMinR1ToX1Ratio(){
		return this.minR1ToX1Ratio;
	}

	@FieldSetter(fieldName = "ExternalNetworkInjection.minR1ToX1Ratio", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setMinR1ToX1Ratio(Float minR1ToX1Ratio){
		this.minR1ToX1Ratio = minR1ToX1Ratio;
	}

	public Float getMinZ0ToZ1Ratio(){
		return this.minZ0ToZ1Ratio;
	}

	@FieldSetter(fieldName = "ExternalNetworkInjection.minZ0ToZ1Ratio", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setMinZ0ToZ1Ratio(Float minZ0ToZ1Ratio){
		this.minZ0ToZ1Ratio = minZ0ToZ1Ratio;
	}

	public ActivePower getP(){
		return this.p;
	}

	@FieldSetter(fieldName = "ExternalNetworkInjection.p", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setP(ActivePower p){
		this.p = p;
	}

	public ReactivePower getQ(){
		return this.q;
	}

	@FieldSetter(fieldName = "ExternalNetworkInjection.q", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setQ(ReactivePower q){
		this.q = q;
	}

	public Integer getReferencePriority(){
		return this.referencePriority;
	}

	@FieldSetter(fieldName = "ExternalNetworkInjection.referencePriority", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setReferencePriority(Integer referencePriority){
		this.referencePriority = referencePriority;
	}

	public PU getVoltageFactor(){
		return this.voltageFactor;
	}

	@FieldSetter(fieldName = "ExternalNetworkInjection.voltageFactor", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setVoltageFactor(PU voltageFactor){
		this.voltageFactor = voltageFactor;
	}

	public ExternalNetworkInjection(){

	}

}
