package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Generation.Production;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.CostPerVolume;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * A generating unit whose prime mover is a hydraulic turbine (e.g., Francis, 
 * Pelton, Kaplan).
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:52 MSK 2020
 */

@Entity
@Table(name = "hydrogeneratingunit")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class HydroGeneratingUnit extends GeneratingUnit {
	/**
	 * Energy conversion capability for generating.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "energyConversionCapability")
	private HydroEnergyConversionKind energyConversionCapability;
	/**
	 * The equivalent cost of water that drives the hydro turbine.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="denominatorMultiplier", column=@Column(name="hydroUnitWaterCost_denominatorMultiplier")),
		@AttributeOverride(name="denominatorUnit", column=@Column(name="hydroUnitWaterCost_denominatorUnit")),
		@AttributeOverride(name="multiplier", column=@Column(name="hydroUnitWaterCost_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="hydroUnitWaterCost_unit")),
		@AttributeOverride(name="value", column=@Column(name="hydroUnitWaterCost_value")),
	})
	private CostPerVolume hydroUnitWaterCost;

	/**
	 * The hydro generating unit belongs to a hydro power plant.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "hydropowerplant_mrid")
	@JoinColumn(name = "hydropowerplant_projectid")
	@JoinColumn(name = "hydropowerplant_synthesizedschemenumber")
	@JoinColumn(name = "hydropowerplant_schemascenarionumber")
	private HydroPowerPlant HydroPowerPlant;

	public HydroEnergyConversionKind getEnergyConversionCapability(){
		return this.energyConversionCapability;
	}

	@FieldSetter(fieldName = "HydroGeneratingUnit.energyConversionCapability", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setEnergyConversionCapability(HydroEnergyConversionKind energyConversionCapability){
		this.energyConversionCapability = energyConversionCapability;
	}

	public CostPerVolume getHydroUnitWaterCost(){
		return this.hydroUnitWaterCost;
	}

	@FieldSetter(fieldName = "HydroGeneratingUnit.hydroUnitWaterCost", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setHydroUnitWaterCost(CostPerVolume hydroUnitWaterCost){
		this.hydroUnitWaterCost = hydroUnitWaterCost;
	}

	public HydroPowerPlant getHydroPowerPlant(){
		return this.HydroPowerPlant;
	}

	@AssociationSetter(fieldName = "HydroGeneratingUnit.HydroPowerPlant", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Generation.Production.HydroPowerPlant", cardinality = "one")
	public void setHydroPowerPlant(HydroPowerPlant HydroPowerPlant){
		this.HydroPowerPlant = HydroPowerPlant;
	}

	public HydroGeneratingUnit(){

	}

}
