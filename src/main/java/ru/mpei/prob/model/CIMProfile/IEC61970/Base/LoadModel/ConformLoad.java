package ru.mpei.prob.model.CIMProfile.IEC61970.Base.LoadModel;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.ActivePower;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.ReactivePower;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires.EnergyConsumer;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * ConformLoad represent loads that follow a daily load change pattern where 
 * the pattern can be used to scale the load with a system load.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:53 MSK 2020
 */

@Entity
@Table(name = "conformload")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ConformLoad extends EnergyConsumer {
	/**
	 * Максимальная активная потребляемая нагрузка летом
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="pMaxSummerLoad_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="pMaxSummerLoad_unit")),
		@AttributeOverride(name="value", column=@Column(name="pMaxSummerLoad_value")),
	})
	private ActivePower pMaxSummerLoad;
	/**
	 * Максимальная активная потребляемая мощность зимой
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="pMaxWinterLoad_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="pMaxWinterLoad_unit")),
		@AttributeOverride(name="value", column=@Column(name="pMaxWinterLoad_value")),
	})
	private ActivePower pMaxWinterLoad;
	/**
	 * Минимальная активная потребляемая нагрузка летом
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="pMinSummerLoad_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="pMinSummerLoad_unit")),
		@AttributeOverride(name="value", column=@Column(name="pMinSummerLoad_value")),
	})
	private ActivePower pMinSummerLoad;
	/**
	 * Минимальная активная потребляемая мощность зимой
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="pMinWinterLoad_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="pMinWinterLoad_unit")),
		@AttributeOverride(name="value", column=@Column(name="pMinWinterLoad_value")),
	})
	private ActivePower pMinWinterLoad;
	/**
	 * Максимальная реактивная потребляемая нагрузка летом
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="qMaxSummerLoad_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="qMaxSummerLoad_unit")),
		@AttributeOverride(name="value", column=@Column(name="qMaxSummerLoad_value")),
	})
	private ReactivePower qMaxSummerLoad;
	/**
	 * Максимальная реактивная потребляемая мощность зимой
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="qMaxWinterLoad_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="qMaxWinterLoad_unit")),
		@AttributeOverride(name="value", column=@Column(name="qMaxWinterLoad_value")),
	})
	private ReactivePower qMaxWinterLoad;
	/**
	 * Минимальная, реактивная потребляемая нагрузка летом
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="qMinSummerLoad_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="qMinSummerLoad_unit")),
		@AttributeOverride(name="value", column=@Column(name="qMinSummerLoad_value")),
	})
	private ReactivePower qMinSummerLoad;
	/**
	 * Минимальная реактивная потребляемая мощность зимой
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="qMinWinterLoad_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="qMinWinterLoad_unit")),
		@AttributeOverride(name="value", column=@Column(name="qMinWinterLoad_value")),
	})
	private ReactivePower qMinWinterLoad;

	/**
	 * Conform loads assigned to this ConformLoadGroup.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "loadgroup_mrid")
	@JoinColumn(name = "loadgroup_projectid")
	@JoinColumn(name = "loadgroup_synthesizedschemenumber")
	@JoinColumn(name = "loadgroup_schemascenarionumber")
	private ConformLoadGroup LoadGroup;

	public ActivePower getPMaxSummerLoad(){
		return this.pMaxSummerLoad;
	}

	@FieldSetter(fieldName = "ConformLoad.pMaxSummerLoad", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setPMaxSummerLoad(ActivePower pMaxSummerLoad){
		this.pMaxSummerLoad = pMaxSummerLoad;
	}

	public ActivePower getPMaxWinterLoad(){
		return this.pMaxWinterLoad;
	}

	@FieldSetter(fieldName = "ConformLoad.pMaxWinterLoad", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setPMaxWinterLoad(ActivePower pMaxWinterLoad){
		this.pMaxWinterLoad = pMaxWinterLoad;
	}

	public ActivePower getPMinSummerLoad(){
		return this.pMinSummerLoad;
	}

	@FieldSetter(fieldName = "ConformLoad.pMinSummerLoad", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setPMinSummerLoad(ActivePower pMinSummerLoad){
		this.pMinSummerLoad = pMinSummerLoad;
	}

	public ActivePower getPMinWinterLoad(){
		return this.pMinWinterLoad;
	}

	@FieldSetter(fieldName = "ConformLoad.pMinWinterLoad", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setPMinWinterLoad(ActivePower pMinWinterLoad){
		this.pMinWinterLoad = pMinWinterLoad;
	}

	public ReactivePower getQMaxSummerLoad(){
		return this.qMaxSummerLoad;
	}

	@FieldSetter(fieldName = "ConformLoad.qMaxSummerLoad", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setQMaxSummerLoad(ReactivePower qMaxSummerLoad){
		this.qMaxSummerLoad = qMaxSummerLoad;
	}

	public ReactivePower getQMaxWinterLoad(){
		return this.qMaxWinterLoad;
	}

	@FieldSetter(fieldName = "ConformLoad.qMaxWinterLoad", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setQMaxWinterLoad(ReactivePower qMaxWinterLoad){
		this.qMaxWinterLoad = qMaxWinterLoad;
	}

	public ReactivePower getQMinSummerLoad(){
		return this.qMinSummerLoad;
	}

	@FieldSetter(fieldName = "ConformLoad.qMinSummerLoad", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setQMinSummerLoad(ReactivePower qMinSummerLoad){
		this.qMinSummerLoad = qMinSummerLoad;
	}

	public ReactivePower getQMinWinterLoad(){
		return this.qMinWinterLoad;
	}

	@FieldSetter(fieldName = "ConformLoad.qMinWinterLoad", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setQMinWinterLoad(ReactivePower qMinWinterLoad){
		this.qMinWinterLoad = qMinWinterLoad;
	}

	public ConformLoadGroup getLoadGroup(){
		return this.LoadGroup;
	}

	@AssociationSetter(fieldName = "ConformLoad.LoadGroup", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.LoadModel.ConformLoadGroup", cardinality = "one")
	public void setLoadGroup(ConformLoadGroup LoadGroup){
		this.LoadGroup = LoadGroup;
	}

	public ConformLoad(){

	}

}
