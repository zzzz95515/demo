package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Conductance;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Susceptance;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * A linear shunt compensator has banks or sections with equal admittance 
 * values.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:55 MSK 2020
 */

@Entity
@Table(name = "linearshuntcompensator")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class LinearShuntCompensator extends ShuntCompensator {
	/**
	 * Zero sequence shunt (charging) susceptance per section
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="b0PerSection_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="b0PerSection_unit")),
		@AttributeOverride(name="value", column=@Column(name="b0PerSection_value")),
	})
	private Susceptance b0PerSection;
	/**
	 * Positive sequence shunt (charging) susceptance per section
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="bPerSection_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="bPerSection_unit")),
		@AttributeOverride(name="value", column=@Column(name="bPerSection_value")),
	})
	private Susceptance bPerSection;
	/**
	 * Zero sequence shunt (charging) conductance per section
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="g0PerSection_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="g0PerSection_unit")),
		@AttributeOverride(name="value", column=@Column(name="g0PerSection_value")),
	})
	private Conductance g0PerSection;
	/**
	 * Positive sequence shunt (charging) conductance per section
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="gPerSection_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="gPerSection_unit")),
		@AttributeOverride(name="value", column=@Column(name="gPerSection_value")),
	})
	private Conductance gPerSection;


	public Susceptance getB0PerSection(){
		return this.b0PerSection;
	}

	@FieldSetter(fieldName = "LinearShuntCompensator.b0PerSection", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setB0PerSection(Susceptance b0PerSection){
		this.b0PerSection = b0PerSection;
	}

	public Susceptance getBPerSection(){
		return this.bPerSection;
	}

	@FieldSetter(fieldName = "LinearShuntCompensator.bPerSection", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setBPerSection(Susceptance bPerSection){
		this.bPerSection = bPerSection;
	}

	public Conductance getG0PerSection(){
		return this.g0PerSection;
	}

	@FieldSetter(fieldName = "LinearShuntCompensator.g0PerSection", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setG0PerSection(Conductance g0PerSection){
		this.g0PerSection = g0PerSection;
	}

	public Conductance getGPerSection(){
		return this.gPerSection;
	}

	@FieldSetter(fieldName = "LinearShuntCompensator.gPerSection", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setGPerSection(Conductance gPerSection){
		this.gPerSection = gPerSection;
	}

	public LinearShuntCompensator(){

	}

}
