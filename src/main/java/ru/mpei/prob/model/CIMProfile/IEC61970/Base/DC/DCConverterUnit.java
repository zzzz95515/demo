package ru.mpei.prob.model.CIMProfile.IEC61970.Base.DC;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.Substation;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * Indivisible operative unit comprising all equipment between the point of 
 * common coupling on the AC side and the point of common coupling â€“ DC side, 
 * essentially one or more converters, together with one or more converter 
 * transformers, converter control equipment, essential protective and switching 
 * devices and auxiliaries, if any, used for conversion.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:50 MSK 2020
 */

@Entity
@Table(name = "dcconverterunit")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class DCConverterUnit extends DCEquipmentContainer {
	@Enumerated(EnumType.STRING)
	@Column(name = "operationMode")
	private DCConverterOperatingModeKind operationMode;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "substation_mrid")
	@JoinColumn(name = "substation_projectid")
	@JoinColumn(name = "substation_synthesizedschemenumber")
	@JoinColumn(name = "substation_schemascenarionumber")
	private Substation Substation;

	public DCConverterOperatingModeKind getOperationMode(){
		return this.operationMode;
	}

	@FieldSetter(fieldName = "DCConverterUnit.operationMode", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setOperationMode(DCConverterOperatingModeKind operationMode){
		this.operationMode = operationMode;
	}

	public Substation getSubstation(){
		return this.Substation;
	}

	@AssociationSetter(fieldName = "DCConverterUnit.Substation", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.Substation", cardinality = "one")
	public void setSubstation(Substation Substation){
		this.Substation = Substation;
	}

	public DCConverterUnit(){

	}

}
