package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.ConductingEquipment;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * A type of conducting equipment that can regulate a quantity (i.e. voltage 
 * or flow) at a specific point in the network. 
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:55 MSK 2020
 */

@Entity
@Table(name = "regulatingcondeq")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class RegulatingCondEq extends ConductingEquipment {
	/**
	 * Specifies the regulation status of the equipment.  True is regulating, 
	 * false is not regulating.
	 */
	@Column(name="controlEnabled", nullable = true)
	private Boolean controlEnabled;

	/**
	 * The equipment that participates in this regulating control scheme.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "regulatingcontrol_mrid")
	@JoinColumn(name = "regulatingcontrol_projectid")
	@JoinColumn(name = "regulatingcontrol_synthesizedschemenumber")
	@JoinColumn(name = "regulatingcontrol_schemascenarionumber")
	private RegulatingControl RegulatingControl;

	public Boolean getControlEnabled(){
		return this.controlEnabled;
	}

	@FieldSetter(fieldName = "RegulatingCondEq.controlEnabled", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setControlEnabled(Boolean controlEnabled){
		this.controlEnabled = controlEnabled;
	}

	public RegulatingControl getRegulatingControl(){
		return this.RegulatingControl;
	}

	@AssociationSetter(fieldName = "RegulatingCondEq.RegulatingControl", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Wires.RegulatingControl", cardinality = "one")
	public void setRegulatingControl(RegulatingControl RegulatingControl){
		this.RegulatingControl = RegulatingControl;
	}

	public RegulatingCondEq(){

	}

}
