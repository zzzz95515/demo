package ru.mpei.prob.model.CIMProfile.IEC61970.Base.DiagramLayout;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.IdentifiedObject;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.AngleDegrees;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * An object that defines one or more points in a given space. This object 
 * can be associated with anything that specializes IdentifiedObject. For 
 * single line diagrams such objects typically include such items as analog 
 * values, breakers, disconnectors, power transformers, and transmission lines.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:51 MSK 2020
 */

@Entity
@Table(name = "diagramobject")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class DiagramObject extends IdentifiedObject {
	/**
	 * The drawing order of this element. The higher the number, the later the 
	 * element is drawn in sequence. This is used to ensure that elements that 
	 * overlap are rendered in the correct order.
	 */
	@Column(name="drawingOrder", nullable = true)
	private Integer drawingOrder;
	/**
	 * Defines whether or not the diagram objects points define the boundaries 
	 * of a polygon or the routing of a polyline. If this value is true then a 
	 * receiving application should consider the first and last points to be connected.
	 */
	@Column(name="isPolygon", nullable = true)
	private Boolean isPolygon;
	/**
	 * The offset in the X direction. This is used for defining the offset from 
	 * centre for rendering an icon (the default is that a single point specifies 
	 * the centre of the icon).The offset is in per-unit with 0 indicating there 
	 * is no offset from the horizontal centre of the icon.  -0.5 indicates it 
	 * is offset by 50% to the left and 0.5 indicates an offset of 50% to the 
	 * right.
	 */
	@Column(name="offsetX", nullable = true)
	private Float offsetX;
	/**
	 * The offset in the Y direction. This is used for defining the offset from 
	 * centre for rendering an icon (the default is that a single point specifies 
	 * the centre of the icon).The offset is in per-unit with 0 indicating there 
	 * is no offset from the vertical centre of the icon.  The offset direction 
	 * is dependent on the orientation of the diagram, with -0.5 and 0.5 indicating 
	 * an offset of +/- 50% on the vertical axis.
	 */
	@Column(name="offsetY", nullable = true)
	private Float offsetY;
	/**
	 * Sets the angle of rotation of the diagram object.  Zero degrees is pointing 
	 * to the top of the diagram.  Rotation is clockwise.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="rotation_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="rotation_unit")),
		@AttributeOverride(name="value", column=@Column(name="rotation_value")),
	})
	private AngleDegrees rotation;

	/**
	 * The diagram objects that are associated with the domain object.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "identifiedobject_mrid")
	@JoinColumn(name = "identifiedobject_projectid")
	@JoinColumn(name = "identifiedobject_synthesizedschemenumber")
	@JoinColumn(name = "identifiedobject_schemascenarionumber")
	private IdentifiedObject IdentifiedObject;
	/**
	 * A diagram is made up of multiple diagram objects.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "diagram_mrid")
	@JoinColumn(name = "diagram_projectid")
	@JoinColumn(name = "diagram_synthesizedschemenumber")
	@JoinColumn(name = "diagram_schemascenarionumber")
	private Diagram Diagram;
	/**
	 * The diagram object with which the points are associated.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "DiagramObject")
	private List<DiagramObjectPoint> DiagramObjectPoints;
	/**
	 * A style can be assigned to multiple diagram objects.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "diagramobjectstyle_mrid")
	@JoinColumn(name = "diagramobjectstyle_projectid")
	@JoinColumn(name = "diagramobjectstyle_synthesizedschemenumber")
	@JoinColumn(name = "diagramobjectstyle_schemascenarionumber")
	private DiagramObjectStyle DiagramObjectStyle;
	/**
	 * A visibility layer can contain one or more diagram objects.
	 */
	@ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "VisibleObjects")
	private List<VisibilityLayer> VisibilityLayers;

	public Integer getDrawingOrder(){
		return this.drawingOrder;
	}

	@FieldSetter(fieldName = "DiagramObject.drawingOrder", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setDrawingOrder(Integer drawingOrder){
		this.drawingOrder = drawingOrder;
	}

	public Boolean getIsPolygon(){
		return this.isPolygon;
	}

	@FieldSetter(fieldName = "DiagramObject.isPolygon", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setIsPolygon(Boolean isPolygon){
		this.isPolygon = isPolygon;
	}

	public Float getOffsetX(){
		return this.offsetX;
	}

	@FieldSetter(fieldName = "DiagramObject.offsetX", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setOffsetX(Float offsetX){
		this.offsetX = offsetX;
	}

	public Float getOffsetY(){
		return this.offsetY;
	}

	@FieldSetter(fieldName = "DiagramObject.offsetY", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setOffsetY(Float offsetY){
		this.offsetY = offsetY;
	}

	public AngleDegrees getRotation(){
		return this.rotation;
	}

	@FieldSetter(fieldName = "DiagramObject.rotation", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setRotation(AngleDegrees rotation){
		this.rotation = rotation;
	}

	public IdentifiedObject getIdentifiedObject(){
		return this.IdentifiedObject;
	}

	@AssociationSetter(fieldName = "DiagramObject.IdentifiedObject", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.IdentifiedObject", cardinality = "one")
	public void setIdentifiedObject(IdentifiedObject IdentifiedObject){
		this.IdentifiedObject = IdentifiedObject;
	}

	public Diagram getDiagram(){
		return this.Diagram;
	}

	@AssociationSetter(fieldName = "DiagramObject.Diagram", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.DiagramLayout.Diagram", cardinality = "one")
	public void setDiagram(Diagram Diagram){
		this.Diagram = Diagram;
	}

	@JsonIgnore
	public List<DiagramObjectPoint> getDiagramObjectPoints(){
		return this.DiagramObjectPoints;
	}

	@AssociationSetter(fieldName = "DiagramObject.DiagramObjectPoints", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.DiagramLayout.DiagramObjectPoint", cardinality = "many")
	public void setDiagramObjectPoints(List<DiagramObjectPoint> DiagramObjectPoints){
		this.DiagramObjectPoints = DiagramObjectPoints;
	}

	public DiagramObjectStyle getDiagramObjectStyle(){
		return this.DiagramObjectStyle;
	}

	@AssociationSetter(fieldName = "DiagramObject.DiagramObjectStyle", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.DiagramLayout.DiagramObjectStyle", cardinality = "one")
	public void setDiagramObjectStyle(DiagramObjectStyle DiagramObjectStyle){
		this.DiagramObjectStyle = DiagramObjectStyle;
	}

	@JsonIgnore
	public List<VisibilityLayer> getVisibilityLayers(){
		return this.VisibilityLayers;
	}

	@AssociationSetter(fieldName = "DiagramObject.VisibilityLayers", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.DiagramLayout.VisibilityLayer", cardinality = "many")
	public void setVisibilityLayers(List<VisibilityLayer> VisibilityLayers){
		this.VisibilityLayers = VisibilityLayers;
	}

	public DiagramObject(){

	}

}
