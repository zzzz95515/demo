package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Topology;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.*;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.ActivePower;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.ReactivePower;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Susceptance;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.StateVariables.SvInjection;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.StateVariables.SvVoltage;
import ru.mpei.prob.model.CIMProfile.NTI.NodeTypes;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * For a detailed substation model a topological node is a set of connectivity 
 * nodes that, in the current network state, are connected together through 
 * any type of closed switches, including  jumpers. Topological nodes change 
 * as the current network state changes (i.e., switches, breakers, etc. change 
 * state).For a planning model, switch statuses are not used to form topological 
 * nodes. Instead they are manually created or deleted in a model builder 
 * tool. Topological nodes maintained this way are also called "busses".
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:54 MSK 2020
 */

@Entity
@Table(name = "topologicalnode")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class TopologicalNode extends IdentifiedObject {
	/**
	 * Узел с генерацией.Атрибут используется для выделения базисного узла.
	 */
	@Column(name="isGenerativeNode", nullable = true)
	private Boolean isGenerativeNode;
	/**
	 * Узел с максимальным номинальным напряжением.Атрибут используется для выделения 
	 * базисного узла.
	 */
	@Column(name="isMaxVoltageNode", nullable = true)
	private Boolean isMaxVoltageNode;
	/**
	 * Тип узла. Атрибут используется при расчете нормального режима.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "nodeType")
	private NodeTypes nodeType;
	/**
	 * Порядковый номер узла при составлении электрических матриц для расчета 
	 * нормального режима
	 */
	@Column(name="normalSchemeNodeNumber", nullable = true)
	private Integer normalSchemeNodeNumber;
	/**
	 * The active power injected into the bus at this location in addition to 
	 * injections from equipment.  Positive sign means injection into the TopologicalNode 
	 * (bus).Starting value for a steady state solution. 
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="pInjection_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="pInjection_unit")),
		@AttributeOverride(name="value", column=@Column(name="pInjection_value")),
	})
	private ActivePower pInjection;
	/**
	 * The reactive power injected into the bus at this location in addition to 
	 * injections from equipment. Positive sign means injection into the TopologicalNode 
	 * (bus).Starting value for a steady state solution.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="qInjection_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="qInjection_unit")),
		@AttributeOverride(name="value", column=@Column(name="qInjection_value")),
	})
	private ReactivePower qInjection;
	/**
	 * Суммарная емкостная проводимость шунтов (шунтирующих реакторов). Отличается 
	 * от totalB тем, что в totalB учтены shuntB и проводимости ЛЭП
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="shuntB_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="shuntB_unit")),
		@AttributeOverride(name="value", column=@Column(name="shuntB_value")),
	})
	private Susceptance shuntB;
	/**
	 * Суммарная проводимость на землю в узле.Атрибут используется для расчета 
	 * нормального режима.В каждой итерации расчета пересчитываются реактивные 
	 * мощности через проводимость.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="totalB_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="totalB_unit")),
		@AttributeOverride(name="value", column=@Column(name="totalB_value")),
	})
	private Susceptance totalB;

	/**
	 * The topological nodes at the base voltage.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "basevoltage_mrid")
	@JoinColumn(name = "basevoltage_projectid")
	@JoinColumn(name = "basevoltage_synthesizedschemenumber")
	@JoinColumn(name = "basevoltage_schemascenarionumber")
	private BaseVoltage BaseVoltage;
	/**
	 * The topological node to which this connectivity node is assigned.  May 
	 * depend on the current state of switches in the network.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "TopologicalNode")
	private List<ConnectivityNode> ConnectivityNodes;
	/**
	 * The topological nodes which belong to this connectivity node container.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "connectivitynodecontainer_mrid")
	@JoinColumn(name = "connectivitynodecontainer_projectid")
	@JoinColumn(name = "connectivitynodecontainer_synthesizedschemenumber")
	@JoinColumn(name = "connectivitynodecontainer_schemascenarionumber")
	private ConnectivityNodeContainer ConnectivityNodeContainer;
	/**
	 * The topological nodes that belong to the reporting group.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "reportinggroup_mrid")
	@JoinColumn(name = "reportinggroup_projectid")
	@JoinColumn(name = "reportinggroup_synthesizedschemenumber")
	@JoinColumn(name = "reportinggroup_schemascenarionumber")
	private ReportingGroup ReportingGroup;
	/**
	 * The topological node associated with the terminal.   This can be used as 
	 * an alternative to the connectivity node path to topological node, thus 
	 * making it unneccesary to model connectivity nodes in some cases.   Note 
	 * that the if connectivity nodes are in the model, this association would 
	 * probably not be used as an input specification.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "TopologicalNode")
	private List<Terminal> Terminal;
	/**
	 * The topological node associated with the flow injection state variable.
	 */
	@OneToOne(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "TopologicalNode")
	private SvInjection SvInjection;
	/**
	 * Значения напряжений, являющиеся результатом расчета режима
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "TopologicalNodeForResult")
	private List<SvVoltage> ResultVoltage;
	/**
	 * The topological node associated with the voltage state.
	 */
	@OneToOne(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "TopologicalNode")
	private SvVoltage SvVoltage;
	/**
	 * The angle reference for the island.   Normally there is one TopologicalNode 
	 * that is selected as the angle reference for each island.   Other reference 
	 * schemes exist, so the association is typically optional.
	 */
	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "anglereftopologicalisland_mrid")
	@JoinColumn(name = "anglereftopologicalisland_projectid")
	@JoinColumn(name = "anglereftopologicalisland_synthesizedschemenumber")
	@JoinColumn(name = "anglereftopologicalisland_schemascenarionumber")
	private TopologicalIsland AngleRefTopologicalIsland;
	/**
	 * A topological node belongs to a topological island.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "topologicalisland_mrid")
	@JoinColumn(name = "topologicalisland_projectid")
	@JoinColumn(name = "topologicalisland_synthesizedschemenumber")
	@JoinColumn(name = "topologicalisland_schemascenarionumber")
	private TopologicalIsland TopologicalIsland;

	public Boolean getIsGenerativeNode(){
		return this.isGenerativeNode;
	}

	@FieldSetter(fieldName = "TopologicalNode.isGenerativeNode", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setIsGenerativeNode(Boolean isGenerativeNode){
		this.isGenerativeNode = isGenerativeNode;
	}

	public Boolean getIsMaxVoltageNode(){
		return this.isMaxVoltageNode;
	}

	@FieldSetter(fieldName = "TopologicalNode.isMaxVoltageNode", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setIsMaxVoltageNode(Boolean isMaxVoltageNode){
		this.isMaxVoltageNode = isMaxVoltageNode;
	}

	public NodeTypes getNodeType(){
		return this.nodeType;
	}

	@FieldSetter(fieldName = "TopologicalNode.nodeType", fieldTypeStereotype = "Enumeration", fieldStereotype = "nti")
	public void setNodeType(NodeTypes nodeType){
		this.nodeType = nodeType;
	}

	public Integer getNormalSchemeNodeNumber(){
		return this.normalSchemeNodeNumber;
	}

	@FieldSetter(fieldName = "TopologicalNode.normalSchemeNodeNumber", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setNormalSchemeNodeNumber(Integer normalSchemeNodeNumber){
		this.normalSchemeNodeNumber = normalSchemeNodeNumber;
	}

	public ActivePower getPInjection(){
		return this.pInjection;
	}

	@FieldSetter(fieldName = "TopologicalNode.pInjection", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setPInjection(ActivePower pInjection){
		this.pInjection = pInjection;
	}

	public ReactivePower getQInjection(){
		return this.qInjection;
	}

	@FieldSetter(fieldName = "TopologicalNode.qInjection", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setQInjection(ReactivePower qInjection){
		this.qInjection = qInjection;
	}

	public Susceptance getShuntB(){
		return this.shuntB;
	}

	@FieldSetter(fieldName = "TopologicalNode.shuntB", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setShuntB(Susceptance shuntB){
		this.shuntB = shuntB;
	}

	public Susceptance getTotalB(){
		return this.totalB;
	}

	@FieldSetter(fieldName = "TopologicalNode.totalB", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setTotalB(Susceptance totalB){
		this.totalB = totalB;
	}

	public BaseVoltage getBaseVoltage(){
		return this.BaseVoltage;
	}

	@AssociationSetter(fieldName = "TopologicalNode.BaseVoltage", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.BaseVoltage", cardinality = "one")
	public void setBaseVoltage(BaseVoltage BaseVoltage){
		this.BaseVoltage = BaseVoltage;
	}

	@JsonIgnore
	public List<ConnectivityNode> getConnectivityNodes(){
		return this.ConnectivityNodes;
	}

	@AssociationSetter(fieldName = "TopologicalNode.ConnectivityNodes", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.ConnectivityNode", cardinality = "many")
	public void setConnectivityNodes(List<ConnectivityNode> ConnectivityNodes){
		this.ConnectivityNodes = ConnectivityNodes;
	}

	public ConnectivityNodeContainer getConnectivityNodeContainer(){
		return this.ConnectivityNodeContainer;
	}

	@AssociationSetter(fieldName = "TopologicalNode.ConnectivityNodeContainer", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.ConnectivityNodeContainer", cardinality = "one")
	public void setConnectivityNodeContainer(ConnectivityNodeContainer ConnectivityNodeContainer){
		this.ConnectivityNodeContainer = ConnectivityNodeContainer;
	}

	public ReportingGroup getReportingGroup(){
		return this.ReportingGroup;
	}

	@AssociationSetter(fieldName = "TopologicalNode.ReportingGroup", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.ReportingGroup", cardinality = "one")
	public void setReportingGroup(ReportingGroup ReportingGroup){
		this.ReportingGroup = ReportingGroup;
	}

	@JsonIgnore
	public List<Terminal> getTerminal(){
		return this.Terminal;
	}

	@AssociationSetter(fieldName = "TopologicalNode.Terminal", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.Terminal", cardinality = "many")
	public void setTerminal(List<Terminal> Terminal){
		this.Terminal = Terminal;
	}

	@JsonIgnore
	public SvInjection getSvInjection(){
		return this.SvInjection;
	}

	@AssociationSetter(fieldName = "TopologicalNode.SvInjection", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.StateVariables.SvInjection", cardinality = "one")
	public void setSvInjection(SvInjection SvInjection){
		this.SvInjection = SvInjection;
	}

	@JsonIgnore
	public List<SvVoltage> getResultVoltage(){
		return this.ResultVoltage;
	}

	@AssociationSetter(fieldName = "TopologicalNode.ResultVoltage", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.StateVariables.SvVoltage", cardinality = "many")
	public void setResultVoltage(List<SvVoltage> ResultVoltage){
		this.ResultVoltage = ResultVoltage;
	}

	@JsonIgnore
	public SvVoltage getSvVoltage(){
		return this.SvVoltage;
	}

	@AssociationSetter(fieldName = "TopologicalNode.SvVoltage", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.StateVariables.SvVoltage", cardinality = "one")
	public void setSvVoltage(SvVoltage SvVoltage){
		this.SvVoltage = SvVoltage;
	}

	public TopologicalIsland getAngleRefTopologicalIsland(){
		return this.AngleRefTopologicalIsland;
	}

	@AssociationSetter(fieldName = "TopologicalNode.AngleRefTopologicalIsland", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Topology.TopologicalIsland", cardinality = "one")
	public void setAngleRefTopologicalIsland(TopologicalIsland AngleRefTopologicalIsland){
		this.AngleRefTopologicalIsland = AngleRefTopologicalIsland;
	}

	public TopologicalIsland getTopologicalIsland(){
		return this.TopologicalIsland;
	}

	@AssociationSetter(fieldName = "TopologicalNode.TopologicalIsland", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Topology.TopologicalIsland", cardinality = "one")
	public void setTopologicalIsland(TopologicalIsland TopologicalIsland){
		this.TopologicalIsland = TopologicalIsland;
	}

	public TopologicalNode(){

	}

}
