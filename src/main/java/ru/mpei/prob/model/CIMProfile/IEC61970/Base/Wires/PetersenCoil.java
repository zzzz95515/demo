package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.CurrentFlow;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Reactance;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Voltage;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * A tunable impedance device normally used to offset line charging during 
 * single line faults in an ungrounded section of network.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:55 MSK 2020
 */

@Entity
@Table(name = "petersencoil")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class PetersenCoil extends EarthFaultCompensator {
	/**
	 * The mode of operation of the Petersen coil.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "mode")
	private PetersenCoilModeKind mode;
	/**
	 * The nominal voltage for which the coil is designed.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="nominalU_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="nominalU_unit")),
		@AttributeOverride(name="value", column=@Column(name="nominalU_value")),
	})
	private Voltage nominalU;
	/**
	 * The offset current that the Petersen coil controller is operating from 
	 * the resonant point.  This is normally a fixed amount for which the controller 
	 * is configured and could be positive or negative.  Typically 0 to 60 Amperes 
	 * depending on voltage and resonance conditions.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="offsetCurrent_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="offsetCurrent_unit")),
		@AttributeOverride(name="value", column=@Column(name="offsetCurrent_value")),
	})
	private CurrentFlow offsetCurrent;
	/**
	 * The control current used to control the Petersen coil also known as the 
	 * position current.  Typically in the range of 20-200mA.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="positionCurrent_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="positionCurrent_unit")),
		@AttributeOverride(name="value", column=@Column(name="positionCurrent_value")),
	})
	private CurrentFlow positionCurrent;
	/**
	 * The maximum reactance. 
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="xGroundMax_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="xGroundMax_unit")),
		@AttributeOverride(name="value", column=@Column(name="xGroundMax_value")),
	})
	private Reactance xGroundMax;
	/**
	 * The minimum reactance.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="xGroundMin_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="xGroundMin_unit")),
		@AttributeOverride(name="value", column=@Column(name="xGroundMin_value")),
	})
	private Reactance xGroundMin;
	/**
	 * The nominal reactance.  This is the operating point (normally over compensation) 
	 * that is defined based on the resonance point in the healthy network condition. 
	 *  The impedance is calculated based on nominal voltage divided by position 
	 * current.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="xGroundNominal_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="xGroundNominal_unit")),
		@AttributeOverride(name="value", column=@Column(name="xGroundNominal_value")),
	})
	private Reactance xGroundNominal;


	public PetersenCoilModeKind getMode(){
		return this.mode;
	}

	@FieldSetter(fieldName = "PetersenCoil.mode", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setMode(PetersenCoilModeKind mode){
		this.mode = mode;
	}

	public Voltage getNominalU(){
		return this.nominalU;
	}

	@FieldSetter(fieldName = "PetersenCoil.nominalU", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setNominalU(Voltage nominalU){
		this.nominalU = nominalU;
	}

	public CurrentFlow getOffsetCurrent(){
		return this.offsetCurrent;
	}

	@FieldSetter(fieldName = "PetersenCoil.offsetCurrent", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setOffsetCurrent(CurrentFlow offsetCurrent){
		this.offsetCurrent = offsetCurrent;
	}

	public CurrentFlow getPositionCurrent(){
		return this.positionCurrent;
	}

	@FieldSetter(fieldName = "PetersenCoil.positionCurrent", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setPositionCurrent(CurrentFlow positionCurrent){
		this.positionCurrent = positionCurrent;
	}

	public Reactance getXGroundMax(){
		return this.xGroundMax;
	}

	@FieldSetter(fieldName = "PetersenCoil.xGroundMax", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setXGroundMax(Reactance xGroundMax){
		this.xGroundMax = xGroundMax;
	}

	public Reactance getXGroundMin(){
		return this.xGroundMin;
	}

	@FieldSetter(fieldName = "PetersenCoil.xGroundMin", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setXGroundMin(Reactance xGroundMin){
		this.xGroundMin = xGroundMin;
	}

	public Reactance getXGroundNominal(){
		return this.xGroundNominal;
	}

	@FieldSetter(fieldName = "PetersenCoil.xGroundNominal", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setXGroundNominal(Reactance xGroundNominal){
		this.xGroundNominal = xGroundNominal;
	}

	public PetersenCoil(){

	}

}
