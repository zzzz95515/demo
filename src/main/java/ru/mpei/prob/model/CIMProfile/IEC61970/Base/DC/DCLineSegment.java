package ru.mpei.prob.model.CIMProfile.IEC61970.Base.DC;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Capacitance;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Inductance;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Length;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Resistance;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * A wire or combination of wires not insulated from one another, with consistent 
 * electrical characteristics, used to carry direct current between points 
 * in the DC region of the power system.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:51 MSK 2020
 */

@Entity
@Table(name = "dclinesegment")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class DCLineSegment extends DCConductingEquipment {
	/**
	 * Capacitance of the DC line segment. Significant for cables only.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="capacitance_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="capacitance_unit")),
		@AttributeOverride(name="value", column=@Column(name="capacitance_value")),
	})
	private Capacitance capacitance;
	/**
	 * Inductance of the DC line segment. Neglectable compared with DCSeriesDevice 
	 * used for smoothing.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="inductance_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="inductance_unit")),
		@AttributeOverride(name="value", column=@Column(name="inductance_value")),
	})
	private Inductance inductance;
	/**
	 * Segment length for calculating line section capabilities.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="length_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="length_unit")),
		@AttributeOverride(name="value", column=@Column(name="length_value")),
	})
	private Length length;
	/**
	 * Resistance of the DC line segment.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="resistance_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="resistance_unit")),
		@AttributeOverride(name="value", column=@Column(name="resistance_value")),
	})
	private Resistance resistance;

	/**
	 * All line segments described by this set of per-length parameters.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "perlengthparameter_mrid")
	@JoinColumn(name = "perlengthparameter_projectid")
	@JoinColumn(name = "perlengthparameter_synthesizedschemenumber")
	@JoinColumn(name = "perlengthparameter_schemascenarionumber")
	private PerLengthDCLineParameter PerLengthParameter;

	public Capacitance getCapacitance(){
		return this.capacitance;
	}

	@FieldSetter(fieldName = "DCLineSegment.capacitance", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setCapacitance(Capacitance capacitance){
		this.capacitance = capacitance;
	}

	public Inductance getInductance(){
		return this.inductance;
	}

	@FieldSetter(fieldName = "DCLineSegment.inductance", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setInductance(Inductance inductance){
		this.inductance = inductance;
	}

	public Length getLength(){
		return this.length;
	}

	@FieldSetter(fieldName = "DCLineSegment.length", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setLength(Length length){
		this.length = length;
	}

	public Resistance getResistance(){
		return this.resistance;
	}

	@FieldSetter(fieldName = "DCLineSegment.resistance", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setResistance(Resistance resistance){
		this.resistance = resistance;
	}

	public PerLengthDCLineParameter getPerLengthParameter(){
		return this.PerLengthParameter;
	}

	@AssociationSetter(fieldName = "DCLineSegment.PerLengthParameter", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.DC.PerLengthDCLineParameter", cardinality = "one")
	public void setPerLengthParameter(PerLengthDCLineParameter PerLengthParameter){
		this.PerLengthParameter = PerLengthParameter;
	}

	public DCLineSegment(){

	}

}
