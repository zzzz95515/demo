package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.*;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * An electromechanical device that operates with shaft rotating synchronously 
 * with the network. It is a single machine operating either as a generator 
 * or synchronous condenser or pump.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:56 MSK 2020
 */

@Entity
@Table(name = "synchronousmachine")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class SynchronousMachine extends RotatingMachine {
	/**
	 * Time delay required when switching from Automatic Voltage Regulation (AVR) 
	 * to Manual for a lagging MVAr violation.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="aVRToManualLag_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="aVRToManualLag_unit")),
		@AttributeOverride(name="value", column=@Column(name="aVRToManualLag_value")),
	})
	private Seconds aVRToManualLag;
	/**
	 * Time delay required when switching from Automatic Voltage Regulation (AVR) 
	 * to Manual for a leading MVAr violation.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="aVRToManualLead_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="aVRToManualLead_unit")),
		@AttributeOverride(name="value", column=@Column(name="aVRToManualLead_value")),
	})
	private Seconds aVRToManualLead;
	/**
	 * Default base reactive power value. This value represents the initial reactive 
	 * power that can be used by any application function.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="baseQ_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="baseQ_unit")),
		@AttributeOverride(name="value", column=@Column(name="baseQ_value")),
	})
	private ReactivePower baseQ;
	/**
	 * Active power consumed when in condenser mode operation.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="condenserP_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="condenserP_unit")),
		@AttributeOverride(name="value", column=@Column(name="condenserP_value")),
	})
	private ActivePower condenserP;
	/**
	 * Temperature or pressure of coolant medium
	 */
	@Column(name="coolantCondition", nullable = true)
	private Float coolantCondition;
	/**
	 * Method of cooling the machine.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "coolantType")
	private CoolantType coolantType;
	/**
	 * Indicates whether or not the generator is earthed. Used for short circuit 
	 * data exchange according to IEC 60909
	 */
	@Column(name="earthing", nullable = true)
	private Boolean earthing;
	/**
	 * Generator star point earthing resistance (Re). Used for short circuit data 
	 * exchange according to IEC 60909
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="earthingStarPointR_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="earthingStarPointR_unit")),
		@AttributeOverride(name="value", column=@Column(name="earthingStarPointR_value")),
	})
	private Resistance earthingStarPointR;
	/**
	 * Generator star point earthing reactance (Xe). Used for short circuit data 
	 * exchange according to IEC 60909
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="earthingStarPointX_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="earthingStarPointX_unit")),
		@AttributeOverride(name="value", column=@Column(name="earthingStarPointX_value")),
	})
	private Reactance earthingStarPointX;
	/**
	 * Steady-state short-circuit current (in A for the profile) of generator 
	 * with compound excitation during 3-phase short circuit.- Ikk=0: Generator 
	 * with no compound excitation.- Ikk?0: Generator with compound excitation.Ikk 
	 * is used to calculate the minimum steady-state short-circuit current for 
	 * generators with compound excitation(Section 4.6.1.2 in the IEC 60909-0)Used 
	 * only for single fed short circuit on a generator. (Section 4.3.4.2. in 
	 * the IEC 60909-0)
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ikk_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ikk_unit")),
		@AttributeOverride(name="value", column=@Column(name="ikk_value")),
	})
	private CurrentFlow ikk;
	/**
	 * Time delay required when switching from Manual to Automatic Voltage Regulation. 
	 * This value is used in the accelerating power reference frame for powerflow 
	 * solutions
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="manualToAVR_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="manualToAVR_unit")),
		@AttributeOverride(name="value", column=@Column(name="manualToAVR_value")),
	})
	private Seconds manualToAVR;
	/**
	 * Maximum reactive power limit. This is the maximum (nameplate) limit for 
	 * the unit.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="maxQ_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="maxQ_unit")),
		@AttributeOverride(name="value", column=@Column(name="maxQ_value")),
	})
	private ReactivePower maxQ;
	/**
	 * Maximum voltage limit for the unit.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="maxU_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="maxU_unit")),
		@AttributeOverride(name="value", column=@Column(name="maxU_value")),
	})
	private Voltage maxU;
	/**
	 * Minimum reactive power limit for the unit.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="minQ_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="minQ_unit")),
		@AttributeOverride(name="value", column=@Column(name="minQ_value")),
	})
	private ReactivePower minQ;
	/**
	 * Minimum voltage  limit for the unit.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="minU_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="minU_unit")),
		@AttributeOverride(name="value", column=@Column(name="minU_value")),
	})
	private Voltage minU;
	/**
	 * Factor to calculate the breaking current (Section 4.5.2.1 in the IEC 60909-0).Used 
	 * only for single fed short circuit on a generator (Section 4.3.4.2. in the 
	 * IEC 60909-0).
	 */
	@Column(name="mu", nullable = true)
	private Float mu;
	/**
	 * Current mode of operation.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "operatingMode")
	private SynchronousMachineOperatingMode operatingMode;
	/**
	 * Percent of the coordinated reactive control that comes from this machine.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="qPercent_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="qPercent_unit")),
		@AttributeOverride(name="value", column=@Column(name="qPercent_value")),
	})
	private PerCent qPercent;
	/**
	 * Equivalent resistance (RG) of generator. RG is considered for the calculation 
	 * of all currents, except for the calculation of the peak current ip. Used 
	 * for short circuit data exchange according to IEC 60909
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="r_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="r_unit")),
		@AttributeOverride(name="value", column=@Column(name="r_value")),
	})
	private Resistance r;
	/**
	 * Zero sequence resistance of the synchronous machine.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="r0_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="r0_unit")),
		@AttributeOverride(name="value", column=@Column(name="r0_value")),
	})
	private Resistance r0;
	/**
	 * Negative sequence resistance.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="r2_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="r2_unit")),
		@AttributeOverride(name="value", column=@Column(name="r2_value")),
	})
	private Resistance r2;
	/**
	 * Priority of unit for use as powerflow voltage phase angle reference bus 
	 * selection. 0 = don t care (default) 1 = highest priority. 2 is less than 
	 * 1 and so on.
	 */
	@Column(name="referencePriority", nullable = true)
	private Integer referencePriority;
	/**
	 * Direct-axis subtransient reactance saturated, also known as Xd"sat.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="satDirectSubtransX_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="satDirectSubtransX_unit")),
		@AttributeOverride(name="value", column=@Column(name="satDirectSubtransX_value")),
	})
	private PU satDirectSubtransX;
	/**
	 * Direct-axes saturated synchronous reactance (xdsat); reciprocal of short-circuit 
	 * ration. Used for short circuit data exchange, only for single fed short 
	 * circuit on a generator. (Section 4.3.4.2. in the IEC 60909-0).
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="satDirectSyncX_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="satDirectSyncX_unit")),
		@AttributeOverride(name="value", column=@Column(name="satDirectSyncX_value")),
	})
	private PU satDirectSyncX;
	/**
	 * Saturated Direct-axis transient reactance. The attribute is primarily used 
	 * for short circuit calculations according to ANSI.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="satDirectTransX_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="satDirectTransX_unit")),
		@AttributeOverride(name="value", column=@Column(name="satDirectTransX_value")),
	})
	private PU satDirectTransX;
	/**
	 * Type of rotor, used by short circuit applications, only for single fed 
	 * short circuit according to IEC 60909.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "shortCircuitRotorType")
	private ShortCircuitRotorKind shortCircuitRotorType;
	/**
	 * Modes that this synchronous machine can operate in.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "type")
	private SynchronousMachineKind type;
	/**
	 * Range of generator voltage regulation (PG in the IEC 60909-0) used for 
	 * calculation of the impedance correction factor KG defined in IEC 60909-0This 
	 * attribute is used to describe the operating voltage of the generating unit.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="voltageRegulationRange_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="voltageRegulationRange_unit")),
		@AttributeOverride(name="value", column=@Column(name="voltageRegulationRange_value")),
	})
	private PerCent voltageRegulationRange;
	/**
	 * Zero sequence reactance of the synchronous machine.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="x0_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="x0_unit")),
		@AttributeOverride(name="value", column=@Column(name="x0_value")),
	})
	private Reactance x0;
	/**
	 * Negative sequence reactance.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="x2_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="x2_unit")),
		@AttributeOverride(name="value", column=@Column(name="x2_value")),
	})
	private Reactance x2;


	public Seconds getAVRToManualLag(){
		return this.aVRToManualLag;
	}

	@FieldSetter(fieldName = "SynchronousMachine.aVRToManualLag", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setAVRToManualLag(Seconds aVRToManualLag){
		this.aVRToManualLag = aVRToManualLag;
	}

	public Seconds getAVRToManualLead(){
		return this.aVRToManualLead;
	}

	@FieldSetter(fieldName = "SynchronousMachine.aVRToManualLead", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setAVRToManualLead(Seconds aVRToManualLead){
		this.aVRToManualLead = aVRToManualLead;
	}

	public ReactivePower getBaseQ(){
		return this.baseQ;
	}

	@FieldSetter(fieldName = "SynchronousMachine.baseQ", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setBaseQ(ReactivePower baseQ){
		this.baseQ = baseQ;
	}

	public ActivePower getCondenserP(){
		return this.condenserP;
	}

	@FieldSetter(fieldName = "SynchronousMachine.condenserP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setCondenserP(ActivePower condenserP){
		this.condenserP = condenserP;
	}

	public Float getCoolantCondition(){
		return this.coolantCondition;
	}

	@FieldSetter(fieldName = "SynchronousMachine.coolantCondition", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setCoolantCondition(Float coolantCondition){
		this.coolantCondition = coolantCondition;
	}

	public CoolantType getCoolantType(){
		return this.coolantType;
	}

	@FieldSetter(fieldName = "SynchronousMachine.coolantType", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setCoolantType(CoolantType coolantType){
		this.coolantType = coolantType;
	}

	public Boolean getEarthing(){
		return this.earthing;
	}

	@FieldSetter(fieldName = "SynchronousMachine.earthing", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setEarthing(Boolean earthing){
		this.earthing = earthing;
	}

	public Resistance getEarthingStarPointR(){
		return this.earthingStarPointR;
	}

	@FieldSetter(fieldName = "SynchronousMachine.earthingStarPointR", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setEarthingStarPointR(Resistance earthingStarPointR){
		this.earthingStarPointR = earthingStarPointR;
	}

	public Reactance getEarthingStarPointX(){
		return this.earthingStarPointX;
	}

	@FieldSetter(fieldName = "SynchronousMachine.earthingStarPointX", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setEarthingStarPointX(Reactance earthingStarPointX){
		this.earthingStarPointX = earthingStarPointX;
	}

	public CurrentFlow getIkk(){
		return this.ikk;
	}

	@FieldSetter(fieldName = "SynchronousMachine.ikk", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setIkk(CurrentFlow ikk){
		this.ikk = ikk;
	}

	public Seconds getManualToAVR(){
		return this.manualToAVR;
	}

	@FieldSetter(fieldName = "SynchronousMachine.manualToAVR", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setManualToAVR(Seconds manualToAVR){
		this.manualToAVR = manualToAVR;
	}

	public ReactivePower getMaxQ(){
		return this.maxQ;
	}

	@FieldSetter(fieldName = "SynchronousMachine.maxQ", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMaxQ(ReactivePower maxQ){
		this.maxQ = maxQ;
	}

	public Voltage getMaxU(){
		return this.maxU;
	}

	@FieldSetter(fieldName = "SynchronousMachine.maxU", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMaxU(Voltage maxU){
		this.maxU = maxU;
	}

	public ReactivePower getMinQ(){
		return this.minQ;
	}

	@FieldSetter(fieldName = "SynchronousMachine.minQ", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMinQ(ReactivePower minQ){
		this.minQ = minQ;
	}

	public Voltage getMinU(){
		return this.minU;
	}

	@FieldSetter(fieldName = "SynchronousMachine.minU", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMinU(Voltage minU){
		this.minU = minU;
	}

	public Float getMu(){
		return this.mu;
	}

	@FieldSetter(fieldName = "SynchronousMachine.mu", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setMu(Float mu){
		this.mu = mu;
	}

	public SynchronousMachineOperatingMode getOperatingMode(){
		return this.operatingMode;
	}

	@FieldSetter(fieldName = "SynchronousMachine.operatingMode", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setOperatingMode(SynchronousMachineOperatingMode operatingMode){
		this.operatingMode = operatingMode;
	}

	public PerCent getQPercent(){
		return this.qPercent;
	}

	@FieldSetter(fieldName = "SynchronousMachine.qPercent", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setQPercent(PerCent qPercent){
		this.qPercent = qPercent;
	}

	public Resistance getR(){
		return this.r;
	}

	@FieldSetter(fieldName = "SynchronousMachine.r", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setR(Resistance r){
		this.r = r;
	}

	public Resistance getR0(){
		return this.r0;
	}

	@FieldSetter(fieldName = "SynchronousMachine.r0", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setR0(Resistance r0){
		this.r0 = r0;
	}

	public Resistance getR2(){
		return this.r2;
	}

	@FieldSetter(fieldName = "SynchronousMachine.r2", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setR2(Resistance r2){
		this.r2 = r2;
	}

	public Integer getReferencePriority(){
		return this.referencePriority;
	}

	@FieldSetter(fieldName = "SynchronousMachine.referencePriority", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setReferencePriority(Integer referencePriority){
		this.referencePriority = referencePriority;
	}

	public PU getSatDirectSubtransX(){
		return this.satDirectSubtransX;
	}

	@FieldSetter(fieldName = "SynchronousMachine.satDirectSubtransX", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setSatDirectSubtransX(PU satDirectSubtransX){
		this.satDirectSubtransX = satDirectSubtransX;
	}

	public PU getSatDirectSyncX(){
		return this.satDirectSyncX;
	}

	@FieldSetter(fieldName = "SynchronousMachine.satDirectSyncX", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setSatDirectSyncX(PU satDirectSyncX){
		this.satDirectSyncX = satDirectSyncX;
	}

	public PU getSatDirectTransX(){
		return this.satDirectTransX;
	}

	@FieldSetter(fieldName = "SynchronousMachine.satDirectTransX", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setSatDirectTransX(PU satDirectTransX){
		this.satDirectTransX = satDirectTransX;
	}

	public ShortCircuitRotorKind getShortCircuitRotorType(){
		return this.shortCircuitRotorType;
	}

	@FieldSetter(fieldName = "SynchronousMachine.shortCircuitRotorType", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setShortCircuitRotorType(ShortCircuitRotorKind shortCircuitRotorType){
		this.shortCircuitRotorType = shortCircuitRotorType;
	}

	public SynchronousMachineKind getType(){
		return this.type;
	}

	@FieldSetter(fieldName = "SynchronousMachine.type", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setType(SynchronousMachineKind type){
		this.type = type;
	}

	public PerCent getVoltageRegulationRange(){
		return this.voltageRegulationRange;
	}

	@FieldSetter(fieldName = "SynchronousMachine.voltageRegulationRange", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setVoltageRegulationRange(PerCent voltageRegulationRange){
		this.voltageRegulationRange = voltageRegulationRange;
	}

	public Reactance getX0(){
		return this.x0;
	}

	@FieldSetter(fieldName = "SynchronousMachine.x0", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setX0(Reactance x0){
		this.x0 = x0;
	}

	public Reactance getX2(){
		return this.x2;
	}

	@FieldSetter(fieldName = "SynchronousMachine.x2", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setX2(Reactance x2){
		this.x2 = x2;
	}

	public SynchronousMachine(){

	}

}
