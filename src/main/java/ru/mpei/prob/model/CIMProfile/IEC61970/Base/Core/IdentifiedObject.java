package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.DiagramLayout.DiagramObject;
import ru.mpei.prob.model.CIMProfile.NTI.CimClassName;
import ru.mpei.prob.model.CIMProfile.NTI.MicrogridSchemeSynthesis.SubtaskNumber;
import ru.mpei.prob.model.CIMProfile.NTI.RpnCondition;
import ru.mpei.prob.model.CIMProfile.NTI.SchemeType;
import ru.mpei.prob.model.CIMProfile.NTI.SeasonType;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * This is a root class to provide common identification for all classes needing 
 * identification and naming attributes.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:50 MSK 2020
 */

@Entity
@Table(name = "identifiedobject")
@Inheritance(strategy = InheritanceType.JOINED)
@IdClass(ru.mpei.prob.model.CIMProfile.CompositeKey.class)
@JsonInclude(JsonInclude.Include.NON_NULL)
public class IdentifiedObject {

	@Column(name="isForArcSC", nullable = true)
	private Boolean isForArcSC;
	/**
	 * The aliasName is free text human readable name of the object alternative 
	 * to IdentifiedObject.name. It may be non unique and may not correlate to 
	 * a naming hierarchy.The attribute aliasName is retained because of backwards 
	 * compatibility between CIM relases. It is however recommended to replace 
	 * aliasName with the Name class as aliasName is planned for retirement at 
	 * a future time.
	 */
	@Column(name="aliasName", nullable = true)
	private String aliasName;
	/**
	 * Атрибут className необходим для преобразования типа объекта к классу. Например, 
	 * когда достаем объект из БД, считываем из таблицы identifiedobject этот 
	 * столбец. Значение атрибута извлекается при парсинге RDF файла из названия 
	 * элемента RDF-ресурса, не из элемента nti:IdentifiedObject.className.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "className")
	private CimClassName className;
	/**
	 * The description is a free human readable text describing or naming the 
	 * object. It may be non unique and may not correlate to a naming hierarchy.
	 */
	@Column(name="description", nullable = true)
	private String description;
	/**
	 * Master resource identifier issued by a model authority. The mRID is globally 
	 * unique within an exchange context. Global uniqueness is easily achieved 
	 * by using a UUID,  as specified in RFC 4122, for the mRID.  The use of UUID 
	 * is strongly recommended.For CIMXML data files in RDF syntax conforming 
	 * to IEC 61970-552 Edition 1, the mRID is mapped to rdf:ID or rdf:about attributes 
	 * that identify CIM object elements.
	 */
	@Id
	private String mRID;
	/**
	 * The name is any free human readable and possibly non unique text naming 
	 * the object.
	 */
	@Column(name="name", nullable = true)
	private String name;
	/**
	 * Атрибут projectID в совокупности с атрибутом mRID является составным первичным 
	 * ключем. Таким образом, один и тот же объект (с одинаковыми mRID) из разных 
	 * проектов может храниться в БД.
	 */
	@Id
	private String projectID;
	/**
	 * Поле сценария, отражающее в каком положении находятся все РПН трансформаторов
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "rpnCondition")
	private RpnCondition rpnCondition;
	/**
	 * Номер сгенерированного сценария (по умолчанию 0). Является частью составного 
	 * ключа.
	 */
	@Id
	private Integer schemaScenarioNumber = 0;
	/**
	 * Тип схемы: нормальная, либо с повреждением
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "schemeType")
	private SchemeType schemeType;
	/**
	 * Поле объектов сценария, отражающее к какому режиму относится сгенерированный 
	 * сценарий: зим. макс, зим. мин., лет. макс, лет. мин
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "seasonType")
	private SeasonType seasonType;
	/**
	 * Номер подзадачи, результатом решения которой является данный синтезированный 
	 * объект
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "subtaskNumber")
	private SubtaskNumber subtaskNumber;
	/**
	 * Номер синтезированной схемы (по умолчанию 0). Является частью составного 
	 * ключа
	 */
	@Id
	private Integer synthesizedSchemeNumber = 0;
	/**
	 * Ревизия схемы (по умолчанию 0). Является частью составного
	 * ключа
	 */
//	@Id
	@Column(name="revisionID", nullable = true)
	private Integer revisionID = 0;
	/**
	 * Был ли объект синтезирован сервисом Microgrid Scheme Synthesis
	 */
	@Column(name="wasObjectSynthesized", nullable = true)
	private Boolean wasObjectSynthesized;

	/**
	 * The domain object to which this diagram object is associated.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "IdentifiedObject")
	private List<DiagramObject> DiagramObjects;
	/**
	 * Identified object that this name designates.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "IdentifiedObject")
	private List<Name> Names;

	public String getAliasName(){
		return this.aliasName;
	}

	@FieldSetter(fieldName = "IdentifiedObject.aliasName", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setAliasName(String aliasName){
		this.aliasName = aliasName;
	}

	public CimClassName getClassName(){
		return this.className;
	}

	@FieldSetter(fieldName = "IdentifiedObject.className", fieldTypeStereotype = "Enumeration", fieldStereotype = "nti")
	public void setClassName(CimClassName className){
		this.className = className;
	}

	public String getDescription(){
		return this.description;
	}

	@FieldSetter(fieldName = "IdentifiedObject.description", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setDescription(String description){
		this.description = description;
	}

	public String getMRID(){
		return this.mRID;
	}

	@FieldSetter(fieldName = "IdentifiedObject.mRID", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setMRID(String mRID){
		this.mRID = mRID;
	}

	public String getName(){
		return this.name;
	}

	@FieldSetter(fieldName = "IdentifiedObject.name", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setName(String name){
		this.name = name;
	}

	public String getProjectID(){
		return this.projectID;
	}

	@FieldSetter(fieldName = "IdentifiedObject.projectID", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setProjectID(String projectID){
		this.projectID = projectID;
	}

	public RpnCondition getRpnCondition(){
		return this.rpnCondition;
	}

	@FieldSetter(fieldName = "IdentifiedObject.rpnCondition", fieldTypeStereotype = "Enumeration", fieldStereotype = "nti")
	public void setRpnCondition(RpnCondition rpnCondition){
		this.rpnCondition = rpnCondition;
	}

	public Integer getSchemaScenarioNumber(){
		return this.schemaScenarioNumber;
	}

	@FieldSetter(fieldName = "IdentifiedObject.schemaScenarioNumber", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setSchemaScenarioNumber(Integer schemaScenarioNumber){
		this.schemaScenarioNumber = schemaScenarioNumber;
	}

	public SchemeType getSchemeType(){
		return this.schemeType;
	}

	@FieldSetter(fieldName = "IdentifiedObject.schemeType", fieldTypeStereotype = "Enumeration", fieldStereotype = "nti")
	public void setSchemeType(SchemeType schemeType){
		this.schemeType = schemeType;
	}

	public SeasonType getSeasonType(){
		return this.seasonType;
	}

	@FieldSetter(fieldName = "IdentifiedObject.seasonType", fieldTypeStereotype = "Enumeration", fieldStereotype = "nti")
	public void setSeasonType(SeasonType seasonType){
		this.seasonType = seasonType;
	}

	public SubtaskNumber getSubtaskNumber(){
		return this.subtaskNumber;
	}

	@FieldSetter(fieldName = "IdentifiedObject.subtaskNumber", fieldTypeStereotype = "Enumeration", fieldStereotype = "nti")
	public void setSubtaskNumber(SubtaskNumber subtaskNumber){
		this.subtaskNumber = subtaskNumber;
	}

	public Integer getSynthesizedSchemeNumber(){
		return this.synthesizedSchemeNumber;
	}

	@FieldSetter(fieldName = "IdentifiedObject.synthesizedSchemeNumber", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setSynthesizedSchemeNumber(Integer synthesizedSchemeNumber){
		this.synthesizedSchemeNumber = synthesizedSchemeNumber;
	}

	public Integer getRevisionID(){
		return this.revisionID;
	}

	@FieldSetter(fieldName = "IdentifiedObject.revisionID", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setRevisionID(Integer revisionID){
		this.revisionID = revisionID;
	}

	public Boolean getWasObjectSynthesized(){
		return this.wasObjectSynthesized;
	}

	@FieldSetter(fieldName = "IdentifiedObject.wasObjectSynthesized", fieldTypeStereotype = "Primitive", fieldStereotype = "nti")
	public void setWasObjectSynthesized(Boolean wasObjectSynthesized){
		this.wasObjectSynthesized = wasObjectSynthesized;
	}

	@JsonIgnore
	public List<DiagramObject> getDiagramObjects(){
		return this.DiagramObjects;
	}

	@AssociationSetter(fieldName = "IdentifiedObject.DiagramObjects", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.DiagramLayout.DiagramObject", cardinality = "many")
	public void setDiagramObjects(List<DiagramObject> DiagramObjects){
		this.DiagramObjects = DiagramObjects;
	}

	@JsonIgnore
	public List<Name> getNames(){
		return this.Names;
	}

	@AssociationSetter(fieldName = "IdentifiedObject.Names", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Core.Name", cardinality = "many")
	public void setNames(List<Name> Names){
		this.Names = Names;
	}

	public IdentifiedObject(){

	}

	@Override
	public boolean equals(Object obj){
		if(obj == this){
			return true;
		}

		if(obj == null || obj.getClass() != this.getClass()){
			return false;
		}

		IdentifiedObject identifiedObject = (IdentifiedObject) obj;
		return ((this.getMRID() == identifiedObject.getMRID()) || (this.getMRID() != null && this.getMRID().equals(identifiedObject.getMRID())))
			&& ((this.getProjectID()==null && identifiedObject.getProjectID()==null) || (this.getProjectID() == identifiedObject.getProjectID()) || (this.getProjectID() != null && this.getProjectID().equals(identifiedObject.getProjectID())))
			&& ((this.getSynthesizedSchemeNumber()==null && identifiedObject.getSynthesizedSchemeNumber()==null) || (this.getSynthesizedSchemeNumber() == identifiedObject.getSynthesizedSchemeNumber()) || (this.getSynthesizedSchemeNumber() != null && this.getSynthesizedSchemeNumber().equals(identifiedObject.getSynthesizedSchemeNumber())))
			&& ((this.getSchemaScenarioNumber()==null && identifiedObject.getSchemaScenarioNumber()==null) || (this.getSchemaScenarioNumber() == identifiedObject.getSchemaScenarioNumber()) || (this.getSchemaScenarioNumber() != null && this.getSchemaScenarioNumber().equals(identifiedObject.getSchemaScenarioNumber())));
//			&& ((this.getRevisionID()==null && identifiedObject.getRevisionID()==null) || (this.getRevisionID() == identifiedObject.getRevisionID()) || (this.getRevisionID() != null && this.getRevisionID().equals(identifiedObject.getRevisionID())));
	}

	@Override
	public int hashCode(){
		final int prime = 31;
		int result = 1;
		result = prime * result + ((this.getMRID()==null) ? 0 : this.getMRID().hashCode());
		result = prime * result + ((this.getProjectID()==null) ? 0 : this.getProjectID().hashCode());
		result = prime * result + ((this.getSynthesizedSchemeNumber()==null) ? 0 : this.getSynthesizedSchemeNumber().hashCode());
		result = prime * result + ((this.getSchemaScenarioNumber()==null) ? 0 : this.getSchemaScenarioNumber().hashCode());
//		result = prime * result + ((this.getRevisionID()==null) ? 0 : this.getRevisionID().hashCode());
		return result;
	}


}
