package ru.mpei.prob.model.CIMProfile.IEC61970.Base.DiagramLayout;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.IdentifiedObject;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * The diagram being exchanged.  The coordinate system is a standard Cartesian 
 * coordinate system and the orientation attribute defines the orientation.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:51 MSK 2020
 */

@Entity
@Table(name = "diagram")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Diagram extends IdentifiedObject {
	/**
	 * Coordinate system orientation of the diagram.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "orientation")
	private OrientationKind orientation;
	/**
	 * X coordinate of the first corner of the initial view.
	 */
	@Column(name="x1InitialView", nullable = true)
	private Float x1InitialView;
	/**
	 * X coordinate of the second corner of the initial view.
	 */
	@Column(name="x2InitialView", nullable = true)
	private Float x2InitialView;
	/**
	 * Y coordinate of the first corner of the initial view.
	 */
	@Column(name="y1InitialView", nullable = true)
	private Float y1InitialView;
	/**
	 * Y coordinate of the second corner of the initial view.
	 */
	@Column(name="y2InitialView", nullable = true)
	private Float y2InitialView;

	/**
	 * A DiagramStyle can be used by many Diagrams.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "diagramstyle_mrid")
	@JoinColumn(name = "diagramstyle_projectid")
	@JoinColumn(name = "diagramstyle_synthesizedschemenumber")
	@JoinColumn(name = "diagramstyle_schemascenarionumber")
	private DiagramStyle DiagramStyle;
	/**
	 * A diagram object is part of a diagram.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "Diagram")
	private List<DiagramObject> DiagramElements;

	public OrientationKind getOrientation(){
		return this.orientation;
	}

	@FieldSetter(fieldName = "Diagram.orientation", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setOrientation(OrientationKind orientation){
		this.orientation = orientation;
	}

	public Float getX1InitialView(){
		return this.x1InitialView;
	}

	@FieldSetter(fieldName = "Diagram.x1InitialView", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setX1InitialView(Float x1InitialView){
		this.x1InitialView = x1InitialView;
	}

	public Float getX2InitialView(){
		return this.x2InitialView;
	}

	@FieldSetter(fieldName = "Diagram.x2InitialView", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setX2InitialView(Float x2InitialView){
		this.x2InitialView = x2InitialView;
	}

	public Float getY1InitialView(){
		return this.y1InitialView;
	}

	@FieldSetter(fieldName = "Diagram.y1InitialView", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setY1InitialView(Float y1InitialView){
		this.y1InitialView = y1InitialView;
	}

	public Float getY2InitialView(){
		return this.y2InitialView;
	}

	@FieldSetter(fieldName = "Diagram.y2InitialView", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setY2InitialView(Float y2InitialView){
		this.y2InitialView = y2InitialView;
	}

	public DiagramStyle getDiagramStyle(){
		return this.DiagramStyle;
	}

	@AssociationSetter(fieldName = "Diagram.DiagramStyle", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.DiagramLayout.DiagramStyle", cardinality = "one")
	public void setDiagramStyle(DiagramStyle DiagramStyle){
		this.DiagramStyle = DiagramStyle;
	}

	@JsonIgnore
	public List<DiagramObject> getDiagramElements(){
		return this.DiagramElements;
	}

	@AssociationSetter(fieldName = "Diagram.DiagramElements", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.DiagramLayout.DiagramObject", cardinality = "many")
	public void setDiagramElements(List<DiagramObject> DiagramElements){
		this.DiagramElements = DiagramElements;
	}

	public Diagram(){

	}

}
