package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.PowerSystemResource;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * Single phase of a multi-phase shunt compensator when its attributes might 
 * be different per phase.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:56 MSK 2020
 */

@Entity
@Table(name = "shuntcompensatorphase")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ShuntCompensatorPhase extends PowerSystemResource {
	/**
	 * The maximum number of sections that may be switched in for this phase. 
	 * 
	 */
	@Column(name="maximumSections", nullable = true)
	private Integer maximumSections;
	/**
	 * For the capacitor phase, the normal number of sections switched in.
	 */
	@Column(name="normalSections", nullable = true)
	private Integer normalSections;
	/**
	 * Phase of this shunt compensator component.   If the shunt compensator is 
	 * wye connected, the connection is from the indicated phase to the central 
	 * ground or neutral point.  If the shunt compensator is delta connected, 
	 * the phase indicates a shunt compensator connected from the indicated phase 
	 * to the next logical non-neutral phase.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "phase")
	private SinglePhaseKind phase;

	/**
	 * The individual phases models for the shunt compensator.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "shuntcompensator_mrid")
	@JoinColumn(name = "shuntcompensator_projectid")
	@JoinColumn(name = "shuntcompensator_synthesizedschemenumber")
	@JoinColumn(name = "shuntcompensator_schemascenarionumber")
	private ShuntCompensator ShuntCompensator;

	public Integer getMaximumSections(){
		return this.maximumSections;
	}

	@FieldSetter(fieldName = "ShuntCompensatorPhase.maximumSections", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setMaximumSections(Integer maximumSections){
		this.maximumSections = maximumSections;
	}

	public Integer getNormalSections(){
		return this.normalSections;
	}

	@FieldSetter(fieldName = "ShuntCompensatorPhase.normalSections", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setNormalSections(Integer normalSections){
		this.normalSections = normalSections;
	}

	public SinglePhaseKind getPhase(){
		return this.phase;
	}

	@FieldSetter(fieldName = "ShuntCompensatorPhase.phase", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setPhase(SinglePhaseKind phase){
		this.phase = phase;
	}

	public ShuntCompensator getShuntCompensator(){
		return this.ShuntCompensator;
	}

	@AssociationSetter(fieldName = "ShuntCompensatorPhase.ShuntCompensator", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Wires.ShuntCompensator", cardinality = "one")
	public void setShuntCompensator(ShuntCompensator ShuntCompensator){
		this.ShuntCompensator = ShuntCompensator;
	}

	public ShuntCompensatorPhase(){

	}

}
