package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Generation.Production;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.Equipment;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.*;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires.RotatingMachine;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * A single or set of synchronous machines for converting mechanical power 
 * into alternating-current power. For example, individual machines within 
 * a set may be defined for scheduling purposes while a single control signal 
 * is derived for the set. In this case there would be a GeneratingUnit for 
 * each member of the set and an additional GeneratingUnit corresponding to 
 * the set.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:52 MSK 2020
 */

@Entity
@Table(name = "generatingunit")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class GeneratingUnit extends Equipment {
	/**
	 * The planned unused capacity (spinning reserve) which can be used to support 
	 * emergency load.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="allocSpinResP_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="allocSpinResP_unit")),
		@AttributeOverride(name="value", column=@Column(name="allocSpinResP_value")),
	})
	private ActivePower allocSpinResP;
	/**
	 * The planned unused capacity which can be used to support automatic control 
	 * overruns.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="autoCntrlMarginP_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="autoCntrlMarginP_unit")),
		@AttributeOverride(name="value", column=@Column(name="autoCntrlMarginP_value")),
	})
	private ActivePower autoCntrlMarginP;
	/**
	 * For dispatchable units, this value represents the economic active power 
	 * basepoint, for units that are not dispatchable, this value represents the 
	 * fixed generation value. The value must be between the operating low and 
	 * high limits.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="baseP_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="baseP_unit")),
		@AttributeOverride(name="value", column=@Column(name="baseP_value")),
	})
	private ActivePower baseP;
	/**
	 * Unit control error deadband. When a unit's desired active power change 
	 * is less than this deadband, then no control pulses will be sent to the 
	 * unit.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="controlDeadband_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="controlDeadband_unit")),
		@AttributeOverride(name="value", column=@Column(name="controlDeadband_value")),
	})
	private ActivePower controlDeadband;
	/**
	 * Pulse high limit which is the largest control pulse that the unit can respond 
	 * to.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="controlPulseHigh_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="controlPulseHigh_unit")),
		@AttributeOverride(name="value", column=@Column(name="controlPulseHigh_value")),
	})
	private Seconds controlPulseHigh;
	/**
	 * Pulse low limit which is the smallest control pulse that the unit can respond 
	 * to.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="controlPulseLow_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="controlPulseLow_unit")),
		@AttributeOverride(name="value", column=@Column(name="controlPulseLow_value")),
	})
	private Seconds controlPulseLow;
	/**
	 * Unit response rate which specifies the active power change for a control 
	 * pulse of one second in the most responsive loading level of the unit.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="denominatorMultiplier", column=@Column(name="controlResponseRate_denominatorMultiplier")),
		@AttributeOverride(name="denominatorUnit", column=@Column(name="controlResponseRate_denominatorUnit")),
		@AttributeOverride(name="multiplier", column=@Column(name="controlResponseRate_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="controlResponseRate_unit")),
		@AttributeOverride(name="value", column=@Column(name="controlResponseRate_value")),
	})
	private ActivePowerChangeRate controlResponseRate;
	/**
	 * The efficiency of the unit in converting mechanical energy, from the prime 
	 * mover, into electrical energy.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="efficiency_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="efficiency_unit")),
		@AttributeOverride(name="value", column=@Column(name="efficiency_value")),
	})
	private PerCent efficiency;
	/**
	 * The unit control mode.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "genControlMode")
	private GeneratorControlMode genControlMode;
	/**
	 * The source of controls for a generating unit.
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "genControlSource")
	private GeneratorControlSource genControlSource;
	/**
	 * Governor motor position limit.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="governorMPL_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="governorMPL_unit")),
		@AttributeOverride(name="value", column=@Column(name="governorMPL_value")),
	})
	private PU governorMPL;
	/**
	 * Governor Speed Changer Droop.   This is the change in generator power output 
	 * divided by the change in frequency normalized by the nominal power of the 
	 * generator and the nominal frequency and expressed in percent and negated. 
	 * A positive value of speed change droop provides additional generator output 
	 * upon a drop in frequency.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="governorSCD_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="governorSCD_unit")),
		@AttributeOverride(name="value", column=@Column(name="governorSCD_value")),
	})
	private PerCent governorSCD;
	/**
	 * High limit for secondary (AGC) control.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="highControlLimit_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="highControlLimit_unit")),
		@AttributeOverride(name="value", column=@Column(name="highControlLimit_value")),
	})
	private ActivePower highControlLimit;
	/**
	 * Default initial active power  which is used to store a powerflow result 
	 * for the initial active power for this unit in this network configuration.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="initialP_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="initialP_unit")),
		@AttributeOverride(name="value", column=@Column(name="initialP_value")),
	})
	private ActivePower initialP;
	/**
	 * Generating unit long term economic participation factor.
	 */
	@Column(name="longPF", nullable = true)
	private Float longPF;
	/**
	 * Low limit for secondary (AGC) control.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="lowControlLimit_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="lowControlLimit_unit")),
		@AttributeOverride(name="value", column=@Column(name="lowControlLimit_value")),
	})
	private ActivePower lowControlLimit;
	/**
	 * The normal maximum rate the generating unit active power output can be 
	 * lowered by control actions.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="denominatorMultiplier", column=@Column(name="lowerRampRate_denominatorMultiplier")),
		@AttributeOverride(name="denominatorUnit", column=@Column(name="lowerRampRate_denominatorUnit")),
		@AttributeOverride(name="multiplier", column=@Column(name="lowerRampRate_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="lowerRampRate_unit")),
		@AttributeOverride(name="value", column=@Column(name="lowerRampRate_value")),
	})
	private ActivePowerChangeRate lowerRampRate;
	/**
	 * Maximum high economic active power limit, that should not exceed the maximum 
	 * operating active power limit.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="maxEconomicP_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="maxEconomicP_unit")),
		@AttributeOverride(name="value", column=@Column(name="maxEconomicP_value")),
	})
	private ActivePower maxEconomicP;
	/**
	 * Maximum allowable spinning reserve. Spinning reserve will never be considered 
	 * greater than this value regardless of the current operating point.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="maximumAllowableSpinningReserve_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="maximumAllowableSpinningReserve_unit")),
		@AttributeOverride(name="value", column=@Column(name="maximumAllowableSpinningReserve_value")),
	})
	private ActivePower maximumAllowableSpinningReserve;
	/**
	 * This is the maximum operating active power limit the dispatcher can enter 
	 * for this unit.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="maxOperatingP_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="maxOperatingP_unit")),
		@AttributeOverride(name="value", column=@Column(name="maxOperatingP_value")),
	})
	private ActivePower maxOperatingP;
	/**
	 * Low economic active power limit that must be greater than or equal to the 
	 * minimum operating active power limit.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="minEconomicP_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="minEconomicP_unit")),
		@AttributeOverride(name="value", column=@Column(name="minEconomicP_value")),
	})
	private ActivePower minEconomicP;
	/**
	 * Minimum time interval between unit shutdown and startup.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="minimumOffTime_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="minimumOffTime_unit")),
		@AttributeOverride(name="value", column=@Column(name="minimumOffTime_value")),
	})
	private Seconds minimumOffTime;
	/**
	 * This is the minimum operating active power limit the dispatcher can enter 
	 * for this unit.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="minOperatingP_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="minOperatingP_unit")),
		@AttributeOverride(name="value", column=@Column(name="minOperatingP_value")),
	})
	private ActivePower minOperatingP;
	/**
	 * Detail level of the generator model data.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="modelDetail_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="modelDetail_unit")),
		@AttributeOverride(name="value", column=@Column(name="modelDetail_value")),
	})
	private Classification modelDetail;
	/**
	 * The nominal power of the generating unit.  Used to give precise meaning 
	 * to percentage based attributes such as the governor speed change droop 
	 * (governorSCD attribute).The attribute shall be a positive value equal or 
	 * less than RotatingMachine.ratedS.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="nominalP_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="nominalP_unit")),
		@AttributeOverride(name="value", column=@Column(name="nominalP_value")),
	})
	private ActivePower nominalP;
	/**
	 * Generating unit economic participation factor.
	 */
	@Column(name="normalPF", nullable = true)
	private Float normalPF;
	/**
	 * Defined as: 1 / ( 1 - Incremental Transmission Loss); with the Incremental 
	 * Transmission Loss expressed as a plus or minus value. The typical range 
	 * of penalty factors is (0.9 to 1.1).
	 */
	@Column(name="penaltyFactor", nullable = true)
	private Float penaltyFactor;
	/**
	 * The normal maximum rate the generating unit active power output can be 
	 * raised by control actions.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="denominatorMultiplier", column=@Column(name="raiseRampRate_denominatorMultiplier")),
		@AttributeOverride(name="denominatorUnit", column=@Column(name="raiseRampRate_denominatorUnit")),
		@AttributeOverride(name="multiplier", column=@Column(name="raiseRampRate_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="raiseRampRate_unit")),
		@AttributeOverride(name="value", column=@Column(name="raiseRampRate_value")),
	})
	private ActivePowerChangeRate raiseRampRate;
	/**
	 * The unit's gross rated maximum capacity (book value).
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedGrossMaxP_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedGrossMaxP_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedGrossMaxP_value")),
	})
	private ActivePower ratedGrossMaxP;
	/**
	 * The gross rated minimum generation level which the unit can safely operate 
	 * at while delivering power to the transmission grid.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedGrossMinP_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedGrossMinP_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedGrossMinP_value")),
	})
	private ActivePower ratedGrossMinP;
	/**
	 * The net rated maximum capacity determined by subtracting the auxiliary 
	 * power used to operate the internal plant machinery from the rated gross 
	 * maximum capacity.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="ratedNetMaxP_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="ratedNetMaxP_unit")),
		@AttributeOverride(name="value", column=@Column(name="ratedNetMaxP_value")),
	})
	private ActivePower ratedNetMaxP;
	/**
	 * Generating unit short term economic participation factor.
	 */
	@Column(name="shortPF", nullable = true)
	private Float shortPF;
	/**
	 * The initial startup cost incurred for each start of the GeneratingUnit.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="startupCost_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="startupCost_unit")),
		@AttributeOverride(name="value", column=@Column(name="startupCost_value")),
	})
	private Money startupCost;
	/**
	 * Time it takes to get the unit on-line, from the time that the prime mover 
	 * mechanical power is applied.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="startupTime_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="startupTime_unit")),
		@AttributeOverride(name="value", column=@Column(name="startupTime_value")),
	})
	private Seconds startupTime;
	/**
	 * Generating unit economic participation factor.
	 */
	@Column(name="tieLinePF", nullable = true)
	private Float tieLinePF;
	/**
	 * The efficiency of the unit in converting the fuel into electrical energy.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="totalEfficiency_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="totalEfficiency_unit")),
		@AttributeOverride(name="value", column=@Column(name="totalEfficiency_value")),
	})
	private PerCent totalEfficiency;
	/**
	 * The variable cost component of production per unit of ActivePower.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="variableCost_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="variableCost_unit")),
		@AttributeOverride(name="value", column=@Column(name="variableCost_value")),
	})
	private Money variableCost;

	/**
	 * A synchronous machine may operate as a generator and as such becomes a 
	 * member of a generating unit.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "GeneratingUnit")
	private List<RotatingMachine> RotatingMachine;

	public ActivePower getAllocSpinResP(){
		return this.allocSpinResP;
	}

	@FieldSetter(fieldName = "GeneratingUnit.allocSpinResP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setAllocSpinResP(ActivePower allocSpinResP){
		this.allocSpinResP = allocSpinResP;
	}

	public ActivePower getAutoCntrlMarginP(){
		return this.autoCntrlMarginP;
	}

	@FieldSetter(fieldName = "GeneratingUnit.autoCntrlMarginP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setAutoCntrlMarginP(ActivePower autoCntrlMarginP){
		this.autoCntrlMarginP = autoCntrlMarginP;
	}

	public ActivePower getBaseP(){
		return this.baseP;
	}

	@FieldSetter(fieldName = "GeneratingUnit.baseP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setBaseP(ActivePower baseP){
		this.baseP = baseP;
	}

	public ActivePower getControlDeadband(){
		return this.controlDeadband;
	}

	@FieldSetter(fieldName = "GeneratingUnit.controlDeadband", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setControlDeadband(ActivePower controlDeadband){
		this.controlDeadband = controlDeadband;
	}

	public Seconds getControlPulseHigh(){
		return this.controlPulseHigh;
	}

	@FieldSetter(fieldName = "GeneratingUnit.controlPulseHigh", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setControlPulseHigh(Seconds controlPulseHigh){
		this.controlPulseHigh = controlPulseHigh;
	}

	public Seconds getControlPulseLow(){
		return this.controlPulseLow;
	}

	@FieldSetter(fieldName = "GeneratingUnit.controlPulseLow", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setControlPulseLow(Seconds controlPulseLow){
		this.controlPulseLow = controlPulseLow;
	}

	public ActivePowerChangeRate getControlResponseRate(){
		return this.controlResponseRate;
	}

	@FieldSetter(fieldName = "GeneratingUnit.controlResponseRate", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setControlResponseRate(ActivePowerChangeRate controlResponseRate){
		this.controlResponseRate = controlResponseRate;
	}

	public PerCent getEfficiency(){
		return this.efficiency;
	}

	@FieldSetter(fieldName = "GeneratingUnit.efficiency", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setEfficiency(PerCent efficiency){
		this.efficiency = efficiency;
	}

	public GeneratorControlMode getGenControlMode(){
		return this.genControlMode;
	}

	@FieldSetter(fieldName = "GeneratingUnit.genControlMode", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setGenControlMode(GeneratorControlMode genControlMode){
		this.genControlMode = genControlMode;
	}

	public GeneratorControlSource getGenControlSource(){
		return this.genControlSource;
	}

	@FieldSetter(fieldName = "GeneratingUnit.genControlSource", fieldTypeStereotype = "Enumeration", fieldStereotype = "none")
	public void setGenControlSource(GeneratorControlSource genControlSource){
		this.genControlSource = genControlSource;
	}

	public PU getGovernorMPL(){
		return this.governorMPL;
	}

	@FieldSetter(fieldName = "GeneratingUnit.governorMPL", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setGovernorMPL(PU governorMPL){
		this.governorMPL = governorMPL;
	}

	public PerCent getGovernorSCD(){
		return this.governorSCD;
	}

	@FieldSetter(fieldName = "GeneratingUnit.governorSCD", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setGovernorSCD(PerCent governorSCD){
		this.governorSCD = governorSCD;
	}

	public ActivePower getHighControlLimit(){
		return this.highControlLimit;
	}

	@FieldSetter(fieldName = "GeneratingUnit.highControlLimit", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setHighControlLimit(ActivePower highControlLimit){
		this.highControlLimit = highControlLimit;
	}

	public ActivePower getInitialP(){
		return this.initialP;
	}

	@FieldSetter(fieldName = "GeneratingUnit.initialP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setInitialP(ActivePower initialP){
		this.initialP = initialP;
	}

	public Float getLongPF(){
		return this.longPF;
	}

	@FieldSetter(fieldName = "GeneratingUnit.longPF", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setLongPF(Float longPF){
		this.longPF = longPF;
	}

	public ActivePower getLowControlLimit(){
		return this.lowControlLimit;
	}

	@FieldSetter(fieldName = "GeneratingUnit.lowControlLimit", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setLowControlLimit(ActivePower lowControlLimit){
		this.lowControlLimit = lowControlLimit;
	}

	public ActivePowerChangeRate getLowerRampRate(){
		return this.lowerRampRate;
	}

	@FieldSetter(fieldName = "GeneratingUnit.lowerRampRate", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setLowerRampRate(ActivePowerChangeRate lowerRampRate){
		this.lowerRampRate = lowerRampRate;
	}

	public ActivePower getMaxEconomicP(){
		return this.maxEconomicP;
	}

	@FieldSetter(fieldName = "GeneratingUnit.maxEconomicP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMaxEconomicP(ActivePower maxEconomicP){
		this.maxEconomicP = maxEconomicP;
	}

	public ActivePower getMaximumAllowableSpinningReserve(){
		return this.maximumAllowableSpinningReserve;
	}

	@FieldSetter(fieldName = "GeneratingUnit.maximumAllowableSpinningReserve", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMaximumAllowableSpinningReserve(ActivePower maximumAllowableSpinningReserve){
		this.maximumAllowableSpinningReserve = maximumAllowableSpinningReserve;
	}

	public ActivePower getMaxOperatingP(){
		return this.maxOperatingP;
	}

	@FieldSetter(fieldName = "GeneratingUnit.maxOperatingP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMaxOperatingP(ActivePower maxOperatingP){
		this.maxOperatingP = maxOperatingP;
	}

	public ActivePower getMinEconomicP(){
		return this.minEconomicP;
	}

	@FieldSetter(fieldName = "GeneratingUnit.minEconomicP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMinEconomicP(ActivePower minEconomicP){
		this.minEconomicP = minEconomicP;
	}

	public Seconds getMinimumOffTime(){
		return this.minimumOffTime;
	}

	@FieldSetter(fieldName = "GeneratingUnit.minimumOffTime", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMinimumOffTime(Seconds minimumOffTime){
		this.minimumOffTime = minimumOffTime;
	}

	public ActivePower getMinOperatingP(){
		return this.minOperatingP;
	}

	@FieldSetter(fieldName = "GeneratingUnit.minOperatingP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setMinOperatingP(ActivePower minOperatingP){
		this.minOperatingP = minOperatingP;
	}

	public Classification getModelDetail(){
		return this.modelDetail;
	}

	@FieldSetter(fieldName = "GeneratingUnit.modelDetail", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setModelDetail(Classification modelDetail){
		this.modelDetail = modelDetail;
	}

	public ActivePower getNominalP(){
		return this.nominalP;
	}

	@FieldSetter(fieldName = "GeneratingUnit.nominalP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setNominalP(ActivePower nominalP){
		this.nominalP = nominalP;
	}

	public Float getNormalPF(){
		return this.normalPF;
	}

	@FieldSetter(fieldName = "GeneratingUnit.normalPF", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setNormalPF(Float normalPF){
		this.normalPF = normalPF;
	}

	public Float getPenaltyFactor(){
		return this.penaltyFactor;
	}

	@FieldSetter(fieldName = "GeneratingUnit.penaltyFactor", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setPenaltyFactor(Float penaltyFactor){
		this.penaltyFactor = penaltyFactor;
	}

	public ActivePowerChangeRate getRaiseRampRate(){
		return this.raiseRampRate;
	}

	@FieldSetter(fieldName = "GeneratingUnit.raiseRampRate", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setRaiseRampRate(ActivePowerChangeRate raiseRampRate){
		this.raiseRampRate = raiseRampRate;
	}

	public ActivePower getRatedGrossMaxP(){
		return this.ratedGrossMaxP;
	}

	@FieldSetter(fieldName = "GeneratingUnit.ratedGrossMaxP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setRatedGrossMaxP(ActivePower ratedGrossMaxP){
		this.ratedGrossMaxP = ratedGrossMaxP;
	}

	public ActivePower getRatedGrossMinP(){
		return this.ratedGrossMinP;
	}

	@FieldSetter(fieldName = "GeneratingUnit.ratedGrossMinP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setRatedGrossMinP(ActivePower ratedGrossMinP){
		this.ratedGrossMinP = ratedGrossMinP;
	}

	public ActivePower getRatedNetMaxP(){
		return this.ratedNetMaxP;
	}

	@FieldSetter(fieldName = "GeneratingUnit.ratedNetMaxP", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setRatedNetMaxP(ActivePower ratedNetMaxP){
		this.ratedNetMaxP = ratedNetMaxP;
	}

	public Float getShortPF(){
		return this.shortPF;
	}

	@FieldSetter(fieldName = "GeneratingUnit.shortPF", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setShortPF(Float shortPF){
		this.shortPF = shortPF;
	}

	public Money getStartupCost(){
		return this.startupCost;
	}

	@FieldSetter(fieldName = "GeneratingUnit.startupCost", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setStartupCost(Money startupCost){
		this.startupCost = startupCost;
	}

	public Seconds getStartupTime(){
		return this.startupTime;
	}

	@FieldSetter(fieldName = "GeneratingUnit.startupTime", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setStartupTime(Seconds startupTime){
		this.startupTime = startupTime;
	}

	public Float getTieLinePF(){
		return this.tieLinePF;
	}

	@FieldSetter(fieldName = "GeneratingUnit.tieLinePF", fieldTypeStereotype = "Primitive", fieldStereotype = "none")
	public void setTieLinePF(Float tieLinePF){
		this.tieLinePF = tieLinePF;
	}

	public PerCent getTotalEfficiency(){
		return this.totalEfficiency;
	}

	@FieldSetter(fieldName = "GeneratingUnit.totalEfficiency", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setTotalEfficiency(PerCent totalEfficiency){
		this.totalEfficiency = totalEfficiency;
	}

	public Money getVariableCost(){
		return this.variableCost;
	}

	@FieldSetter(fieldName = "GeneratingUnit.variableCost", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setVariableCost(Money variableCost){
		this.variableCost = variableCost;
	}

	@JsonIgnore
	public List<RotatingMachine> getRotatingMachine(){
		return this.RotatingMachine;
	}

	@AssociationSetter(fieldName = "GeneratingUnit.RotatingMachine", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Wires.RotatingMachine", cardinality = "many")
	public void setRotatingMachine(List<RotatingMachine> RotatingMachine){
		this.RotatingMachine = RotatingMachine;
	}

	public GeneratingUnit(){

	}

}
