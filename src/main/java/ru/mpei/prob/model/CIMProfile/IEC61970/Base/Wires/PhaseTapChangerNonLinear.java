package ru.mpei.prob.model.CIMProfile.IEC61970.Base.Wires;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.PerCent;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.Reactance;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * The non-linear phase tap changer describes the non-linear behavior of a 
 * phase tap changer. This is a base class for the symmetrical and asymmetrical 
 * phase tap changer models. The details of these models can be found in the 
 * IEC 61970-301 document.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:55 MSK 2020
 */

@Entity
@Table(name = "phasetapchangernonlinear")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class PhaseTapChangerNonLinear extends PhaseTapChanger {
	/**
	 * The voltage step increment on the out of phase winding specified in percent 
	 * of nominal voltage of the transformer end.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="voltageStepIncrement_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="voltageStepIncrement_unit")),
		@AttributeOverride(name="value", column=@Column(name="voltageStepIncrement_value")),
	})
	private PerCent voltageStepIncrement;
	/**
	 * The reactance depend on the tap position according to a "u" shaped curve. 
	 * The maximum reactance (xMax) appear at the low and high tap positions.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="xMax_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="xMax_unit")),
		@AttributeOverride(name="value", column=@Column(name="xMax_value")),
	})
	private Reactance xMax;
	/**
	 * The reactance depend on the tap position according to a "u" shaped curve. 
	 * The minimum reactance (xMin) appear at the mid tap position.
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="xMin_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="xMin_unit")),
		@AttributeOverride(name="value", column=@Column(name="xMin_value")),
	})
	private Reactance xMin;


	public PerCent getVoltageStepIncrement(){
		return this.voltageStepIncrement;
	}

	@FieldSetter(fieldName = "PhaseTapChangerNonLinear.voltageStepIncrement", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setVoltageStepIncrement(PerCent voltageStepIncrement){
		this.voltageStepIncrement = voltageStepIncrement;
	}

	public Reactance getXMax(){
		return this.xMax;
	}

	@FieldSetter(fieldName = "PhaseTapChangerNonLinear.xMax", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setXMax(Reactance xMax){
		this.xMax = xMax;
	}

	public Reactance getXMin(){
		return this.xMin;
	}

	@FieldSetter(fieldName = "PhaseTapChangerNonLinear.xMin", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setXMin(Reactance xMin){
		this.xMin = xMin;
	}

	public PhaseTapChangerNonLinear(){

	}

}
