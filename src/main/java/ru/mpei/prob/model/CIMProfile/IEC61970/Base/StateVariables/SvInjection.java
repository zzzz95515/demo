package ru.mpei.prob.model.CIMProfile.IEC61970.Base.StateVariables;

import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.ActivePower;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Domain.ReactivePower;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Topology.TopologicalNode;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;

/**
 * The SvInjection is reporting the calculated bus injection minus the sum 
 * of the terminal flows. The terminal flow is positive out from the bus (load 
 * sign convention) and bus injection has positive flow into the bus. SvInjection 
 * may have the remainder after state estimation or slack after power flow 
 * calculation.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:54 MSK 2020
 */

@Entity
@Table(name = "svinjection")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class SvInjection extends StateVariable {
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="maxQ_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="maxQ_unit")),
		@AttributeOverride(name="value", column=@Column(name="maxQ_value")),
	})
	private ReactivePower maxQ;
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="minQ_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="minQ_unit")),
		@AttributeOverride(name="value", column=@Column(name="minQ_value")),
	})
	private ReactivePower minQ;
	/**
	 * The active power injected into the bus in addition to injections from equipment 
	 * terminals.  Positive sign means injection into the TopologicalNode (bus).
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="pInjection_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="pInjection_unit")),
		@AttributeOverride(name="value", column=@Column(name="pInjection_value")),
	})
	private ActivePower pInjection;
	/**
	 * Значение нагрузки (активной мощности) в топологическом узле.Атрибут используется 
	 * в расчетах нормального режима
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="pLoad_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="pLoad_unit")),
		@AttributeOverride(name="value", column=@Column(name="pLoad_value")),
	})
	private ActivePower pLoad;
	/**
	 * The reactive power injected into the bus in addition to injections from 
	 * equipment terminals. Positive sign means injection into the TopologicalNode 
	 * (bus).
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="qInjection_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="qInjection_unit")),
		@AttributeOverride(name="value", column=@Column(name="qInjection_value")),
	})
	private ReactivePower qInjection;
	/**
	 * Значение нагрузки (активной мощности) в топологическом узле.Атрибут используется 
	 * в расчетах нормального режима
	 */
	@AttributeOverrides({
		@AttributeOverride(name="multiplier", column=@Column(name="qLoad_multiplier")),
		@AttributeOverride(name="unit", column=@Column(name="qLoad_unit")),
		@AttributeOverride(name="value", column=@Column(name="qLoad_value")),
	})
	private ReactivePower qLoad;

	/**
	 * The injection flows state variables associated with the topological node.
	 */
	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "topologicalnode_mrid")
	@JoinColumn(name = "topologicalnode_projectid")
	@JoinColumn(name = "topologicalnode_synthesizedschemenumber")
	@JoinColumn(name = "topologicalnode_schemascenarionumber")
	private TopologicalNode TopologicalNode;

	public ReactivePower getMaxQ(){
		return this.maxQ;
	}

	@FieldSetter(fieldName = "SvInjection.maxQ", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setMaxQ(ReactivePower maxQ){
		this.maxQ = maxQ;
	}

	public ReactivePower getMinQ(){
		return this.minQ;
	}

	@FieldSetter(fieldName = "SvInjection.minQ", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setMinQ(ReactivePower minQ){
		this.minQ = minQ;
	}

	public ActivePower getPInjection(){
		return this.pInjection;
	}

	@FieldSetter(fieldName = "SvInjection.pInjection", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setPInjection(ActivePower pInjection){
		this.pInjection = pInjection;
	}

	public ActivePower getPLoad(){
		return this.pLoad;
	}

	@FieldSetter(fieldName = "SvInjection.pLoad", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setPLoad(ActivePower pLoad){
		this.pLoad = pLoad;
	}

	public ReactivePower getQInjection(){
		return this.qInjection;
	}

	@FieldSetter(fieldName = "SvInjection.qInjection", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "none")
	public void setQInjection(ReactivePower qInjection){
		this.qInjection = qInjection;
	}

	public ReactivePower getQLoad(){
		return this.qLoad;
	}

	@FieldSetter(fieldName = "SvInjection.qLoad", fieldTypeStereotype = "CIMDatatype", fieldStereotype = "nti")
	public void setQLoad(ReactivePower qLoad){
		this.qLoad = qLoad;
	}

	public TopologicalNode getTopologicalNode(){
		return this.TopologicalNode;
	}

	@AssociationSetter(fieldName = "SvInjection.TopologicalNode", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Topology.TopologicalNode", cardinality = "one")
	public void setTopologicalNode(TopologicalNode TopologicalNode){
		this.TopologicalNode = TopologicalNode;
	}

	public SvInjection(){

	}

}
