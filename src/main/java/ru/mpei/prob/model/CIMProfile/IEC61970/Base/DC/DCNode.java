package ru.mpei.prob.model.CIMProfile.IEC61970.Base.DC;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.IdentifiedObject;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * DC nodes are points where terminals of DC conducting equipment are connected 
 * together with zero impedance.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:51 MSK 2020
 */

@Entity
@Table(name = "dcnode")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class DCNode extends IdentifiedObject {

	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "DCNode")
	private List<DCBaseTerminal> DCTerminals;
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "dcequipmentcontainer_mrid")
	@JoinColumn(name = "dcequipmentcontainer_projectid")
	@JoinColumn(name = "dcequipmentcontainer_synthesizedschemenumber")
	@JoinColumn(name = "dcequipmentcontainer_schemascenarionumber")
	private DCEquipmentContainer DCEquipmentContainer;

	@JsonIgnore
	public List<DCBaseTerminal> getDCTerminals(){
		return this.DCTerminals;
	}

	@AssociationSetter(fieldName = "DCNode.DCTerminals", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.DC.DCBaseTerminal", cardinality = "many")
	public void setDCTerminals(List<DCBaseTerminal> DCTerminals){
		this.DCTerminals = DCTerminals;
	}

	public DCEquipmentContainer getDCEquipmentContainer(){
		return this.DCEquipmentContainer;
	}

	@AssociationSetter(fieldName = "DCNode.DCEquipmentContainer", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.DC.DCEquipmentContainer", cardinality = "one")
	public void setDCEquipmentContainer(DCEquipmentContainer DCEquipmentContainer){
		this.DCEquipmentContainer = DCEquipmentContainer;
	}

	public DCNode(){

	}

}
