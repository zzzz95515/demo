package ru.mpei.prob.model.CIMProfile.IEC61968.Operations;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Core.IdentifiedObject;
import ru.mpei.prob.model.CIMProfile.IEC61970.Base.Faults.Fault;
import ru.mpei.prob.model.CIMProfile.ResourceAnnotations.*;

import javax.persistence.*;
import java.util.List;

/**
 * Document describing details of an active or planned outage in a part of 
 * the electrical network.A non-planned outage may be created upon:- a breaker 
 * trip,- a fault indicator status change,- a meter event indicating customer 
 * outage,- a reception of one or more customer trouble calls, or- an operator 
 * command, reflecting information obtained from the field crew.Outage restoration 
 * may be performed using a switching plan which complements the outage information 
 * with detailed switching activities, including the relationship to the crew 
 * and work.A planned outage may be created upon:- a request for service, 
 * maintenance or construction work in the field, or- an operator-defined 
 * outage for what-if/contingency network analysis.
 * Generated by "JavaBeansGenerator" project.
 * @author Said Nukhulov  (nukhulovsm@yandex.ru)
 * @created Sat Dec 05 15:18:50 MSK 2020
 */

@Entity
@Table(name = "outage")
@JsonInclude(JsonInclude.Include.NON_NULL)
// surrogate inheritance
public class Outage extends IdentifiedObject{

	/**
	 * Outage associated with this fault.
	 */
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, fetch = FetchType.LAZY, mappedBy = "Outage")
	private List<Fault> Faults;

	@JsonIgnore
	public List<Fault> getFaults(){
		return this.Faults;
	}

	@AssociationSetter(fieldName = "Outage.Faults", assocType = "ru.mpei.ltdb.model.CIMProfile.IEC61970.Base.Faults.Fault", cardinality = "many")
	public void setFaults(List<Fault> Faults){
		this.Faults = Faults;
	}

	public Outage(){

	}

}
